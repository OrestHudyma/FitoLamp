FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    1.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C28xxx microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting	
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) 
                                        (0082) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0083) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0084) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0085) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0086) ; bytes on the stack which are otherwise required for the return address. If
                                        (0087) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0088) ; release, the C compiler automatically places an infinite loop at the end
                                        (0089) ; of main, rather than a return instruction.)
                                        (0090) ;
                                        (0091) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0092) 
                                        (0093) 
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ; Interrupt Vector Table
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0099) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0100) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0101) ; vector jump targets are modified automatically according to the user
                                        (0102) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0103) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0104) ; configuration files. If you need to hard code a vector, update the
                                        (0105) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0106) ; of this file.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) 
                                        (0109)     AREA TOP (ROM, ABS, CON)
                                        (0110) 
                                        (0111)     org   0                        ;Reset Interrupt Vector
                                        (0112) IF	(TOOLCHAIN & HITECH)
                                        (0113) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0114) ELSE
0000: 80 7F    JMP   0x0080             (0115)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0116) ENDIF
                                        (0117)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0118)     ;---------------------------------------------------
                                        (0119)     ; Insert your custom code below this banner
                                        (0120)     ;---------------------------------------------------
                                        (0121) 
                                        (0122)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0123)     halt                           ;Stop execution if power falls too low
                                        (0124) 
                                        (0125)     org   08h                      ;Analog Column 0 / Decimator 0 Interrupt Vector
                                        (0126)     // call	void_handler
0008: 7E       RETI                     (0127)     reti
                                        (0128) 
                                        (0129)     org   0Ch                      ;Analog Column 1 / Decimator 1 Interrupt Vector
                                        (0130)     // call	void_handler
000C: 7E       RETI                     (0131)     reti
                                        (0132) 
                                        (0133)     org   10h                      ;Analog Column 2 / Decimator 2 Interrupt Vector
                                        (0134)     // call	void_handler
0010: 7E       RETI                     (0135)     reti
                                        (0136) 
                                        (0137)     org   14h                      ;Analog Column 3 / Decimator 3 Interrupt Vector
                                        (0138)     // call	void_handler
0014: 7E       RETI                     (0139)     reti
                                        (0140)     
                                        (0141)     org   18h                      ;VC3 Interrupt Vector
                                        (0142)     // call	void_handler
0018: 7E       RETI                     (0143)     reti
                                        (0144) 
                                        (0145)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0146)     // call	void_handler
001C: 7E       RETI                     (0147)     reti
                                        (0148) 
                                        (0149)     org   20h                      ;PSoC Block DBC00 Interrupt Vector
                                        (0150)     // call	void_handler
0020: 7E       RETI                     (0151)     reti
                                        (0152) 
                                        (0153)     org   24h                      ;PSoC Block DBC01 Interrupt Vector
0024: 7D 0A 10 LJMP  _PWM16_CH0_ISR     (0154)     ljmp	_PWM16_CH0_ISR
0027: 7E       RETI                     (0155)     reti
                                        (0156) 
                                        (0157)     org   28h                      ;PSoC Block DCC02 Interrupt Vector
                                        (0158)     // call	void_handler
0028: 7E       RETI                     (0159)     reti
                                        (0160) 
                                        (0161)     org   2Ch                      ;PSoC Block DCC03 Interrupt Vector
002C: 7D 09 B3 LJMP  _PWM16_CH1_ISR     (0162)     ljmp	_PWM16_CH1_ISR
002F: 7E       RETI                     (0163)     reti
                                        (0164)     
                                        (0165)     org   30h                      ;PSoC Block DBC10 Interrupt Vector
                                        (0166)     // call	void_handler
0030: 7E       RETI                     (0167)     reti
                                        (0168) 
                                        (0169)     org   34h                      ;PSoC Block DBC11 Interrupt Vector
0034: 7D 0A F6 LJMP  _Counter16_PwrUpd_ISR(0170)     ljmp	_Counter16_PwrUpd_ISR
0037: 7E       RETI                     (0171)     reti
                                        (0172) 
                                        (0173)     org   38h                      ;PSoC Block DCC12 Interrupt Vector
0038: 7D 07 2F LJMP  _RX8_GPS_ISR       (0174)     ljmp	_RX8_GPS_ISR
003B: 7E       RETI                     (0175)     reti
                                        (0176) 
                                        (0177)     org   3Ch                      ;PSoC Block DCC13 Interrupt Vector
                                        (0178)     // call	void_handler
003C: 7E       RETI                     (0179)     reti
                                        (0180) 
                                        (0181) 	org   40h                      ;PSoC Block DBC20 Interrupt Vector
0040: 7D 0A AB LJMP  _Counter8_RF_clk_ISR(0182)     ljmp	_Counter8_RF_clk_ISR
0043: 7E       RETI                     (0183)     reti
                                        (0184) 	
                                        (0185) 	org   44h                      ;PSoC Block DBC21 Interrupt Vector
                                        (0186)     // call	void_handler
0044: 7E       RETI                     (0187)     reti
                                        (0188) 	
                                        (0189) 	org   48h                      ;PSoC Block DCC22 Interrupt Vector
0048: 7D 05 49 LJMP  _RX8_RF_ISR        (0190)     ljmp	_RX8_RF_ISR
004B: 7E       RETI                     (0191)     reti
                                        (0192) 	
                                        (0193) 	org   4Ch                      ;PSoC Block DCC23 Interrupt Vector
                                        (0194)     // call	void_handler
004C: 7E       RETI                     (0195)     reti
                                        (0196) 	 
                                        (0197)     org   60h                      ;PSoC I2C0 Interrupt Vector
                                        (0198)     // call	void_handler
0060: 7E       RETI                     (0199)     reti
                                        (0200) 
                                        (0201) 	org   64h                      ;PSoC I2C1 Interrupt Vector
                                        (0202)     // call	void_handler
0064: 7E       RETI                     (0203)     reti
                                        (0204) 	
                                        (0205) 	org   68h                      ;PSoC SARADC Interrupt Vector
                                        (0206)     // call	void_handler
0068: 7E       RETI                     (0207)     reti
                                        (0208) 	
                                        (0209) 	org   6Ch                      ;PSoC RTC Interrupt Vector
006C: 7D 09 15 LJMP  _RTC_ISR           (0210)     ljmp	_RTC_ISR
006F: 7E       RETI                     (0211)     reti
                                        (0212) 	
                                        (0213) 	org   70h                      ;Analog Column 4 Interrupt Vector
                                        (0214)     // call	void_handler
0070: 7E       RETI                     (0215)     reti
                                        (0216) 	
                                        (0217) 	org   74h                      ;Analog Column 5 Interrupt Vector
                                        (0218)     // call	void_handler
0074: 7E       RETI                     (0219)     reti
                                        (0220) 	
                                        (0221)     org   7Ch                      ;Sleep Timer Interrupt Vector
                                        (0222)     // call	void_handler
007C: 7E       RETI                     (0223)     reti
0080: 71 10    OR    F,0x10             
                                        (0224)     ;---------------------------------------------------
                                        (0225)     ; Insert your custom code above this banner
                                        (0226)     ;---------------------------------------------------
                                        (0227)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0228) 
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;  Start of Execution.
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0233) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0234) ;
                                        (0235) 
                                        (0236) IF	(TOOLCHAIN & HITECH)
                                        (0237)  	AREA PD_startup(CODE, REL, CON)
                                        (0238) ELSE
                                        (0239)     org 80h
                                        (0240) ENDIF
                                        (0241) __Start:
                                        (0242) 
                                        (0243)     ; initialize SMP values for voltage stabilization, if required,
                                        (0244)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0245)     ; least for now. 
                                        (0246)     ;
                                        (0247)     M8C_SetBank1
0082: 62 E3 87 MOV   REG[0xE3],0x87     (0248)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0085: 70 EF    AND   F,0xEF             
0087: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0249)     M8C_SetBank0
                                        (0250) 
                                        (0251) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0252) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0253)     M8C_EnableWatchDog
                                        (0254) ENDIF
                                        (0255) 
                                        (0256) IF ( SELECT_32K )
                                        (0257)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0258) ELSE
008A: 41 FE FB AND   REG[0xFE],0xFB     (0259)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0260) ENDIF
                                        (0261) 
                                        (0262)     ;---------------------------
                                        (0263)     ; Set up the Temporary stack
                                        (0264)     ;---------------------------
                                        (0265)     ; A temporary stack is set up for the SSC instructions.
                                        (0266)     ; The real stack start will be assigned later.
                                        (0267)     ;
                                        (0268) _stack_start:          equ 80h
008D: 50 80    MOV   A,0x80             (0269)     mov   A, _stack_start          ; Set top of stack to end of used RAM
008F: 4E       SWAP  SP,A               (0270)     swap  SP, A                    ; This is only temporary if going to LMM
0090: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0271) 
                                        (0272)     ;------------------------
                                        (0273)     ; Set Power-related Trim 
                                        (0274)     ;------------------------
                                        (0275) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0276) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0277)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0278)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0279)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0280) ELSE
                                        (0281) 	IF ( AGND_BYPASS )
                                        (0282)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0283)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0284)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0285)     ; value using the proper trim values.
                                        (0286)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0287)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0288)   ENDIF
                                        (0289)  ENDIF
                                        (0290) ENDIF ; 5.0 V Operation
                                        (0291) 
                                        (0292) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0293)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0294)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0295)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0296)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0297)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0298)  ENDIF
                                        (0299) ENDIF ; 3.3 Volt Operation
                                        (0300) 
                                        (0301) 
0093: 55 F8 00 MOV   [NMEA_pointer_rf+2],0x0(0302)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0096: 55 F9 00 MOV   [NMEA_pointer_rf+3],0x0(0303)     mov  [bSSC_KEYSP], 0
0099: 71 10    OR    F,0x10             
                                        (0304) 
                                        (0305)     ;---------------------------------------
                                        (0306)     ; Initialize Crystal Oscillator and PLL
                                        (0307)     ;---------------------------------------
                                        (0308) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0309)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0310)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0311)     ; is left off.  The SleepTimer period is set to 1 sec to time the wait for
                                        (0312)     ; the ECO to stabilize.
                                        (0313)     ;
                                        (0314)     M8C_SetBank1
                                        (0315)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0316)     M8C_SetBank0
                                        (0317)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0318)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0319)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0320) .WaitFor1s:
                                        (0321)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0322)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0323)                                           ;  since interrupts are not globally enabled
                                        (0324) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0325)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0326)     M8C_SetBank1
009B: 62 E0 02 MOV   REG[0xE0],0x2      (0327)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
009E: 70 EF    AND   F,0xEF             
00A0: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0328)     M8C_SetBank0
                                        (0329)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0330) 
                                        (0331) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0332) 
                                        (0333) IF ( PLL_MODE )
                                        (0334)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0335)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0336)     ;
                                        (0337)     M8C_SetBank1
                                        (0338)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0339)     M8C_SetBank0
                                        (0340)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0341)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0342) 
                                        (0343) .WaitFor16ms:
                                        (0344)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0345)     jz   .WaitFor16ms
                                        (0346)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0347)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0348)     M8C_SetBank0
                                        (0349) 
                                        (0350) IF      ( WAIT_FOR_32K )
                                        (0351) ELSE ; !( WAIT_FOR_32K )
                                        (0352)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0353)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0354) ENDIF ;(WAIT_FOR_32K)
                                        (0355) ENDIF ;(PLL_MODE)
                                        (0356) 
                                        (0357) 	;-------------------------------------------------------
                                        (0358)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0359)     ;-------------------------------------------------------
                                        (0360) 
                                        (0361)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0362) 
                                        (0363) IF (SYSCLK_SOURCE)
                                        (0364)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0365) ENDIF
                                        (0366)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0367) 
                                        (0368) 	;------------------------
                                        (0369) 	; Close CT leakage path.
                                        (0370) 	;------------------------
00A3: 62 71 05 MOV   REG[0x71],0x5      (0371) 	mov reg[ACC00CR0], 05h
00A6: 62 75 05 MOV   REG[0x75],0x5      (0372) 	mov reg[ACC01CR0], 05h
00A9: 62 79 05 MOV   REG[0x79],0x5      (0373) 	mov reg[ACC02CR0], 05h
00AC: 62 7D 05 MOV   REG[0x7D],0x5      (0374) 	mov reg[ACC03CR0], 05h
00AF: 62 D1 03 MOV   REG[0xD1],0x3      
                                        (0375) 
                                        (0376) 
                                        (0377) 
                                        (0378) IF	(TOOLCHAIN & HITECH)
                                        (0379)     ;---------------------------------------------
                                        (0380)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0381)     ;---------------------------------------------
                                        (0382) 	global		__Lstackps
                                        (0383) 	mov     a,low __Lstackps
                                        (0384) 	swap    a,sp
                                        (0385) 
                                        (0386) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0387)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0388)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0389)     RAM_SETPAGE_CUR 0
                                        (0390)     RAM_SETPAGE_MVW 0
                                        (0391)     RAM_SETPAGE_MVR 0
                                        (0392)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0393)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0394)     ELSE
                                        (0395)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0396)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0397) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0398) ELSE
                                        (0399)     ;---------------------------------------------
                                        (0400)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0401)     ;---------------------------------------------
                                        (0402) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0403)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00B2: 50 00    MOV   A,0x0              (0404)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00B4: 4E       SWAP  SP,A               (0405)     swap  A, SP
00B5: 62 D3 03 MOV   REG[0xD3],0x3      
00B8: 62 D0 00 MOV   REG[0xD0],0x0      
00BB: 62 D5 00 MOV   REG[0xD5],0x0      
00BE: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0406)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0407)     RAM_SETPAGE_CUR 0
                                        (0408)     RAM_SETPAGE_MVW 0
                                        (0409)     RAM_SETPAGE_MVR 0
                                        (0410) 
                                        (0411)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00C1: 71 C0    OR    F,0xC0             (0412)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0413)   ELSE
                                        (0414)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0415)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0416) ELSE
                                        (0417)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0418)     swap  SP, A
                                        (0419) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0420) ENDIF ;	TOOLCHAIN
                                        (0421) 
                                        (0422)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0423)     ;---------------------------------------------------
                                        (0424)     ; Insert your custom code below this banner
                                        (0425)     ;---------------------------------------------------
                                        (0426) 
                                        (0427)     ;---------------------------------------------------
                                        (0428)     ; Insert your custom code above this banner
                                        (0429)     ;---------------------------------------------------
                                        (0430)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0431) 
                                        (0432)     ;-------------------------
                                        (0433)     ; Load Base Configuration
                                        (0434)     ;-------------------------
                                        (0435)     ; Load global parameter settings and load the user modules in the
                                        (0436)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0437)     ; to minimize start up time; (2) We may still need to play with the
                                        (0438)     ; Sleep Timer.
                                        (0439)     ;
00C3: 7C 04 E4 LCALL 0x04E4             (0440)     lcall LoadConfigInit
00C6: 70 EF    AND   F,0xEF             
                                        (0441)     M8C_SetBank0
                                        (0442) 
                                        (0443)     ;-----------------------------------
                                        (0444)     ; Initialize C Run-Time Environment
                                        (0445)     ;-----------------------------------
                                        (0446) IF ( C_LANGUAGE_SUPPORT )
                                        (0447) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0448)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0449)     mov  [__r0],<__bss_start
                                        (0450) BssLoop:
                                        (0451)     cmp  [__r0],<__bss_end
                                        (0452)     jz   BssDone
                                        (0453)     mvi  [__r0],A
                                        (0454)     jmp  BssLoop
                                        (0455) BssDone:
                                        (0456)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0457)     mov  X,<__idata_start
                                        (0458)     mov  [__r0],<__data_start
                                        (0459) IDataLoop:
                                        (0460)     cmp  [__r0],<__data_end
                                        (0461)     jz   C_RTE_Done
                                        (0462)     push A
                                        (0463)     romx
                                        (0464)     mvi  [__r0],A
                                        (0465)     pop  A
                                        (0466)     inc  X
                                        (0467)     adc  A,0
                                        (0468)     jmp  IDataLoop
                                        (0469) 
                                        (0470) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0471) 
                                        (0472) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00C8: 62 D0 00 MOV   REG[0xD0],0x0      (0473)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0474)                                        ; to use the Virtual Register page.
                                        (0475) 
                                        (0476)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0477)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0478)     ; text segment and may have been relocated by the Code Compressor.
                                        (0479)     ;
00CB: 50 04    MOV   A,0x4              (0480)     mov   A, >__pXIData                ; Get the address of the flash
00CD: 57 1D    MOV   X,0x1D             (0481)     mov   X, <__pXIData                ;   pointer to the xidata area.
00CF: 08       PUSH  A                  (0482)     push  A
00D0: 28       ROMX                     (0483)     romx                               ; get the MSB of xidata's address
00D1: 53 D7    MOV   [__r0],A           (0484)     mov   [__r0], A
00D3: 18       POP   A                  (0485)     pop   A
00D4: 75       INC   X                  (0486)     inc   X
00D5: 09 00    ADC   A,0x0              (0487)     adc   A, 0
00D7: 28       ROMX                     (0488)     romx                               ; get the LSB of xidata's address
00D8: 4B       SWAP  A,X                (0489)     swap  A, X
00D9: 51 D7    MOV   A,[__r0]           (0490)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0491)                                        ;   XIData structure list in flash
00DB: 80 04    JMP   0x00E0             (0492)     jmp   .AccessStruct
                                        (0493) 
                                        (0494)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0495)     ; values of C variables. Each structure contains 3 member elements.
                                        (0496)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0497)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0498)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0499)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0500)     ; value in the second member element, an unsigned byte:
                                        (0501)     ; (1) If the value of the second element is non-zero, it represents
                                        (0502)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0503)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0504)     ; the bytes are copied to the block of RAM.
                                        (0505)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0506)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0507)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0508) 
                                        (0509) .AccessNextStructLoop:
00DD: 75       INC   X                  (0510)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0511)     adc   A, 0
00E0: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0512) .AccessStruct:                         ; Entry point for first block
                                        (0513)     ;
                                        (0514)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0515)     ;
                                        (0516)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00E3: 08       PUSH  A                  (0517)     push  A
00E4: 28       ROMX                     (0518)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00E5: 60 D5    MOV   REG[0xD5],A        (0519)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00E7: 74       INC   A                  (0520)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00E8: A0 4B    JZ    0x0134             (0521)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00EA: 18       POP   A                  (0522)     pop   A                            ; restore pXIData to [A,X]
00EB: 75       INC   X                  (0523)     inc   X                            ; pXIData++
00EC: 09 00    ADC   A,0x0              (0524)     adc   A, 0
00EE: 08       PUSH  A                  (0525)     push  A
00EF: 28       ROMX                     (0526)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00F0: 53 D7    MOV   [__r0],A           (0527)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00F2: 18       POP   A                  (0528)     pop   A                            ; restore pXIData to [A,X]
00F3: 75       INC   X                  (0529)     inc   X                            ; pXIData++ (point to size)
00F4: 09 00    ADC   A,0x0              (0530)     adc   A, 0
00F6: 08       PUSH  A                  (0531)     push  A
00F7: 28       ROMX                     (0532)     romx                               ; Get the size (CPU.A <- *pXIData)
00F8: A0 1C    JZ    0x0115             (0533)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00FA: 53 D6    MOV   [__r1],A           (0534)     mov   [__r1], A                    ;             else downcount in __r1
00FC: 18       POP   A                  (0535)     pop   A                            ; restore pXIData to [A,X]
                                        (0536) 
                                        (0537) .CopyNextByteLoop:
                                        (0538)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0539)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0540)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0541)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0542)     ;
00FD: 75       INC   X                  (0543)     inc   X                            ; pXIData++ (point to next data byte)
00FE: 09 00    ADC   A,0x0              (0544)     adc   A, 0
0100: 08       PUSH  A                  (0545)     push  A
0101: 28       ROMX                     (0546)     romx                               ; Get the data value (CPU.A <- *pXIData)
0102: 3F D7    MVI   [__r0],A           (0547)     mvi   [__r0], A                    ; Transfer the data to RAM
0104: 47 D7 FF TST   [__r0],0xFF        (0548)     tst   [__r0], 0xff                 ; Check for page crossing
0107: B0 06    JNZ   0x010E             (0549)     jnz   .CopyLoopTail                ;   No crossing, keep going
0109: 5D D5    MOV   A,REG[0xD5]        (0550)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
010B: 74       INC   A                  (0551)     inc   A
010C: 60 D5    MOV   REG[0xD5],A        (0552)     mov   reg[ MVW_PP], A
                                        (0553) .CopyLoopTail:
010E: 18       POP   A                  (0554)     pop   A                            ; restore pXIData to [A,X]
010F: 7A D6    DEC   [__r1]             (0555)     dec   [__r1]                       ; End of this array in flash?
0111: BF EB    JNZ   0x00FD             (0556)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0113: 8F C9    JMP   0x00DD             (0557)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0558) 
                                        (0559) .ClearRAMBlockToZero:
0115: 18       POP   A                  (0560)     pop   A                            ; restore pXIData to [A,X]
0116: 75       INC   X                  (0561)     inc   X                            ; pXIData++ (point to next data byte)
0117: 09 00    ADC   A,0x0              (0562)     adc   A, 0
0119: 08       PUSH  A                  (0563)     push  A
011A: 28       ROMX                     (0564)     romx                               ; Get the run length (CPU.A <- *pXIData)
011B: 53 D6    MOV   [__r1],A           (0565)     mov   [__r1], A                    ; Initialize downcounter
011D: 50 00    MOV   A,0x0              (0566)     mov   A, 0                         ; Initialize source data
                                        (0567) 
                                        (0568) .ClearRAMBlockLoop:
                                        (0569)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0570)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0571)     ;
011F: 3F D7    MVI   [__r0],A           (0572)     mvi   [__r0], A                    ; Clear a byte
0121: 47 D7 FF TST   [__r0],0xFF        (0573)     tst   [__r0], 0xff                 ; Check for page crossing
0124: B0 08    JNZ   0x012D             (0574)     jnz   .ClearLoopTail               ;   No crossing, keep going
0126: 5D D5    MOV   A,REG[0xD5]        (0575)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0128: 74       INC   A                  (0576)     inc   A
0129: 60 D5    MOV   REG[0xD5],A        (0577)     mov   reg[ MVW_PP], A
012B: 50 00    MOV   A,0x0              (0578)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0579) .ClearLoopTail:
012D: 7A D6    DEC   [__r1]             (0580)     dec   [__r1]                       ; Was this the last byte?
012F: BF EF    JNZ   0x011F             (0581)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0131: 18       POP   A                  (0582)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0132: 8F AA    JMP   0x00DD             (0583)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0584) 
                                        (0585) .C_RTE_WrapUp:
0134: 18       POP   A                  (0586)     pop   A                            ; balance stack
0135: 71 10    OR    F,0x10             
                                        (0587) 
                                        (0588) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0589) 
                                        (0590) C_RTE_Done:
                                        (0591) 
                                        (0592) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0593) 
                                        (0594)     ;-------------------------------
                                        (0595)     ; Voltage Stabilization for SMP
                                        (0596)     ;-------------------------------
                                        (0597) 
                                        (0598) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0599) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0600)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0601)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0602)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0603)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0604)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0605)     M8C_SetBank1
                                        (0606)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0607)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0608)     M8C_SetBank0
                                        (0609)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0610)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0611) .WaitFor2ms:
                                        (0612)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0613)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0614) ENDIF ; SMP is operational
                                        (0615) ENDIF ; 5.0V Operation
                                        (0616) 
                                        (0617)     ;-------------------------------
                                        (0618)     ; Set Power-On Reset (POR) Level
                                        (0619)     ;-------------------------------
                                        (0620) 
                                        (0621)     ; This checks for improper selection of CPU voltage and processer speed ratings. If an improper selection 
                                        (0622)     ; is made (in the global resources section of the device editor), a compilation error is created, disallowing
                                        (0623)     ; this selection. If the selection is valid, the POR level is then set.
                                        (0624)     ; Invalid cases checked: 
                                        (0625)     ;   -At 3.3 volt operation, the cpu rate must be at or below 12 MHz
                                        (0626) 
                                        (0627) 
                                        (0628) IF (POWER_SETTING & POWER_SET_3V3)		; 3.3V Operation?
                                        (0629)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** SLIMO = 6MHZ, Do Nothing ***
                                        (0630)  ELSE
                                        (0631)    IF (CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 24 MHz, Do Nothing...
                                        (0632)    ELSE						; Otherwise, 24 MHz is selected... raise error
                                        (0633) 	ERROR_PSoC SEE COMMENTS			; Error - cannot use 24 MHz w/ 3.3V operation (Clock <= 12 MHz)
                                        (0634)    ENDIF
                                        (0635)  ENDIF
                                        (0636) ENDIF
                                        (0637)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0638)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0639)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0640)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0641)     ;  Technical Reference Manual #001-52594 for more information.
                                        (0642) 
                                        (0643)     M8C_SetBank1
                                        (0644) 
                                        (0645) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0646)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0647)  ELSE                                       ;    No, fast mode
                                        (0648)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0649)                                             ;       no, set midpoint POR in user code, if desired
                                        (0650)   ELSE ; 24HMz                              ;
0137: 43 E3 20 OR    REG[0xE3],0x20     (0651)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
013A: 70 EF    AND   F,0xEF             
                                        (0652)   ENDIF ; 24MHz
                                        (0653)  ENDIF ; Slow Mode
                                        (0654) ENDIF ; 5.0V Operation
                                        (0655) 
                                        (0656)     M8C_SetBank0
                                        (0657) 
                                        (0658)     ;----------------------------
                                        (0659)     ; Wrap up and invoke "main"
                                        (0660)     ;----------------------------
                                        (0661) 
                                        (0662)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0663)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0664)     ;
013C: 62 E0 00 MOV   REG[0xE0],0x0      (0665)     mov  reg[INT_MSK0],0
013F: 71 10    OR    F,0x10             
                                        (0666) 
                                        (0667)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0668)     ;
                                        (0669)     M8C_SetBank1
0141: 62 E0 03 MOV   REG[0xE0],0x3      (0670)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0144: 43 E2 00 OR    REG[0xE2],0x0      (0671) 	or  reg[OSC_CR2], (SLEEP_TIMER_JUST2)
0147: 70 EF    AND   F,0xEF             
                                        (0672)     M8C_SetBank0
                                        (0673) 
                                        (0674)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0675)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0676)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0677)     ;
0149: 62 E2 00 MOV   REG[0xE2],0x0      (0678)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0679)                                    ; have been set during the boot process.
                                        (0680) IF	(TOOLCHAIN & HITECH)
                                        (0681) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0682) ELSE
                                        (0683) IF ENABLE_LJMP_TO_MAIN
                                        (0684)     ljmp  _main                    ; goto main (no return)
                                        (0685) ELSE
014C: 7C 0D 90 LCALL _main              (0686)     lcall _main                    ; call main
                                        (0687) .Exit:
014F: 8F FF    JMP   0x014F             (0688)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0689) ENDIF
                                        (0690) ENDIF ; TOOLCHAIN
                                        (0691) 
                                        (0692)     ;---------------------------------
                                        (0693)     ; Library Access to Global Parms
                                        (0694)     ;---------------------------------
                                        (0695)     ;
                                        (0696)  bGetPowerSetting:
                                        (0697) _bGetPowerSetting:
                                        (0698)     ; Returns value of POWER_SETTING in the A register.
                                        (0699)     ; No inputs. No Side Effects.
                                        (0700)     ;
                                        (0701) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0702)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0703) ELSE
0151: 50 10    MOV   A,0x10             (0704)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0705) ENDIF
0153: 7F       RET                      (0706)     ret
                                        (0707) 
                                        (0708) IF	(TOOLCHAIN & HITECH)
                                        (0709) ELSE
                                        (0710)     ;---------------------------------
                                        (0711)     ; Order Critical RAM & ROM AREAs
                                        (0712)     ;---------------------------------
                                        (0713)     ;  'TOP' is all that has been defined so far...
                                        (0714) 
                                        (0715)     ;  ROM AREAs for C CONST, static & global items
                                        (0716)     ;
                                        (0717)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0718)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0719) __idata_start:
                                        (0720) 
                                        (0721)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0722) __func_lit_start:
                                        (0723) 
                                        (0724) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0725)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0726)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0727)     ; relocated by the code compressor, but the text area may shrink and
                                        (0728)     ; that moves xidata around.
                                        (0729)     ;
                                        (0730) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0731) ENDIF
                                        (0732) 
                                        (0733)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0734)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0735) 
                                        (0736)     ; CODE segment for general use
                                        (0737)     ;
                                        (0738)     AREA text (ROM, REL, CON)
                                        (0739) __text_start:
                                        (0740) 
                                        (0741)     ; RAM area usage
                                        (0742)     ;
                                        (0743)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0744) __data_start:
                                        (0745) 
                                        (0746)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0747)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0748)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0749) __bss_start:
                                        (0750) ENDIF ; TOOLCHAIN
                                        (0751) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
041F: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_fitolamp_slave_Bank1
                                        (0019) export LoadConfigTBL_fitolamp_slave_Bank0
                                        (0020) export LoadConfigTBL_fitolamp_slave_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_fitolamp_slave_Bank0:
                                        (0023) ;  Instance name Counter16_PwrUpd, User Module Counter16
                                        (0024) ;       Instance name Counter16_PwrUpd, Block Name CNTR16_LSB(DBC10)
                                        (0025) 	db		33h, 00h		;Counter16_PwrUpd_CONTROL_LSB_REG(DBC10CR0)
                                        (0026) 	db		31h, 10h		;Counter16_PwrUpd_PERIOD_LSB_REG(DBC10DR1)
                                        (0027) 	db		32h, 00h		;Counter16_PwrUpd_COMPARE_LSB_REG(DBC10DR2)
                                        (0028) ;       Instance name Counter16_PwrUpd, Block Name CNTR16_MSB(DBC11)
                                        (0029) 	db		37h, 00h		;Counter16_PwrUpd_CONTROL_MSB_REG(DBC11CR0)
                                        (0030) 	db		35h, 27h		;Counter16_PwrUpd_PERIOD_MSB_REG(DBC11DR1)
                                        (0031) 	db		36h, 00h		;Counter16_PwrUpd_COMPARE_MSB_REG(DBC11DR2)
                                        (0032) ;  Instance name Counter8_RF_clk, User Module Counter8
                                        (0033) ;       Instance name Counter8_RF_clk, Block Name CNTR8(DBC20)
                                        (0034) 	db		43h, 00h		;Counter8_RF_clk_CONTROL_REG(DBC20CR0)
                                        (0035) 	db		41h, 9ch		;Counter8_RF_clk_PERIOD_REG(DBC20DR1)
                                        (0036) 	db		42h, 4eh		;Counter8_RF_clk_COMPARE_REG(DBC20DR2)
                                        (0037) ;  Instance name LED_Blue, User Module LED
                                        (0038) ;  Instance name PWM16_CH0, User Module PWM16
                                        (0039) ;       Instance name PWM16_CH0, Block Name PWM16_LSB(DBC00)
                                        (0040) 	db		23h, 00h		;PWM16_CH0_CONTROL_LSB_REG(DBC00CR0)
                                        (0041) 	db		21h, 20h		;PWM16_CH0_PERIOD_LSB_REG(DBC00DR1)
                                        (0042) 	db		22h, 00h		;PWM16_CH0_COMPARE_LSB_REG(DBC00DR2)
                                        (0043) ;       Instance name PWM16_CH0, Block Name PWM16_MSB(DBC01)
                                        (0044) 	db		27h, 00h		;PWM16_CH0_CONTROL_MSB_REG(DBC01CR0)
                                        (0045) 	db		25h, 4eh		;PWM16_CH0_PERIOD_MSB_REG(DBC01DR1)
                                        (0046) 	db		26h, 00h		;PWM16_CH0_COMPARE_MSB_REG(DBC01DR2)
                                        (0047) ;  Instance name PWM16_CH1, User Module PWM16
                                        (0048) ;       Instance name PWM16_CH1, Block Name PWM16_LSB(DCC02)
                                        (0049) 	db		2bh, 00h		;PWM16_CH1_CONTROL_LSB_REG(DCC02CR0)
                                        (0050) 	db		29h, 20h		;PWM16_CH1_PERIOD_LSB_REG(DCC02DR1)
                                        (0051) 	db		2ah, 00h		;PWM16_CH1_COMPARE_LSB_REG(DCC02DR2)
                                        (0052) ;       Instance name PWM16_CH1, Block Name PWM16_MSB(DCC03)
                                        (0053) 	db		2fh, 00h		;PWM16_CH1_CONTROL_MSB_REG(DCC03CR0)
                                        (0054) 	db		2dh, 4eh		;PWM16_CH1_PERIOD_MSB_REG(DCC03DR1)
                                        (0055) 	db		2eh, 00h		;PWM16_CH1_COMPARE_MSB_REG(DCC03DR2)
                                        (0056) ;  Instance name RTC, User Module RTC
                                        (0057) ;  Instance name RX8_GPS, User Module RX8
                                        (0058) ;       Instance name RX8_GPS, Block Name RX8(DCC12)
                                        (0059) 	db		3bh, 00h		;RX8_GPS_CONTROL_REG  (DCC12CR0)
                                        (0060) 	db		39h, 00h		;RX8_GPS_(DCC12DR1)
                                        (0061) 	db		3ah, 00h		;RX8_GPS_RX_BUFFER_REG(DCC12DR2)
                                        (0062) ;  Instance name RX8_RF, User Module RX8
                                        (0063) ;       Instance name RX8_RF, Block Name RX8(DCC22)
                                        (0064) 	db		4bh, 00h		;RX8_RF_CONTROL_REG  (DCC22CR0)
                                        (0065) 	db		49h, 00h		;RX8_RF_(DCC22DR1)
                                        (0066) 	db		4ah, 00h		;RX8_RF_RX_BUFFER_REG(DCC22DR2)
                                        (0067) ;  Global Register values Bank 0
                                        (0068) 	db		6ah, 00h		; ADCDataHigh register (SADC_DH)
                                        (0069) 	db		6bh, 00h		; ADCDataLow register (SADC_DL)
                                        (0070) 	db		62h, 00h		; AnalogClockSelect3 register (CLK_CR3)
                                        (0071) 	db		60h, 29h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0072) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0073) 	db		61h, 00h		; AnalogMuxBusConfig register (AMUX_CFG)
                                        (0074) 	db		fch, 00h		; AnalogMuxDACData:0 register (IDACR_D)
                                        (0075) 	db		fdh, 00h		; AnalogMuxDACData:1 register (IDACL_D)
                                        (0076) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0077) 	db		65h, 00h		; AnalogSynchronizationControl register (ASY_CR)
                                        (0078) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0079) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0080) 	db		a0h, 00h		; DecimatorDataHigh:0 register (DEC0_DH)
                                        (0081) 	db		a2h, 00h		; DecimatorDataHigh:1 register (DEC1_DH)
                                        (0082) 	db		a4h, 00h		; DecimatorDataHigh:2 register (DEC2_DH)
                                        (0083) 	db		a6h, 00h		; DecimatorDataHigh:3 register (DEC3_DH)
                                        (0084) 	db		a1h, 00h		; DecimatorDataLow:0 register (DEC0_DL)
                                        (0085) 	db		a3h, 00h		; DecimatorDataLow:1 register (DEC1_DL)
                                        (0086) 	db		a5h, 00h		; DecimatorDataLow:2 register (DEC2_DL)
                                        (0087) 	db		a7h, 00h		; DecimatorDataLow:3 register (DEC3_DL)
                                        (0088) 	db		d6h, 00h		; I2CConfig:0 register (I2C0_CFG)
                                        (0089) 	db		e8h, 00h		; Multiply0InputX register (MUL0_X)
                                        (0090) 	db		e9h, 00h		; Multiply0InputY register (MUL0_Y)
                                        (0091) 	db		a8h, 00h		; Multiply1InputX register (MUL1_X)
                                        (0092) 	db		a9h, 00h		; Multiply1InputY register (MUL1_Y)
                                        (0093) 	db		b7h, 00h		; RowDigitalInterconnectInputSelect:0 register (RDI0DSM)
                                        (0094) 	db		bfh, 00h		; RowDigitalInterconnectInputSelect:1 register (RDI1DSM)
                                        (0095) 	db		c7h, 00h		; RowDigitalInterconnectInputSelect:2 register (RDI2DSM)
                                        (0096) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0097) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0098) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0099) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0100) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0101) 	db		b5h, 44h		; Row_0_OutputDrive_0 register (RDI0RO0)
                                        (0102) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0RO1)
                                        (0103) 	db		b8h, 65h		; Row_1_InputMux register (RDI1RI)
                                        (0104) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0105) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0106) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0107) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0108) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1RO0)
                                        (0109) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1RO1)
                                        (0110) 	db		c0h, aah		; Row_2_InputMux register (RDI2RI)
                                        (0111) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0112) 	db		c2h, 00h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0113) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0114) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI2LT1)
                                        (0115) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2RO0)
                                        (0116) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2RO1)
                                        (0117) 	db		ffh
                                        (0118) LoadConfigTBL_fitolamp_slave_Bank1:
                                        (0119) ;  Instance name Counter16_PwrUpd, User Module Counter16
                                        (0120) ;       Instance name Counter16_PwrUpd, Block Name CNTR16_LSB(DBC10)
                                        (0121) 	db		33h, 00h		;Counter16_PwrUpd_(DBC10CR1)
                                        (0122) 	db		30h, 01h		;Counter16_PwrUpd_FUNC_LSB_REG(DBC10FN)
                                        (0123) 	db		31h, 17h		;Counter16_PwrUpd_INPUT_LSB_REG(DBC10IN)
                                        (0124) 	db		32h, 00h		;Counter16_PwrUpd_OUTPUT_LSB_REG(DBC10OU)
                                        (0125) ;       Instance name Counter16_PwrUpd, Block Name CNTR16_MSB(DBC11)
                                        (0126) 	db		37h, 00h		;Counter16_PwrUpd_(DBC11CR1)
                                        (0127) 	db		34h, 21h		;Counter16_PwrUpd_FUNC_MSB_REG(DBC11FN)
                                        (0128) 	db		35h, 37h		;Counter16_PwrUpd_INPUT_MSB_REG(DBC11IN)
                                        (0129) 	db		36h, 00h		;Counter16_PwrUpd_OUTPUT_MSB_REG(DBC11OU)
                                        (0130) ;  Instance name Counter8_RF_clk, User Module Counter8
                                        (0131) ;       Instance name Counter8_RF_clk, Block Name CNTR8(DBC20)
                                        (0132) 	db		43h, 00h		;Counter8_RF_clk_(DBC20CR1)
                                        (0133) 	db		40h, 31h		;Counter8_RF_clk_FUNC_REG(DBC20FN)
                                        (0134) 	db		41h, 16h		;Counter8_RF_clk_INPUT_REG(DBC20IN)
                                        (0135) 	db		42h, 04h		;Counter8_RF_clk_OUTPUT_REG(DBC20OU)
                                        (0136) ;  Instance name LED_Blue, User Module LED
                                        (0137) ;  Instance name PWM16_CH0, User Module PWM16
                                        (0138) ;       Instance name PWM16_CH0, Block Name PWM16_LSB(DBC00)
                                        (0139) 	db		23h, 00h		;PWM16_CH0_(DBC00CR1)
                                        (0140) 	db		20h, 11h		;PWM16_CH0_FUNC_LSB_REG(DBC00FN)
                                        (0141) 	db		21h, 14h		;PWM16_CH0_INPUT_LSB_REG(DBC00IN)
                                        (0142) 	db		22h, 00h		;PWM16_CH0_OUTPUT_LSB_REG(DBC00OU)
                                        (0143) ;       Instance name PWM16_CH0, Block Name PWM16_MSB(DBC01)
                                        (0144) 	db		27h, 00h		;PWM16_CH0_(DBC01CR1)
                                        (0145) 	db		24h, 31h		;PWM16_CH0_FUNC_MSB_REG(DBC01FN)
                                        (0146) 	db		25h, 34h		;PWM16_CH0_INPUT_MSB_REG(DBC01IN)
                                        (0147) 	db		26h, 04h		;PWM16_CH0_OUTPUT_MSB_REG(DBC01OU)
                                        (0148) ;  Instance name PWM16_CH1, User Module PWM16
                                        (0149) ;       Instance name PWM16_CH1, Block Name PWM16_LSB(DCC02)
                                        (0150) 	db		2bh, 00h		;PWM16_CH1_(DCC02CR1)
                                        (0151) 	db		28h, 11h		;PWM16_CH1_FUNC_LSB_REG(DCC02FN)
                                        (0152) 	db		29h, 14h		;PWM16_CH1_INPUT_LSB_REG(DCC02IN)
                                        (0153) 	db		2ah, 00h		;PWM16_CH1_OUTPUT_LSB_REG(DCC02OU)
                                        (0154) ;       Instance name PWM16_CH1, Block Name PWM16_MSB(DCC03)
                                        (0155) 	db		2fh, 00h		;PWM16_CH1_(DCC03CR1)
                                        (0156) 	db		2ch, 31h		;PWM16_CH1_FUNC_MSB_REG(DCC03FN)
                                        (0157) 	db		2dh, 34h		;PWM16_CH1_INPUT_MSB_REG(DCC03IN)
                                        (0158) 	db		2eh, 05h		;PWM16_CH1_OUTPUT_MSB_REG(DCC03OU)
                                        (0159) ;  Instance name RTC, User Module RTC
                                        (0160) ;  Instance name RX8_GPS, User Module RX8
                                        (0161) ;       Instance name RX8_GPS, Block Name RX8(DCC12)
                                        (0162) 	db		3bh, 00h		;RX8_GPS_(DCC12CR1)
                                        (0163) 	db		38h, 05h		;RX8_GPS_FUNC_REG     (DCC12FN)
                                        (0164) 	db		39h, e1h		;RX8_GPS_INPUT_REG    (DCC12IN)
                                        (0165) 	db		3ah, 00h		;RX8_GPS_OUTPUT_REG   (DCC12OU)
                                        (0166) ;  Instance name RX8_RF, User Module RX8
                                        (0167) ;       Instance name RX8_RF, Block Name RX8(DCC22)
                                        (0168) 	db		4bh, 00h		;RX8_RF_(DCC22CR1)
                                        (0169) 	db		48h, 85h		;RX8_RF_FUNC_REG     (DCC22FN)
                                        (0170) 	db		49h, f8h		;RX8_RF_INPUT_REG    (DCC22IN)
                                        (0171) 	db		4ah, 00h		;RX8_RF_OUTPUT_REG   (DCC22OU)
                                        (0172) ;  Global Register values Bank 1
                                        (0173) 	db		a8h, 00h		; ADCControl0 register (SADC_CR0)
                                        (0174) 	db		a9h, 00h		; ADCControl1 register (SADC_CR1)
                                        (0175) 	db		aah, 00h		; ADCControl2 register (ADC_CR2)
                                        (0176) 	db		abh, 00h		; ADCControl3 register (ADC_CR3TRIM)
                                        (0177) 	db		ach, 00h		; ADCControl4 register (ADC_CR4)
                                        (0178) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0179) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0180) 	db		8bh, 00h		; AnalogColumnClockDivide register (ACE_CLK_CR3)
                                        (0181) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0182) 	db		8ah, 00h		; AnalogEClockSelect1 register (ACE_CLK_CR1)
                                        (0183) 	db		89h, 00h		; AnalogEColumnClockSelect register (ACE_CLK_CR0)
                                        (0184) 	db		75h, 09h		; AnalogEColumnInputSelect register (ACE_AMX_IN)
                                        (0185) 	db		76h, 00h		; AnalogEComparatorControl0 register (ACE_CMP_CR0)
                                        (0186) 	db		77h, 00h		; AnalogEComparatorControl1 register (ACE_CMP_CR1)
                                        (0187) 	db		7ah, 33h		; AnalogELUTControl0 register (ACE_ALT_CR0)
                                        (0188) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0189) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0190) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0191) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0192) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0193) 	db		6ah, 00h		; AnalogMuxBusConfig1 register (AMUX_CFG1)
                                        (0194) 	db		afh, 00h		; AnalogMuxClock register (AMUX_CLK)
                                        (0195) 	db		7bh, 00h		; AnalogOutBufferControl register (ACE_ABF_CR0)
                                        (0196) 	db		79h, 00h		; ComparatorGlobalInEn register (ACE_CMP_GI_EN)
                                        (0197) 	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
                                        (0198) 	db		65h, 00h		; ComparatorGlobalOutEn1 register (CMP_GO_EN1)
                                        (0199) 	db		fdh, 00h		; DAC_Control_0 register (IDAC_CR0)
                                        (0200) 	db		dch, 00h		; DAC_Control_1 register (IDAC_CR1)
                                        (0201) 	db		91h, 00h		; DEC_CR0:0 register (DEC0_CR0)
                                        (0202) 	db		95h, 00h		; DEC_CR0:1 register (DEC1_CR0)
                                        (0203) 	db		99h, 00h		; DEC_CR0:2 register (DEC2_CR0)
                                        (0204) 	db		9dh, 00h		; DEC_CR0:3 register (DEC3_CR0)
                                        (0205) 	db		9ah, 00h		; DecimatorControl_5 register (DEC_CR5)
                                        (0206) 	db		92h, 00h		; DecimatorEnable:0 register (DEC_CR3)
                                        (0207) 	db		96h, 00h		; DecimatorEnable:1 register (DEC_CR4)
                                        (0208) 	db		d4h, 00h		; Decimator_Control:0 register (DEC0_CR)
                                        (0209) 	db		d5h, 00h		; Decimator_Control:1 register (DEC1_CR)
                                        (0210) 	db		d6h, 00h		; Decimator_Control:2 register (DEC2_CR)
                                        (0211) 	db		d7h, 00h		; Decimator_Control:3 register (DEC3_CR)
                                        (0212) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0213) 	db		a1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input_Control register (GDI_E_IN_CR)
                                        (0214) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0215) 	db		a3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output_Control register (GDI_E_OU_CR)
                                        (0216) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0217) 	db		a0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input_Control register (GDI_O_IN_CR)
                                        (0218) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0219) 	db		a2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output_Control register (GDI_O_OU_CR)
                                        (0220) 	db		adh, 00h		; I2CAddress:0 register (I2C0_ADDR)
                                        (0221) 	db		aeh, 00h		; I2CAddress:1 register (I2C1_ADDR)
                                        (0222) 	db		6bh, 00h		; I2CConfig:1 register (I2C1_CFG)
                                        (0223) 	db		e7h, 00h		; IDACMode register (IDACMODE)
                                        (0224) 	db		e1h, 71h		; OscillatorControl_1 register (OSC_CR1)
                                        (0225) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0226) 	db		dfh, 26h		; OscillatorControl_3 register (OSC_CR3)
                                        (0227) 	db		deh, 01h		; OscillatorControl_4 register (OSC_CR4)
                                        (0228) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0229) 	db		85h, 00h		; PWM_Control register (ACE_PWM_CR)
                                        (0230) 	db		d8h, 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
                                        (0231) 	db		d9h, 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
                                        (0232) 	db		dah, 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
                                        (0233) 	db		dbh, 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
                                        (0234) 	db		ech, 00h		; Port_4_MUXBusCtrl register (MUX_CR4)
                                        (0235) 	db		edh, 00h		; Port_5_MUXBusCtrl register (MUX_CR5)
                                        (0236) 	db		a7h, 00h		; RTClockControl register (RTCCR)
                                        (0237) 	db		a4h, 00h		; RTCurrentHour register (RTCH)
                                        (0238) 	db		a5h, 00h		; RTCurrentMinute register (RTCM)
                                        (0239) 	db		a6h, 00h		; RTCurrentSecond register (RTCS)
                                        (0240) 	db		82h, 00h		; TSCMPHigh register (SADC_TSCMPH)
                                        (0241) 	db		81h, 00h		; TSCMPLow register (SADC_TSCMPL)
                                        (0242) 	db		71h, 00h		; TSource0 register (SADC_TSCR0)
                                        (0243) 	db		72h, 00h		; TSource1 register (SADC_TSCR1)
                                        (0244) 	db		ffh
                                        (0245) AREA psoc_config(rom, rel)
                                        (0246) LoadConfigTBL_fitolamp_slave_Ordered:
                                        (0247) ;  Ordered Global Register values
                                        (0248) 	M8C_SetBank0
0421: 62 00 00 MOV   REG[0x0],0x0       (0249) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
0424: 71 10    OR    F,0x10             
                                        (0250) 	M8C_SetBank1
0426: 62 00 00 MOV   REG[0x0],0x0       (0251) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
0429: 62 01 FF MOV   REG[0x1],0xFF      (0252) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
042C: 70 EF    AND   F,0xEF             
                                        (0253) 	M8C_SetBank0
042E: 62 03 FF MOV   REG[0x3],0xFF      (0254) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
0431: 62 02 00 MOV   REG[0x2],0x0       (0255) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
0434: 71 10    OR    F,0x10             
                                        (0256) 	M8C_SetBank1
0436: 62 02 00 MOV   REG[0x2],0x0       (0257) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
0439: 62 03 00 MOV   REG[0x3],0x0       (0258) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
043C: 70 EF    AND   F,0xEF             
                                        (0259) 	M8C_SetBank0
043E: 62 01 00 MOV   REG[0x1],0x0       (0260) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
0441: 62 04 00 MOV   REG[0x4],0x0       (0261) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
0444: 71 10    OR    F,0x10             
                                        (0262) 	M8C_SetBank1
0446: 62 04 13 MOV   REG[0x4],0x13      (0263) 	mov	reg[04h], 13h		; Port_1_DriveMode_0 register (PRT1DM0)
0449: 62 05 EC MOV   REG[0x5],0xEC      (0264) 	mov	reg[05h], ech		; Port_1_DriveMode_1 register (PRT1DM1)
044C: 70 EF    AND   F,0xEF             
                                        (0265) 	M8C_SetBank0
044E: 62 07 E0 MOV   REG[0x7],0xE0      (0266) 	mov	reg[07h], e0h		; Port_1_DriveMode_2 register (PRT1DM2)
0451: 62 06 0F MOV   REG[0x6],0xF       (0267) 	mov	reg[06h], 0fh		; Port_1_GlobalSelect register (PRT1GS)
0454: 71 10    OR    F,0x10             
                                        (0268) 	M8C_SetBank1
0456: 62 06 00 MOV   REG[0x6],0x0       (0269) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0459: 62 07 00 MOV   REG[0x7],0x0       (0270) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
045C: 70 EF    AND   F,0xEF             
                                        (0271) 	M8C_SetBank0
045E: 62 05 00 MOV   REG[0x5],0x0       (0272) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
0461: 62 08 00 MOV   REG[0x8],0x0       (0273) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
0464: 71 10    OR    F,0x10             
                                        (0274) 	M8C_SetBank1
0466: 62 08 00 MOV   REG[0x8],0x0       (0275) 	mov	reg[08h], 00h		; Port_2_DriveMode_0 register (PRT2DM0)
0469: 62 09 FF MOV   REG[0x9],0xFF      (0276) 	mov	reg[09h], ffh		; Port_2_DriveMode_1 register (PRT2DM1)
046C: 70 EF    AND   F,0xEF             
                                        (0277) 	M8C_SetBank0
046E: 62 0B FF MOV   REG[0xB],0xFF      (0278) 	mov	reg[0bh], ffh		; Port_2_DriveMode_2 register (PRT2DM2)
0471: 62 0A 00 MOV   REG[0xA],0x0       (0279) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
0474: 71 10    OR    F,0x10             
                                        (0280) 	M8C_SetBank1
0476: 62 0A 00 MOV   REG[0xA],0x0       (0281) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0479: 62 0B 00 MOV   REG[0xB],0x0       (0282) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
047C: 70 EF    AND   F,0xEF             
                                        (0283) 	M8C_SetBank0
047E: 62 09 00 MOV   REG[0x9],0x0       (0284) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
0481: 62 0C 00 MOV   REG[0xC],0x0       (0285) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
0484: 71 10    OR    F,0x10             
                                        (0286) 	M8C_SetBank1
0486: 62 0C 00 MOV   REG[0xC],0x0       (0287) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0489: 62 0D 00 MOV   REG[0xD],0x0       (0288) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
048C: 70 EF    AND   F,0xEF             
                                        (0289) 	M8C_SetBank0
048E: 62 0F 00 MOV   REG[0xF],0x0       (0290) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
0491: 62 0E 00 MOV   REG[0xE],0x0       (0291) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
0494: 71 10    OR    F,0x10             
                                        (0292) 	M8C_SetBank1
0496: 62 0E 00 MOV   REG[0xE],0x0       (0293) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0499: 62 0F 00 MOV   REG[0xF],0x0       (0294) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
049C: 70 EF    AND   F,0xEF             
                                        (0295) 	M8C_SetBank0
049E: 62 0D 00 MOV   REG[0xD],0x0       (0296) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
04A1: 62 10 00 MOV   REG[0x10],0x0      (0297) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
04A4: 71 10    OR    F,0x10             
                                        (0298) 	M8C_SetBank1
04A6: 62 10 00 MOV   REG[0x10],0x0      (0299) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
04A9: 62 11 00 MOV   REG[0x11],0x0      (0300) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
04AC: 70 EF    AND   F,0xEF             
                                        (0301) 	M8C_SetBank0
04AE: 62 13 00 MOV   REG[0x13],0x0      (0302) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
04B1: 62 12 00 MOV   REG[0x12],0x0      (0303) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
04B4: 71 10    OR    F,0x10             
                                        (0304) 	M8C_SetBank1
04B6: 62 12 00 MOV   REG[0x12],0x0      (0305) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
04B9: 62 13 00 MOV   REG[0x13],0x0      (0306) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
04BC: 70 EF    AND   F,0xEF             
                                        (0307) 	M8C_SetBank0
04BE: 62 11 00 MOV   REG[0x11],0x0      (0308) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
04C1: 62 14 00 MOV   REG[0x14],0x0      (0309) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
04C4: 71 10    OR    F,0x10             
                                        (0310) 	M8C_SetBank1
04C6: 62 14 00 MOV   REG[0x14],0x0      (0311) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
04C9: 62 15 00 MOV   REG[0x15],0x0      (0312) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
04CC: 70 EF    AND   F,0xEF             
                                        (0313) 	M8C_SetBank0
04CE: 62 17 00 MOV   REG[0x17],0x0      (0314) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
04D1: 62 16 00 MOV   REG[0x16],0x0      (0315) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
04D4: 71 10    OR    F,0x10             
                                        (0316) 	M8C_SetBank1
04D6: 62 16 00 MOV   REG[0x16],0x0      (0317) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
04D9: 62 17 00 MOV   REG[0x17],0x0      (0318) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
04DC: 70 EF    AND   F,0xEF             
                                        (0319) 	M8C_SetBank0
04DE: 62 15 00 MOV   REG[0x15],0x0      (0320) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
04E1: 70 EF    AND   F,0xEF             
                                        (0321) 	M8C_SetBank0
04E3: 7F       RET                      (0322) 	ret
                                        (0323) 
                                        (0324) 
                                        (0325) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_fitolamp_slave
                                        (0026) export _LoadConfig_fitolamp_slave
                                        (0027) export Port_1_Data_SHADE
                                        (0028) export _Port_1_Data_SHADE
                                        (0029) 
                                        (0030) 
                                        (0031) export NO_SHADOW
                                        (0032) export _NO_SHADOW
                                        (0033) 
                                        (0034) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0035) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0036) 
                                        (0037) AREA psoc_config(rom, rel)
                                        (0038) 
                                        (0039) ;---------------------------------------------------------------------------
                                        (0040) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0041) ;                  parameters handled by boot code, like CPU speed). This
                                        (0042) ;                  function can be called from user code, but typically it
                                        (0043) ;                  is only called from boot.
                                        (0044) ;
                                        (0045) ;       INPUTS: None.
                                        (0046) ;      RETURNS: Nothing.
                                        (0047) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0048) ;               In the large memory model currently only the page
                                        (0049) ;               pointer registers listed below are modified.  This does
                                        (0050) ;               not guarantee that in future implementations of this
                                        (0051) ;               function other page pointer registers will not be
                                        (0052) ;               modified.
                                        (0053) ;          
                                        (0054) ;               Page Pointer Registers Modified: 
                                        (0055) ;               CUR_PP
                                        (0056) ;
                                        (0057) _LoadConfigInit:
                                        (0058)  LoadConfigInit:
                                        (0059)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0060)     
04E4: 55 04 00 MOV   [0x4],0x0          (0061) 	mov		[Port_1_Data_SHADE], 0h
                                        (0062) 
04E7: 7C 04 EE LCALL 0x04EE             (0063) 	lcall	LoadConfig_fitolamp_slave
04EA: 7C 04 1F LCALL 0x041F             (0064) 	lcall	LoadConfigTBL_fitolamp_slave_Ordered
                                        (0065) 
                                        (0066) 
                                        (0067)     RAM_EPILOGUE RAM_USE_CLASS_4
04ED: 7F       RET                      (0068)     ret
                                        (0069) 
                                        (0070) ;---------------------------------------------------------------------------
                                        (0071) ; Load Configuration fitolamp_slave
                                        (0072) ;
                                        (0073) ;    Load configuration registers for fitolamp_slave.
                                        (0074) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0075) ;
                                        (0076) ;       INPUTS: None.
                                        (0077) ;      RETURNS: Nothing.
                                        (0078) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0079) ;               modified as may the Page Pointer registers!
                                        (0080) ;               In the large memory model currently only the page
                                        (0081) ;               pointer registers listed below are modified.  This does
                                        (0082) ;               not guarantee that in future implementations of this
                                        (0083) ;               function other page pointer registers will not be
                                        (0084) ;               modified.
                                        (0085) ;          
                                        (0086) ;               Page Pointer Registers Modified: 
                                        (0087) ;               CUR_PP
                                        (0088) ;
                                        (0089) _LoadConfig_fitolamp_slave:
                                        (0090)  LoadConfig_fitolamp_slave:
                                        (0091)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0092) 
04EE: 10       PUSH  X                  (0093) 	push	x
04EF: 70 EF    AND   F,0xEF             
                                        (0094)     M8C_SetBank0                    ; Force bank 0
04F1: 50 00    MOV   A,0x0              (0095)     mov     a, 0                    ; Specify bank 0
04F3: 67       ASR   A                  (0096)     asr     a                       ; Store in carry flag
                                        (0097)                                     ; Load bank 0 table:
04F4: 50 01    MOV   A,0x1              (0098)     mov     A, >LoadConfigTBL_fitolamp_slave_Bank0
04F6: 57 AC    MOV   X,0xAC             (0099)     mov     X, <LoadConfigTBL_fitolamp_slave_Bank0
04F8: 7C 05 09 LCALL 0x0509             (0100)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0101) 
04FB: 50 01    MOV   A,0x1              (0102)     mov     a, 1                    ; Specify bank 1
04FD: 67       ASR   A                  (0103)     asr     a                       ; Store in carry flag
                                        (0104)                                     ; Load bank 1 table:
04FE: 50 02    MOV   A,0x2              (0105)     mov     A, >LoadConfigTBL_fitolamp_slave_Bank1
0500: 57 45    MOV   X,0x45             (0106)     mov     X, <LoadConfigTBL_fitolamp_slave_Bank1
0502: 7C 05 09 LCALL 0x0509             (0107)     lcall   LoadConfig              ; Load the bank 1 values
0505: 70 EF    AND   F,0xEF             
                                        (0108) 
                                        (0109)     M8C_SetBank0                    ; Force return to bank 0
0507: 20       POP   X                  (0110) 	pop		x
                                        (0111) 
                                        (0112)     RAM_EPILOGUE RAM_USE_CLASS_4
0508: 7F       RET                      (0113)     ret
                                        (0114) 
                                        (0115) 
                                        (0116) 
                                        (0117) 
                                        (0118) ;---------------------------------------------------------------------------
                                        (0119) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0120) ;              pairs. Terminate on address=0xFF.
                                        (0121) ;
                                        (0122) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0123) ;           Flag Register Carry bit encodes the Register Bank
                                        (0124) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0125) ;
                                        (0126) ;  RETURNS: nothing.
                                        (0127) ;
                                        (0128) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0129) ;                X-3 Temporary store for register address
                                        (0130) ;                X-2 LSB of config table address
                                        (0131) ;                X-1 MSB of config table address
                                        (0132) ;
                                        (0133) LoadConfig:
                                        (0134)     RAM_PROLOGUE RAM_USE_CLASS_2
0509: 38 02    ADD   SP,0x2             (0135)     add     SP, 2                   ; Set up local vars
050B: 10       PUSH  X                  (0136)     push    X                       ; Save config table address on stack
050C: 08       PUSH  A                  (0137)     push    A
050D: 4F       MOV   X,SP               (0138)     mov     X, SP
050E: 56 FC 00 MOV   [X-4],0x0          (0139)     mov     [X-4], 0                ; Set default Destination to Bank 0
0511: D0 04    JNC   0x0516             (0140)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
0513: 56 FC 01 MOV   [X-4],0x1          (0141)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0142) .BankSelectSaved:
0516: 18       POP   A                  (0143)     pop     A
0517: 20       POP   X                  (0144)     pop     X
0518: 70 EF    AND   F,0xEF             
051A: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0145) 
                                        (0146) LoadConfigLp:
                                        (0147)     M8C_SetBank0                    ; Switch to bank 0
                                        (0148)     M8C_ClearWDT                    ; Clear the watchdog for long inits
051D: 10       PUSH  X                  (0149)     push    X                       ; Preserve the config table address
051E: 08       PUSH  A                  (0150)     push    A
051F: 28       ROMX                     (0151)     romx                            ; Load register address from table
0520: 39 FF    CMP   A,0xFF             (0152)     cmp     A, END_CONFIG_TABLE     ; End of table?
0522: A0 1F    JZ    0x0542             (0153)     jz      EndLoadConfig           ;   Yes, go wrap it up
0524: 4F       MOV   X,SP               (0154)     mov     X, SP                   ;
0525: 48 FC 01 TST   [X-4],0x1          (0155)     tst     [X-4], 1                ; Loading IO Bank 1?
0528: A0 03    JZ    0x052C             (0156)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
052A: 71 10    OR    F,0x10             
                                        (0157)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0158) .IOBankNowSet:
052C: 54 FD    MOV   [X-3],A            (0159)     mov     [X-3], A                ; Stash the register address
052E: 18       POP   A                  (0160)     pop     A                       ; Retrieve the table address
052F: 20       POP   X                  (0161)     pop     X
0530: 75       INC   X                  (0162)     inc     X                       ; Advance to the data byte
0531: 09 00    ADC   A,0x0              (0163)     adc     A, 0
0533: 10       PUSH  X                  (0164)     push    X                       ; Save the config table address again
0534: 08       PUSH  A                  (0165)     push    A
0535: 28       ROMX                     (0166)     romx                            ; load config data from the table
0536: 4F       MOV   X,SP               (0167)     mov     X, SP                   ; retrieve the register address
0537: 59 FD    MOV   X,[X-3]            (0168)     mov     X, [X-3]
0539: 61 00    MOV   REG[X+0x0],A       (0169)     mov     reg[X], A               ; Configure the register
053B: 18       POP   A                  (0170)     pop     A                       ; retrieve the table address
053C: 20       POP   X                  (0171)     pop     X
053D: 75       INC   X                  (0172)     inc     X                       ; advance to next table entry
053E: 09 00    ADC   A,0x0              (0173)     adc     A, 0
0540: 8F D7    JMP   0x0518             (0174)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0175) EndLoadConfig:
0542: 38 FC    ADD   SP,0xFC            (0176)     add     SP, -4
0544: 70 3F    AND   F,0x3F             
0546: 71 C0    OR    F,0xC0             
                                        (0177)     RAM_EPILOGUE RAM_USE_CLASS_2
0548: 7F       RET                      (0178)     ret
                                        (0179) 
                                        (0180) AREA InterruptRAM(ram, rel)
                                        (0181) 
                                        (0182) NO_SHADOW:
                                        (0183) _NO_SHADOW:
                                        (0184) ; write only register shadows
                                        (0185) _Port_1_Data_SHADE:
                                        (0186) Port_1_Data_SHADE:	BLK	1
                                        (0187) 
FILE: lib\rx8_rfint.asm                 (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0549: 08       PUSH  A                  (0003) ;;  FILENAME: RX8_RFINT.asm
054A: 5D D0    MOV   A,REG[0xD0]        
054C: 08       PUSH  A                  
054D: 5D D3    MOV   A,REG[0xD3]        
054F: 08       PUSH  A                  
0550: 5D D4    MOV   A,REG[0xD4]        
0552: 08       PUSH  A                  
0553: 5D D5    MOV   A,REG[0xD5]        
0555: 08       PUSH  A                  
0556: 70 3F    AND   F,0x3F             
0558: 71 C0    OR    F,0xC0             (0004) ;;   Version: 3.50, Updated on 2015/3/4 at 22:26:55
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
055A: 62 D0 00 MOV   REG[0xD0],0x0      (0007) ;;  DESCRIPTION: RX8 Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
055D: 51 D7    MOV   A,[__r0]           (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
055F: 08       PUSH  A                  (0010) ;;*****************************************************************************
0560: 51 D6    MOV   A,[__r1]           (0011) ;;*****************************************************************************
0562: 08       PUSH  A                  (0012) 
0563: 51 D5    MOV   A,[__r2]           (0013) include "m8c.inc"
0565: 08       PUSH  A                  (0014) include "memory.inc"
0566: 51 D4    MOV   A,[__r3]           (0015) include "RX8_RF.inc"
0568: 08       PUSH  A                  (0016) 
0569: 51 D3    MOV   A,[__r4]           (0017) 
056B: 08       PUSH  A                  (0018) ;-----------------------------------------------
056C: 51 D2    MOV   A,[__r5]           (0019) ;  Global Symbols
056E: 08       PUSH  A                  (0020) ;-----------------------------------------------
056F: 51 D1    MOV   A,[__r6]           (0021) export  _RX8_RF_ISR
0571: 08       PUSH  A                  (0022) 
0572: 51 D0    MOV   A,[__r7]           (0023) 
0574: 08       PUSH  A                  (0024) IF (RX8_RF_RXBUF_ENABLE)
0575: 51 CF    MOV   A,[__r8]           (0025) export  RX8_RF_aRxBuffer
0577: 08       PUSH  A                  (0026) export _RX8_RF_aRxBuffer
0578: 51 CE    MOV   A,[__r9]           (0027) export  RX8_RF_bRxCnt
057A: 08       PUSH  A                  (0028) export _RX8_RF_bRxCnt
057B: 51 CD    MOV   A,[__r10]          (0029) export  RX8_RF_fStatus
057D: 08       PUSH  A                  (0030) export _RX8_RF_fStatus
057E: 51 CC    MOV   A,[__r11]          (0031) ENDIF
0580: 08       PUSH  A                  (0032) 
0581: 51 CB    MOV   A,[__rX]           (0033) 
0583: 08       PUSH  A                  (0034) ;-----------------------------------------------
0584: 51 CA    MOV   A,[__rY]           (0035) ; Variable Allocation
0586: 08       PUSH  A                  (0036) ;-----------------------------------------------
0587: 51 C9    MOV   A,[__rZ]           (0037) 
0589: 08       PUSH  A                  (0038) IF (RX8_RF_RXBUF_ENABLE)
                                        (0039) AREA InterruptRAM(RAM,REL,CON)
058A: 62 D0 00 MOV   REG[0xD0],0x0      (0040)  RX8_RF_fStatus:
                                        (0041) _RX8_RF_fStatus:      BLK  1
                                        (0042)  RX8_RF_bRxCnt:
                                        (0043) _RX8_RF_bRxCnt:       BLK  1
                                        (0044) AREA RX8_RF_RAM(RAM,REL,CON)
                                        (0045)  RX8_RF_aRxBuffer:    
                                        (0046) _RX8_RF_aRxBuffer:    BLK RX8_RF_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) 
                                        (0050) AREA InterruptRAM(RAM,REL,CON)
                                        (0051) 
                                        (0052) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0053) ;---------------------------------------------------
                                        (0054) ; Insert your custom declarations below this banner
                                        (0055) ;---------------------------------------------------
                                        (0056) 
                                        (0057) ;------------------------
                                        (0058) ; Includes
                                        (0059) ;------------------------
                                        (0060) 
                                        (0061) 	
                                        (0062) ;------------------------
                                        (0063) ;  Constant Definitions
                                        (0064) ;------------------------
                                        (0065) 
                                        (0066) 
                                        (0067) ;------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;------------------------
                                        (0070) 
                                        (0071) 
                                        (0072) ;---------------------------------------------------
                                        (0073) ; Insert your custom declarations above this banner
                                        (0074) ;---------------------------------------------------
                                        (0075) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0076) 
                                        (0077) 
                                        (0078) AREA UserModules (ROM, REL)
                                        (0079) 
                                        (0080) ;-----------------------------------------------------------------------------
                                        (0081) ;  FUNCTION NAME: _RX8_RF_ISR
                                        (0082) ;
                                        (0083) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0084) ;
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;
                                        (0087) 
                                        (0088) _RX8_RF_ISR:
                                        (0089) 
                                        (0090)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    PRESERVE_CPU_CONTEXT
058D: 7C 0C C5 LCALL _rf_signal         (0107)    lcall _rf_signal
0590: 70 3F    AND   F,0x3F             
0592: 71 C0    OR    F,0xC0             
0594: 62 D0 00 MOV   REG[0xD0],0x0      
0597: 18       POP   A                  
0598: 53 C9    MOV   [__rZ],A           
059A: 18       POP   A                  
059B: 53 CA    MOV   [__rY],A           
059D: 18       POP   A                  
059E: 53 CB    MOV   [__rX],A           
05A0: 18       POP   A                  
05A1: 53 CC    MOV   [__r11],A          
05A3: 18       POP   A                  
05A4: 53 CD    MOV   [__r10],A          
05A6: 18       POP   A                  
05A7: 53 CE    MOV   [__r9],A           
05A9: 18       POP   A                  
05AA: 53 CF    MOV   [__r8],A           
05AC: 18       POP   A                  
05AD: 53 D0    MOV   [__r7],A           
05AF: 18       POP   A                  
05B0: 53 D1    MOV   [__r6],A           
05B2: 18       POP   A                  
05B3: 53 D2    MOV   [__r5],A           
05B5: 18       POP   A                  
05B6: 53 D3    MOV   [__r4],A           
05B8: 18       POP   A                  
05B9: 53 D4    MOV   [__r3],A           
05BB: 18       POP   A                  
05BC: 53 D5    MOV   [__r2],A           
05BE: 18       POP   A                  
05BF: 53 D6    MOV   [__r1],A           
05C1: 18       POP   A                  
05C2: 53 D7    MOV   [__r0],A           
05C4: 18       POP   A                  
05C5: 60 D5    MOV   REG[0xD5],A        
05C7: 18       POP   A                  
05C8: 60 D4    MOV   REG[0xD4],A        
05CA: 18       POP   A                  
05CB: 60 D3    MOV   REG[0xD3],A        
05CD: 18       POP   A                  
05CE: 60 D0    MOV   REG[0xD0],A        
05D0: 70 00    AND   F,0x0              
05D2: 18       POP   A                  
                                        (0108)    RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0115) 
                                        (0116)  IF (RX8_RF_RXBUF_ENABLE)
05D3: 08       PUSH  A                  (0117)    push A
05D4: 10       PUSH  X                  (0118)    push X
05D5: 5D D3    MOV   A,REG[0xD3]        
05D7: 08       PUSH  A                  
                                        (0119) 
                                        (0120)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0121)       REG_PRESERVE IDX_PP                                  ; Save the IDX_PP register	
                                        (0122)    ENDIF
                                        (0123) 
05D8: 58 01    MOV   X,[0x1]            (0124)    mov  X,[RX8_RF_bRxCnt]                                  ; Load X with byte counter
05DA: 5D 4B    MOV   A,REG[0x4B]        (0125)    mov  A,REG[RX8_RF_CONTROL_REG]                          ; Read the control register
05DC: 08       PUSH  A                  (0126)    push A                                                  ; Store copy for later test
                                        (0127)                                                            ; IF real RX interrupt
05DD: 21 08    AND   A,0x8              (0128)    and  A,RX8_RF_RX_REG_FULL                               ; Did really really get an IRQ
05DF: B0 04    JNZ   0x05E4             (0129)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
05E1: 18       POP   A                  (0130)    pop  A                                                  ; Restore stack
05E2: 80 62    JMP   0x0645             (0131)    jmp  .RESTORE_IDX_PP
                                        (0132) 
                                        (0133) .UARTRX_ReadRx:
                                        (0134) 
05E4: 18       POP   A                  (0135)    pop  A                                                  ; Restore status flags
                                        (0136)                                                            ; IF there is no error, get data
                                        (0137)                                                            ; Check for parity or framing error
05E5: 21 E0    AND   A,0xE0             (0138)    and  A,RX8_RF_RX_ERROR
05E7: A0 12    JZ    0x05FA             (0139)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0140) 
05E9: 2C 00    OR    [0x0],A            (0141)    or   [RX8_RF_fStatus],A                                 ; Set error flags (parity,framing,overrun) bits
                                        (0142) 
05EB: 49 4A 00 TST   REG[0x4A],0x0      (0143)    tst  REG[RX8_RF_RX_BUFFER_REG], 0x00                    ; Read the data buffer to clear it.
                                        (0144) 
05EE: 21 20    AND   A,0x20             (0145)    and  A,RX8_RF_RX_FRAMING_ERROR                          ; Check for framing error special case
05F0: A0 54    JZ    0x0645             (0146)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0147) 
                                        (0148)                                                            ; Disable and re-enable RX to reset after
                                        (0149)                                                            ; framing error.
05F2: 41 4B FE AND   REG[0x4B],0xFE     (0150)    and   REG[RX8_RF_CONTROL_REG], ~RX8_RF_RX_ENABLE        ; Disable RX
05F5: 43 4B 01 OR    REG[0x4B],0x1      (0151)    or    REG[RX8_RF_CONTROL_REG],  RX8_RF_RX_ENABLE        ; Enable RX
05F8: 80 4C    JMP   0x0645             (0152)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0153) 
                                        (0154) 
                                        (0155) .UARTRX_NO_ERROR:
05FA: 5D 4A    MOV   A,REG[0x4A]        (0156)    mov  A,REG[RX8_RF_RX_BUFFER_REG ]                       ; Read the data buffer
                                        (0157) 
                                        (0158)                                                            ; IF buffer not full
05FC: 47 00 01 TST   [0x0],0x1          (0159)    tst  [RX8_RF_fStatus],RX8_RF_RX_BUF_CMDTERM             ; Check for buffer full
05FF: B0 45    JNZ   0x0645             (0160)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0161) 
0601: 39 0D    CMP   A,0xD              (0162)    cmp  A,RX8_RF_CMD_TERM                                  ; Check for End of command
0603: B0 14    JNZ   0x0618             (0163)    jnz  .UARTRX_CHK_CTLCHAR
0605: 2E 00 01 OR    [0x0],0x1          (0164)    or   [RX8_RF_fStatus],RX8_RF_RX_BUF_CMDTERM             ; Set command ready bit
0608: 62 D3 00 MOV   REG[0xD3],0x0      
060B: 70 3F    AND   F,0x3F             
060D: 71 80    OR    F,0x80             
                                        (0165) 
                                        (0166)    RAM_SETPAGE_IDX >RX8_RF_aRxBuffer
                                        (0167)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
060F: 56 A9 00 MOV   [X-87],0x0         (0168)    mov  [X + RX8_RF_aRxBuffer],00h                         ; Zero out last data
0612: 70 3F    AND   F,0x3F             
0614: 71 00    OR    F,0x0              
                                        (0169)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0616: 80 2E    JMP   0x0645             (0170)    jmp  .RESTORE_IDX_PP
                                        (0171) 
                                        (0172) .UARTRX_CHK_CTLCHAR:                                       ; Ignore charaters below this value
                                        (0173)                                                            ; If ignore char is set to 0x00, do not
                                        (0174)                                                            ; ignore any characters.
                                        (0175) IF(RX8_RF_RX_IGNORE_BELOW)
0618: 39 20    CMP   A,0x20             (0176)    cmp  A,RX8_RF_RX_IGNORE_BELOW
061A: C0 2A    JC    0x0645             (0177)    jc   .RESTORE_IDX_PP
                                        (0178) ENDIF
                                        (0179) 
                                        (0180) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
061C: 3C 01 0F CMP   [0x1],0xF          (0181)    cmp  [RX8_RF_bRxCnt],(RX8_RF_RX_BUFFER_SIZE - 1)
061F: C0 14    JC    0x0634             (0182)    jc   .UARTRX_ISR_GETDATA
0621: 2E 00 10 OR    [0x0],0x10         (0183)    or   [RX8_RF_fStatus],RX8_RF_RX_BUF_OVERRUN             ; Set error flags (parity,framing,overrun) bits
0624: 62 D3 00 MOV   REG[0xD3],0x0      
0627: 70 3F    AND   F,0x3F             
0629: 71 80    OR    F,0x80             
                                        (0184) 
                                        (0185)    RAM_SETPAGE_IDX >RX8_RF_aRxBuffer             ;   using idexed address mode
                                        (0186)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
062B: 56 A9 00 MOV   [X-87],0x0         (0187)    mov  [X + RX8_RF_aRxBuffer],00h                         ; Zero out last data
062E: 70 3F    AND   F,0x3F             
0630: 71 00    OR    F,0x0              
                                        (0188)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0632: 80 12    JMP   0x0645             (0189)    jmp  .RESTORE_IDX_PP
                                        (0190) 
                                        (0191)                                                            ; IF input data == "CR", then end of command
                                        (0192) .UARTRX_ISR_GETDATA:
0634: 75       INC   X                  (0193)    inc  X                                                  ; Inc the pointer
0635: 5A 01    MOV   [0x1],X            (0194)    mov  [RX8_RF_bRxCnt],X                                  ; Restore the pointer
0637: 79       DEC   X                  (0195)    dec  X                                                  ; Mov X to its original value
0638: 62 D3 00 MOV   REG[0xD3],0x0      
063B: 70 3F    AND   F,0x3F             
063D: 71 80    OR    F,0x80             
                                        (0196) 
                                        (0197)    RAM_SETPAGE_IDX >RX8_RF_aRxBuffer             ;   using idexed address mode
                                        (0198)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
063F: 54 A9    MOV   [X-87],A           (0199)    mov  [X+RX8_RF_aRxBuffer],A                             ; store data in array
0641: 70 3F    AND   F,0x3F             
0643: 71 00    OR    F,0x0              
0645: 18       POP   A                  
0646: 60 D3    MOV   REG[0xD3],A        
                                        (0200)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0201) 
                                        (0202) 
                                        (0203) .RESTORE_IDX_PP:
                                        (0204)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0205)       REG_RESTORE IDX_PP
                                        (0206)    ENDIF
                                        (0207) 
                                        (0208) .END_UARTRX_ISR:
0648: 20       POP   X                  (0209)    pop  X
0649: 18       POP   A                  (0210)    pop  A
                                        (0211) 
                                        (0212) ENDIF
                                        (0213) 
                                        (0214) RX8_RF_RX_ISR_END:
064A: 7E       RETI                     (0215)    reti
                                        (0216) 
                                        (0217) 
                                        (0218) ; end of file RX8_RFINT.asm
FILE: lib\rx8_rf.asm                    (0001) ;;*****************************************************************************
064B: 43 DF 04 OR    REG[0xDF],0x4      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: RX8_RF.asm
                                        (0004) ;;   Version: 3.50, Updated on 2015/3/4 at 22:26:55
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: RX8 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;-----------------------------------------------
                                        (0023) ; include instance specific register definitions
                                        (0024) ;-----------------------------------------------
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "RX8_RF.inc"
                                        (0028) 
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) export   RX8_RF_EnableInt
                                        (0034) export  _RX8_RF_EnableInt
                                        (0035) export   RX8_RF_DisableInt
                                        (0036) export  _RX8_RF_DisableInt
                                        (0037) export   RX8_RF_Start
                                        (0038) export  _RX8_RF_Start
                                        (0039) export   RX8_RF_Stop
                                        (0040) export  _RX8_RF_Stop
                                        (0041) export   RX8_RF_bReadRxData
                                        (0042) export  _RX8_RF_bReadRxData
                                        (0043) export   RX8_RF_bReadRxStatus
                                        (0044) export  _RX8_RF_bReadRxStatus
                                        (0045) 
                                        (0046) ; Old function name convension, do not use.
                                        (0047) ; These will be removed in a future release.
                                        (0048) export  bRX8_RF_ReadRxData
                                        (0049) export _bRX8_RF_ReadRxData
                                        (0050) export  bRX8_RF_ReadRxStatus
                                        (0051) export _bRX8_RF_ReadRxStatus
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ; High Level RX functions
                                        (0055) ;-----------------------------------------------
                                        (0056) 
                                        (0057) export  RX8_RF_cGetChar
                                        (0058) export _RX8_RF_cGetChar
                                        (0059) export  RX8_RF_cReadChar
                                        (0060) export _RX8_RF_cReadChar
                                        (0061) export  RX8_RF_iReadChar
                                        (0062) export _RX8_RF_iReadChar
                                        (0063) 
                                        (0064) IF (RX8_RF_RXBUF_ENABLE)
                                        (0065) export  RX8_RF_CmdReset
                                        (0066) export _RX8_RF_CmdReset
                                        (0067) export  RX8_RF_bCmdCheck
                                        (0068) export _RX8_RF_bCmdCheck
                                        (0069) export  RX8_RF_bCmdLength
                                        (0070) export _RX8_RF_bCmdLength
                                        (0071) export  RX8_RF_bErrCheck
                                        (0072) export _RX8_RF_bErrCheck
                                        (0073) 
                                        (0074) export  RX8_RF_szGetParam
                                        (0075) export _RX8_RF_szGetParam
                                        (0076) export  RX8_RF_szGetRestOfParams
                                        (0077) export _RX8_RF_szGetRestOfParams
                                        (0078) 
                                        (0079) ;-----------------------------------------------
                                        (0080) ;  Variables
                                        (0081) ;-----------------------------------------------
                                        (0082) 
                                        (0083) AREA RX8_RF_RAM(RAM,REL,CON)
                                        (0084)  ptrParam:   			BLK  1
                                        (0085) 
                                        (0086) ENDIF
                                        (0087) ;-----------------------------------------------
                                        (0088) ;  EQUATES
                                        (0089) ;-----------------------------------------------
                                        (0090) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0091) 
                                        (0092) area UserModules (ROM, REL)
                                        (0093) 
                                        (0094) .SECTION
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;  FUNCTION NAME: RX8_RF_EnableInt
                                        (0097) ;
                                        (0098) ;  DESCRIPTION:
                                        (0099) ;     Enables this receiver's interrupt by setting the interrupt enable mask
                                        (0100) ;     bit associated with this User Module. Remember to call the global interrupt
                                        (0101) ;     enable function by using the macro: M8C_EnableGInt.
                                        (0102) ;
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;
                                        (0105) ;  ARGUMENTS: none
                                        (0106) ;
                                        (0107) ;  RETURNS: none
                                        (0108) ;
                                        (0109) ;  SIDE EFFECTS:
                                        (0110) ;    The A and X registers may be modified by this or future implementations
                                        (0111) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0112) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0113) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0114) ;    functions.
                                        (0115) ;
                                        (0116)  RX8_RF_EnableInt:
                                        (0117) _RX8_RF_EnableInt:
                                        (0118)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0119)    M8C_EnableIntMask RX8_RF_INT_REG, RX8_RF_bINT_MASK
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_1
064E: 7F       RET                      (0121)    ret
064F: 41 DF FB AND   REG[0xDF],0xFB     
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) .SECTION
                                        (0125) ;-----------------------------------------------------------------------------
                                        (0126) ;  FUNCTION NAME: RX8_RF_DisableInt
                                        (0127) ;
                                        (0128) ;  DESCRIPTION:
                                        (0129) ;     Disables this RX8's interrupt by clearing the interrupt enable mask bit
                                        (0130) ;     associated with this User Module.
                                        (0131) ;
                                        (0132) ;-----------------------------------------------------------------------------
                                        (0133) ;
                                        (0134) ;  ARGUMENTS:  none
                                        (0135) ;
                                        (0136) ;  RETURNS:  none
                                        (0137) ;
                                        (0138) ;  SIDE EFFECTS:
                                        (0139) ;    The A and X registers may be modified by this or future implementations
                                        (0140) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0141) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0142) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0143) ;    functions.
                                        (0144) ;
                                        (0145)  RX8_RF_DisableInt:
                                        (0146) _RX8_RF_DisableInt:
                                        (0147)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0148)    M8C_DisableIntMask RX8_RF_INT_REG, RX8_RF_bINT_MASK
                                        (0149)    RAM_EPILOGUE RAM_USE_CLASS_1
0652: 7F       RET                      (0150)    ret
                                        (0151) .ENDSECTION
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: RX8_RF_Start(BYTE bParity)
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;    Sets the start bit and parity in the Control register of this user module.
                                        (0159) ;
                                        (0160) ;-----------------------------------------------------------------------------
                                        (0161) ;
                                        (0162) ;  ARGUMENTS:
                                        (0163) ;    BYTE bParity - parity of received data.  Use defined masks.
                                        (0164) ;    passed in A register.
                                        (0165) ;
                                        (0166) ;  RETURNS: none
                                        (0167) ;
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  RX8_RF_Start:
                                        (0176) _RX8_RF_Start:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
0653: 29 01    OR    A,0x1              (0178)    or    A, bfCONTROL_REG_START_BIT
0655: 60 4B    MOV   REG[0x4B],A        (0179)    mov   REG[RX8_RF_CONTROL_REG], A
                                        (0180)    RAM_EPILOGUE RAM_USE_CLASS_1
0657: 7F       RET                      (0181)    ret
                                        (0182) .ENDSECTION
                                        (0183) 
                                        (0184) .SECTION
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;  FUNCTION NAME: RX8_RF_Stop
                                        (0187) ;
                                        (0188) ;  DESCRIPTION:
                                        (0189) ;     Disables RX8 operation.
                                        (0190) ;
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: none
                                        (0194) ;
                                        (0195) ;  RETURNS: none
                                        (0196) ;
                                        (0197) ;  SIDE EFFECTS:
                                        (0198) ;    The A and X registers may be modified by this or future implementations
                                        (0199) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0200) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0201) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0202) ;    functions.
                                        (0203) ;
                                        (0204)  RX8_RF_Stop:
                                        (0205) _RX8_RF_Stop:
                                        (0206)    RAM_PROLOGUE RAM_USE_CLASS_1
0658: 41 4B FE AND   REG[0x4B],0xFE     (0207)    and   REG[RX8_RF_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0208)    RAM_EPILOGUE RAM_USE_CLASS_1
065B: 7F       RET                      (0209)    ret
                                        (0210) .ENDSECTION
                                        (0211) 
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: RX8_RF_bReadRxData
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0218) ;     sure data is valid.
                                        (0219) ;
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;
                                        (0222) ;  ARGUMENTS:  none
                                        (0223) ;
                                        (0224) ;  RETURNS:
                                        (0225) ;    bRxData - returned in A.
                                        (0226) ;
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  RX8_RF_bReadRxData:
                                        (0235) _RX8_RF_bReadRxData:
                                        (0236)  bRX8_RF_ReadRxData:
                                        (0237) _bRX8_RF_ReadRxData:
                                        (0238)    RAM_PROLOGUE RAM_USE_CLASS_1
065C: 5D 4A    MOV   A,REG[0x4A]        (0239)    mov A, REG[RX8_RF_RX_BUFFER_REG]
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
065E: 7F       RET                      (0241)    ret
                                        (0242) .ENDSECTION
                                        (0243) 
                                        (0244) .SECTION
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  FUNCTION NAME: RX8_RF_bReadRxStatus
                                        (0247) ;
                                        (0248) ;  DESCRIPTION:
                                        (0249) ;    Reads the RX Status bits in the Control/Status register.
                                        (0250) ;
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;
                                        (0253) ;  ARGUMENTS:  none
                                        (0254) ;
                                        (0255) ;  RETURNS:
                                        (0256) ;     BYTE  bRXStatus - transmit status data.  Use the following defined bits
                                        (0257) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0258) ;
                                        (0259) ;  SIDE EFFECTS:
                                        (0260) ;    The A and X registers may be modified by this or future implementations
                                        (0261) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0262) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0263) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0264) ;    functions.
                                        (0265) ;
                                        (0266)  RX8_RF_bReadRxStatus:
                                        (0267) _RX8_RF_bReadRxStatus:
                                        (0268)  bRX8_RF_ReadRxStatus:
                                        (0269) _bRX8_RF_ReadRxStatus:
                                        (0270)    RAM_PROLOGUE RAM_USE_CLASS_1
065F: 5D 4B    MOV   A,REG[0x4B]        (0271)    mov A,  REG[RX8_RF_CONTROL_REG]
                                        (0272)    RAM_EPILOGUE RAM_USE_CLASS_1
0661: 7F       RET                      (0273)    ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) ;-----------------------------------------------
                                        (0277) ; High Level RX functions
                                        (0278) ;-----------------------------------------------
                                        (0279) 
                                        (0280) .SECTION
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;  FUNCTION NAME: RX8_RF_cGetChar
                                        (0283) ;
                                        (0284) ;  DESCRIPTION:
                                        (0285) ;     Read character from UART RX port.
                                        (0286) ;
                                        (0287) ;
                                        (0288) ;  ARGUMENTS:
                                        (0289) ;      none
                                        (0290) ;
                                        (0291) ;  RETURNS:
                                        (0292) ;     char that is returned from UART
                                        (0293) ;
                                        (0294) ;  SIDE EFFECTS:
                                        (0295) ;    The A and X registers may be modified by this or future implementations
                                        (0296) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0297) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0298) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0299) ;    functions.
                                        (0300) ;    
                                        (0301) ;    Program flow will stay in this function until a character is received.
                                        (0302) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0303) ;    the delay between characters is less than the watchdog timeout.
                                        (0304) ;
                                        (0305)  RX8_RF_cGetChar:
                                        (0306) _RX8_RF_cGetChar:
                                        (0307)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0308) 
                                        (0309) .getChar_Loop:
0662: 49 4B 08 TST   REG[0x4B],0x8      (0310)    tst REG[RX8_RF_CONTROL_REG],RX8_RF_RX_REG_FULL   ; Check if a character is ready
0665: AF FC    JZ    _RX8_RF_cGetChar   (0311)    jz  .getChar_Loop                                        ; If not loop
                                        (0312) 
0667: 5D 4A    MOV   A,REG[0x4A]        (0313)    mov A, REG[RX8_RF_RX_BUFFER_REG]              ; Get character
                                        (0314)    RAM_EPILOGUE RAM_USE_CLASS_1
0669: 7F       RET                      (0315)    ret
                                        (0316) .ENDSECTION
                                        (0317) 
                                        (0318) .SECTION
                                        (0319) ;-----------------------------------------------------------------------------
                                        (0320) ;  FUNCTION NAME: RX8_RF_cReadChar
                                        (0321) ;
                                        (0322) ;  DESCRIPTION:
                                        (0323) ;     Read character from UART RX port.
                                        (0324) ;
                                        (0325) ;  ARGUMENTS:
                                        (0326) ;      none
                                        (0327) ;
                                        (0328) ;  RETURNS:
                                        (0329) ;     char that is returned from UART
                                        (0330) ;
                                        (0331) ;  SIDE EFFECTS:
                                        (0332) ;    The A and X registers may be modified by this or future implementations
                                        (0333) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0334) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0335) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0336) ;    functions.
                                        (0337) ;
                                        (0338) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0339) ;    implies a valid character or an error condition occured.
                                        (0340) ;
                                        (0341)  RX8_RF_cReadChar:
                                        (0342) _RX8_RF_cReadChar:
                                        (0343)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0344) 
066A: 5D 4B    MOV   A,REG[0x4B]        (0345)    mov  A,REG[RX8_RF_CONTROL_REG]                          ; Get Status of RX
066C: 08       PUSH  A                  (0346)    push A
066D: 21 08    AND   A,0x8              (0347)    and  A,RX8_RF_RX_COMPLETE                               ; Check if a character is ready
066F: B0 04    JNZ   0x0674             (0348)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0671: 18       POP   A                  (0349)    pop  A
0672: 80 0B    JMP   0x067E             (0350)    jmp  .RX_NO_VALID_CHAR
                                        (0351) 
                                        (0352) .RX_DATA_RDY:
0674: 5D 4A    MOV   A,REG[0x4A]        (0353)    mov  A,REG[RX8_RF_RX_BUFFER_REG]                        ; Read data first, then
0676: 4B       SWAP  A,X                (0354)    swap A,X                                                ; determine if data is valid
                                        (0355) 
0677: 18       POP   A                  (0356)    pop  A                                                  ; Check for errors
0678: 21 A0    AND   A,0xA0             (0357)    and  A,(RX8_RF_RX_PARITY_ERROR | RX8_RF_RX_FRAMING_ERROR)
067A: B0 03    JNZ   0x067E             (0358)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
067C: 4B       SWAP  A,X                (0359)    swap A,X                                                ; Put data in A and exit
                                        (0360)    RAM_EPILOGUE RAM_USE_CLASS_1
067D: 7F       RET                      (0361)    ret
                                        (0362) 
                                        (0363) .RX_NO_VALID_CHAR:
067E: 50 00    MOV   A,0x0              (0364)    mov A,0x00                                              ; Zero out character
                                        (0365) 
                                        (0366)  End_RX8_RF_cReadChar:
                                        (0367)    RAM_EPILOGUE RAM_USE_CLASS_1
0680: 7F       RET                      (0368)    ret
                                        (0369) .ENDSECTION
                                        (0370) 																			
                                        (0371) .SECTION
                                        (0372) ;-----------------------------------------------------------------------------
                                        (0373) ;  FUNCTION NAME: RX8_RF_iReadChar
                                        (0374) ;
                                        (0375) ; WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0376) ; to just set a value in the upper byte if error conditions exists.
                                        (0377) ;
                                        (0378) ;  DESCRIPTION:
                                        (0379) ;     Read character from UART RX port.
                                        (0380) ;
                                        (0381) ;  ARGUMENTS:
                                        (0382) ;      none
                                        (0383) ;
                                        (0384) ;  RETURNS:
                                        (0385) ;     An integer value is returned.  A negative value inplies and error
                                        (0386) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0387) ;
                                        (0388) ;     Error Codes:
                                        (0389) ;        0x80CC    Parity Error
                                        (0390) ;        0x40CC    Overrun Error
                                        (0391) ;        0x20CC    Framing Error
                                        (0392) ;        0x01CC    No Data available
                                        (0393) ;
                                        (0394) ;  SIDE EFFECTS:
                                        (0395) ;    The A and X registers may be modified by this or future implementations
                                        (0396) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0397) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0398) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0399) ;    functions.
                                        (0400) ;
                                        (0401)  RX8_RF_iReadChar:
                                        (0402) _RX8_RF_iReadChar:
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0404) 
0681: 5D 4B    MOV   A,REG[0x4B]        (0405)    mov  A,REG[RX8_RF_CONTROL_REG]                          ; Get Status of RX
                                        (0406)                                                            ; Mask only errors and data ready
0683: 21 E8    AND   A,0xE8             (0407)    and  A,(RX8_RF_RX_ERROR|RX8_RF_RX_REG_FULL)
0685: 08       PUSH  A                  (0408)    push A
0686: 21 08    AND   A,0x8              (0409)    and  A,RX8_RF_RX_COMPLETE                               ; Check if a character is ready
0688: B0 07    JNZ   0x0690             (0410)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
068A: 18       POP   A                  (0411)    pop  A
068B: 29 01    OR    A,0x1              (0412)    or   A,RX8_RF_RX_NO_DATA                                ; Add no data flag
068D: 4B       SWAP  A,X                (0413)    swap A,X
068E: 80 07    JMP   0x0696             (0414)    jmp  End_RX8_RF_iReadChar
                                        (0415) 
                                        (0416) .RX_GET_DATA:
0690: 18       POP   A                  (0417)    pop  A
0691: 21 E0    AND   A,0xE0             (0418)    and  A,RX8_RF_RX_ERROR
0693: 4B       SWAP  A,X                (0419)    swap A,X
0694: 5D 4A    MOV   A,REG[0x4A]        (0420)    mov  A,REG[RX8_RF_RX_BUFFER_REG]                        ; Read data first, then
                                        (0421)                                                            ; determine if data is valid
                                        (0422) 
                                        (0423)  End_RX8_RF_iReadChar:
                                        (0424)    RAM_EPILOGUE RAM_USE_CLASS_1
0696: 7F       RET                      (0425)    ret
0697: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0426) .ENDSECTION
                                        (0427) 
                                        (0428) 
                                        (0429) 
                                        (0430) IF (RX8_RF_RXBUF_ENABLE)
                                        (0431) .SECTION
                                        (0432) ;-----------------------------------------------------------------------------
                                        (0433) ;-----------------------------------------------------------------------------
                                        (0434) ;
                                        (0435) ;     Command Buffer commands
                                        (0436) ;
                                        (0437) ;-----------------------------------------------------------------------------
                                        (0438) ;-----------------------------------------------------------------------------
                                        (0439) 
                                        (0440) ;-----------------------------------------------------------------------------
                                        (0441) ;  FUNCTION NAME: RX8_RF_CmdReset
                                        (0442) ;
                                        (0443) ;  DESCRIPTION:
                                        (0444) ;     Reset command string and status flags
                                        (0445) ;
                                        (0446) ;  ARGUMENTS:
                                        (0447) ;     none.
                                        (0448) ;
                                        (0449) ;  RETURNS:
                                        (0450) ;     none.
                                        (0451) ;
                                        (0452) ;  SIDE EFFECTS:
                                        (0453) ;    The A and X registers may be modified by this or future implementations
                                        (0454) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0455) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0456) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0457) ;    functions.
                                        (0458) ;          
                                        (0459) ;    Currently only the page pointer registers listed below are modified: 
                                        (0460) ;          CUR_PP
                                        (0461) ;
                                        (0462) ;  THEORY of OPERATION or PROCEDURE:
                                        (0463) ;     Clear the command buffer, command counter, and flag.
                                        (0464) ;
                                        (0465)  RX8_RF_CmdReset:
                                        (0466) _RX8_RF_CmdReset:
                                        (0467)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0468)    RAM_SETPAGE_CUR >RX8_RF_aRxBuffer
069A: 55 A9 00 MOV   [NMEA_SHFTL+82],0x0(0469)    mov [RX8_RF_aRxBuffer], 0x00
069D: 62 D0 01 MOV   REG[0xD0],0x1      
                                        (0470)    RAM_SETPAGE_CUR >ptrParam
06A0: 55 FF 00 MOV   [NMEA_pointer_gps+1],0x0(0471)    mov [ptrParam],0x00
06A3: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0472)    RAM_SETPAGE_CUR >RX8_RF_bRxCnt
06A6: 55 01 00 MOV   [0x1],0x0          (0473)    mov [RX8_RF_bRxCnt], 0x00
06A9: 26 00 00 AND   [0x0],0x0          (0474)    and [RX8_RF_fStatus], 0x00
                                        (0475)    RAM_EPILOGUE RAM_USE_CLASS_4
06AC: 7F       RET                      (0476)    ret
06AD: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0477) .ENDSECTION
                                        (0478) 
                                        (0479) .SECTION
                                        (0480) ;-----------------------------------------------------------------------------
                                        (0481) ;  FUNCTION NAME: RX8_RF_bCmdCheck
                                        (0482) ;
                                        (0483) ;  DESCRIPTION:
                                        (0484) ;     Check to see if valid command in buffer.
                                        (0485) ;
                                        (0486) ;  ARGUMENTS:
                                        (0487) ;     none.
                                        (0488) ;
                                        (0489) ;  RETURNS:
                                        (0490) ;     BYTE  fStatus - Status of command receive buffer.
                                        (0491) ;                     Returns non-zero value in A if command is valid.
                                        (0492) ;
                                        (0493) ;  SIDE EFFECTS:
                                        (0494) ;    The A and X registers may be modified by this or future implementations
                                        (0495) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0496) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0497) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0498) ;    functions.
                                        (0499) ;          
                                        (0500) ;    Currently only the page pointer registers listed below are modified: 
                                        (0501) ;          CUR_PP
                                        (0502) ;
                                        (0503) ;  THEORY of OPERATION or PROCEDURE:
                                        (0504) ;     Read the status and control register.
                                        (0505) ;
                                        (0506)  RX8_RF_bCmdCheck:
                                        (0507) _RX8_RF_bCmdCheck:
                                        (0508)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0509)    RAM_SETPAGE_CUR >RX8_RF_fStatus
06B0: 51 00    MOV   A,[0x0]            (0510)    mov A,  [RX8_RF_fStatus]
06B2: 21 01    AND   A,0x1              (0511)    and A, RX8_RF_RX_BUF_CMDTERM                  ; Mask off Command status
                                        (0512)    RAM_EPILOGUE RAM_USE_CLASS_4
06B4: 7F       RET                      (0513)    ret
06B5: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0514) .ENDSECTION
                                        (0515) 
                                        (0516) .SECTION
                                        (0517) ;-----------------------------------------------------------------------------
                                        (0518) ;  FUNCTION NAME: RX8_RF_bErrCheck
                                        (0519) ;
                                        (0520) ;  DESCRIPTION:
                                        (0521) ;     Check to see if an error has occured since last CmdReset
                                        (0522) ;
                                        (0523) ;  ARGUMENTS:
                                        (0524) ;     none.
                                        (0525) ;
                                        (0526) ;  RETURNS:
                                        (0527) ;     BYTE  fStatus - Status of command receive buffer.
                                        (0528) ;                     Returns non-zero value in A if command is valid.
                                        (0529) ;           0x80 => Parity Error
                                        (0530) ;           0x40 => OverRun Error
                                        (0531) ;           0x20 => Framing Error
                                        (0532) ;           0x10 => Software Buffer OverRun
                                        (0533) ;
                                        (0534) ;  SIDE EFFECTS:
                                        (0535) ;    The A and X registers may be modified by this or future implementations
                                        (0536) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0537) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0538) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0539) ;    functions.
                                        (0540) ;          
                                        (0541) ;    Currently only the page pointer registers listed below are modified: 
                                        (0542) ;          CUR_PP
                                        (0543) ;
                                        (0544) ;     Error Status is clear when read.
                                        (0545) ;
                                        (0546) ;  THEORY of OPERATION or PROCEDURE:
                                        (0547) ;     Read RX buffer error status and clear status
                                        (0548) ;
                                        (0549)  RX8_RF_bErrCheck:
                                        (0550) _RX8_RF_bErrCheck:
                                        (0551)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0552)    RAM_SETPAGE_CUR >RX8_RF_fStatus
06B8: 51 00    MOV   A,[0x0]            (0553)    mov A,  [RX8_RF_fStatus]
06BA: 21 F0    AND   A,0xF0             (0554)    and A, RX8_RF_RX_BUF_ERROR                    ; Mask off Error status
06BC: 26 00 0F AND   [0x0],0xF          (0555)    and [RX8_RF_fStatus], ~RX8_RF_RX_BUF_ERROR
                                        (0556)    RAM_EPILOGUE RAM_USE_CLASS_4
06BF: 7F       RET                      (0557)    ret
06C0: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0558) .ENDSECTION
                                        (0559) 
                                        (0560) .SECTION
                                        (0561) ;-----------------------------------------------------------------------------
                                        (0562) ;  FUNCTION NAME: RX8_RF_bCmdLength
                                        (0563) ;
                                        (0564) ;  DESCRIPTION:
                                        (0565) ;     Get length of command string
                                        (0566) ;
                                        (0567) ;  ARGUMENTS:
                                        (0568) ;     none.
                                        (0569) ;
                                        (0570) ;  RETURNS:
                                        (0571) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (0572) ;
                                        (0573) ;  SIDE EFFECTS:
                                        (0574) ;    The A and X registers may be modified by this or future implementations
                                        (0575) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0576) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0577) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0578) ;    functions.
                                        (0579) ;          
                                        (0580) ;    Currently only the page pointer registers listed below are modified: 
                                        (0581) ;          CUR_PP
                                        (0582) ;
                                        (0583)  RX8_RF_bCmdLength:
                                        (0584) _RX8_RF_bCmdLength:
                                        (0585)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_SETPAGE_CUR >RX8_RF_bRxCnt
06C3: 51 01    MOV   A,[0x1]            (0587)    mov A,  [RX8_RF_bRxCnt]
                                        (0588)    RAM_EPILOGUE RAM_USE_CLASS_4
06C5: 7F       RET                      (0589)    ret
06C6: 70 BF    AND   F,0xBF             
06C8: 62 D0 01 MOV   REG[0xD0],0x1      
06CB: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0590) .ENDSECTION
                                        (0591) 
                                        (0592) .SECTION
                                        (0593) ;-----------------------------------------------------------------------------
                                        (0594) ;  FUNCTION NAME: RX8_RF_szGetParam
                                        (0595) ;
                                        (0596) ;  DESCRIPTION:
                                        (0597) ;      Return next parameter from UART Rx buffer
                                        (0598) ;
                                        (0599) ;
                                        (0600) ;  ARGUMENTS:  none
                                        (0601) ;
                                        (0602) ;  RETURNS:
                                        (0603) ;     A => MSB of parameter address
                                        (0604) ;     X => LSB of parameter address
                                        (0605) ;
                                        (0606) ;  SIDE EFFECTS:
                                        (0607) ;    The A and X registers may be modified by this or future implementations
                                        (0608) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0609) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0610) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0611) ;    functions.
                                        (0612) ;          
                                        (0613) ;    Currently only the page pointer registers listed below are modified:
                                        (0614) ;          CUR_PP
                                        (0615) ;          IDX_PP
                                        (0616) ;
                                        (0617) ;     The receive string is modified by placing Null characters at the end
                                        (0618) ;     of each parameter as they are recovered.
                                        (0619) ;
                                        (0620) ;  THEORY OF OPERATION:
                                        (0621) ;     This function is a stateful generator of addresses to the "parameters"
                                        (0622) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (0623) ;     each lexically distinct element into a null-terminated string by replacing
                                        (0624) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (0625) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (0626) ;     offset. The generator is initialized by a call to the function
                                        (0627) ;     RX8_RF_CmdReset which resets the entire buffer to the 'empty'
                                        (0628) ;     state. Typically this function, RX8_RF_szGetParam, is
                                        (0629) ;     not called until the buffer has been loaded with an entire command
                                        (0630) ;     (See RX8_RF_bCmdCheck).
                                        (0631) ;
                                        (0632) ;     Note, there is no special distinction between the "command" and the 
                                        (0633) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (0634) ;     character of the "command"---is also, for the purposes of this function,
                                        (0635) ;     the first "parameter" to which it returns an address.
                                        (0636) ;
                                        (0637) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (0638) ;     is determined at configuration time by a user module parameter.
                                        (0639) ;
                                        (0640)  RX8_RF_szGetParam:
                                        (0641) _RX8_RF_szGetParam:
                                        (0642)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0643)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0644)    RAM_SETPAGE_CUR >ptrParam
                                        (0645)    RAM_SETPAGE_IDX >RX8_RF_aRxBuffer
                                        (0646) 
06CE: 50 A9    MOV   A,0xA9             (0647)    mov  A, <RX8_RF_aRxBuffer                ; Get address to receive buffer
06D0: 02 FF    ADD   A,[NMEA_pointer_gps+1](0648)    add  A, [ptrParam]                      ; Add string offset
06D2: 5C       MOV   X,A                (0649)    mov  X,A
                                        (0650) 
06D3: 52 00    MOV   A,[X+0]            (0651)    mov  A,[X]                              ; Get character pointed by X
06D5: B0 04    JNZ   0x06DA             (0652)    jnz  .CheckForDelim                     ; Check for Null character
06D7: 10       PUSH  X                  (0653)    push X                                  ; Save LSB of current pointer
06D8: 80 33    JMP   0x070C             (0654)    jmp  .End_GetNextParam
                                        (0655) 
                                        (0656)                                             ; Check for delimiter and keep looping until
                                        (0657)                                             ; all leading delimiters have been found.
                                        (0658) .CheckForDelim:
06DA: 39 20    CMP   A,0x20             (0659)     cmp  A,RX8_RF_DELIMITER                 ; Check if we have a delimiter
06DC: B0 11    JNZ   0x06EE             (0660)     jnz  .ParamStartFound
06DE: 75       INC   X                  (0661)     inc  X                                  ; Increment both current pointer and
06DF: 76 FF    INC   [NMEA_pointer_gps+1](0662)     inc  [ptrParam]                         ; stored pointer.
06E1: 52 00    MOV   A,[X+0]            (0663)     mov  A,[X]                              ; Get character pointed by X
06E3: 3C FF 0F CMP   [NMEA_pointer_gps+1],0xF(0664)     cmp  [ptrParam],(RX8_RF_RX_BUFFER_SIZE -1)  ; Check if we are at the end of buffer
06E6: BF F3    JNZ   0x06DA             (0665)     jnz  .CheckForDelim
                                        (0666)                                             ; End of string found
                                        (0667) .EndOfString:
06E8: 10       PUSH  X                  (0668)     push X                                  ; Save ptr
                                        (0669) .TerminateString:
06E9: 56 00 00 MOV   [X+0],0x0          (0670)     mov  [X],0x00                           ; Make sure string is zero
06EC: 80 1F    JMP   0x070C             (0671)     jmp  .End_GetNextParam
                                        (0672) 
                                        (0673) .ParamStartFound:
06EE: 10       PUSH  X                  (0674)     push X                                  ; Beginning of parameter found, save pointer
                                        (0675) 
                                        (0676) .ParamLoop:
                                        (0677)                                             ; Now loop until end of parameter found.
06EF: 75       INC   X                  (0678)     inc  X                                  ; Advance pointers.
06F0: 76 FF    INC   [NMEA_pointer_gps+1](0679)     inc  [ptrParam]
06F2: 3C FF 0F CMP   [NMEA_pointer_gps+1],0xF(0680)     cmp  [ptrParam],(RX8_RF_RX_BUFFER_SIZE -1)  ; Check if we are at the end of buffer
06F5: AF F3    JZ    0x06E9             (0681)     jz   .TerminateString
06F7: 52 00    MOV   A,[X+0]            (0682)     mov  A,[X]                              ; Get next character
06F9: A0 12    JZ    0x070C             (0683)     jz   .End_GetNextParam
06FB: 39 20    CMP   A,0x20             (0684)     cmp  A,RX8_RF_DELIMITER                 ; Check if we have a delimiter
06FD: BF F1    JNZ   0x06EF             (0685)     jnz  .ParamLoop                         ; Still no delimiter, loop again
                                        (0686) 
06FF: 56 00 00 MOV   [X+0],0x0          (0687)     mov  [X],0x00                           ; Replace delimiter with null for end of substring
0702: 76 FF    INC   [NMEA_pointer_gps+1](0688)     inc  [ptrParam]
0704: 3C FF 0F CMP   [NMEA_pointer_gps+1],0xF(0689)     cmp  [ptrParam],(RX8_RF_RX_BUFFER_SIZE -1)  ; Check if we are at the end of buffer
0707: B0 04    JNZ   0x070C             (0690)     jnz  .End_GetNextParam                  ; If not end of string leave
0709: 55 FF 0F MOV   [NMEA_pointer_gps+1],0xF(0691)     mov  [ptrParam],(RX8_RF_RX_BUFFER_SIZE -1)  ; Reset pointer to end of string.
                                        (0692) 
                                        (0693) 
                                        (0694) .End_GetNextParam:
070C: 20       POP   X                  (0695)    pop  X
070D: 10       PUSH  X                  (0696)    push X
070E: 3D 00 00 CMP   [X+0],0x0          (0697)    cmp  [X],0x00
0711: B0 0A    JNZ   0x071C             (0698)    jnz  .NotNullString
0713: 20       POP   X                  (0699)    pop  X
0714: 57 00    MOV   X,0x0              (0700)    mov  X,0x00
0716: 5B       MOV   A,X                (0701)    mov  A,X
0717: 70 3F    AND   F,0x3F             
0719: 71 C0    OR    F,0xC0             
                                        (0702)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0703)    RAM_EPILOGUE RAM_USE_CLASS_4
071B: 7F       RET                      (0704)    ret
                                        (0705) 
                                        (0706) .NotNullString:
071C: 20       POP   X                  (0707)    pop  X
071D: 50 00    MOV   A,0x0              (0708)    mov  A,>RX8_RF_aRxBuffer                     ; Return pointer
071F: 70 3F    AND   F,0x3F             
0721: 71 C0    OR    F,0xC0             
                                        (0709)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0710)    RAM_EPILOGUE RAM_USE_CLASS_4
0723: 7F       RET                      (0711)    ret
0724: 62 D0 01 MOV   REG[0xD0],0x1      
                                        (0712) .ENDSECTION
                                        (0713) 
                                        (0714) .SECTION
                                        (0715) ;-----------------------------------------------------------------------------
                                        (0716) ;  FUNCTION NAME: RX8_RF_szGetRestOfParams
                                        (0717) ;
                                        (0718) ;  DESCRIPTION:
                                        (0719) ;      Return the rest of the UART RX buffer
                                        (0720) ;
                                        (0721) ;
                                        (0722) ;  ARGUMENTS:  none
                                        (0723) ;
                                        (0724) ;  RETURNS:
                                        (0725) ;     A => MSB of parameter
                                        (0726) ;     X => LSB of parameter
                                        (0727) ;
                                        (0728) ;  SIDE EFFECTS:
                                        (0729) ;    The A and X registers may be modified by this or future implementations
                                        (0730) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0731) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0732) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0733) ;    functions.
                                        (0734) ;          
                                        (0735) ;    Currently only the page pointer registers listed below are modified: 
                                        (0736) ;          CUR_PP
                                        (0737) ;
                                        (0738)  RX8_RF_szGetRestOfParams:
                                        (0739) _RX8_RF_szGetRestOfParams:
                                        (0740)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0741)    RAM_SETPAGE_CUR >ptrParam
                                        (0742) 
0727: 50 A9    MOV   A,0xA9             (0743)     mov  A, <RX8_RF_aRxBuffer               ; Get address to receive buffer
0729: 02 FF    ADD   A,[NMEA_pointer_gps+1](0744)     add  A, [ptrParam]                      ; Add string offset
072B: 5C       MOV   X,A                (0745)     mov  X,A
072C: 50 00    MOV   A,0x0              (0746)     mov  A,>RX8_RF_aRxBuffer                ; Return pointer
                                        (0747) 
                                        (0748)    RAM_EPILOGUE RAM_USE_CLASS_4
072E: 7F       RET                      (0749)     ret
                                        (0750) .ENDSECTION
                                        (0751) 
                                        (0752) ENDIF
                                        (0753) ; End of File RX8_RF.asm
FILE: lib\rx8_gpsint.asm                (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
072F: 08       PUSH  A                  (0003) ;;  FILENAME: RX8_GPSINT.asm
0730: 5D D0    MOV   A,REG[0xD0]        
0732: 08       PUSH  A                  
0733: 5D D3    MOV   A,REG[0xD3]        
0735: 08       PUSH  A                  
0736: 5D D4    MOV   A,REG[0xD4]        
0738: 08       PUSH  A                  
0739: 5D D5    MOV   A,REG[0xD5]        
073B: 08       PUSH  A                  
073C: 70 3F    AND   F,0x3F             
073E: 71 C0    OR    F,0xC0             (0004) ;;   Version: 3.50, Updated on 2015/3/4 at 22:26:55
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
0740: 62 D0 00 MOV   REG[0xD0],0x0      (0007) ;;  DESCRIPTION: RX8 Interrupt Service Routine.
                                        (0008) ;;-----------------------------------------------------------------------------
0743: 51 D7    MOV   A,[__r0]           (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
0745: 08       PUSH  A                  (0010) ;;*****************************************************************************
0746: 51 D6    MOV   A,[__r1]           (0011) ;;*****************************************************************************
0748: 08       PUSH  A                  (0012) 
0749: 51 D5    MOV   A,[__r2]           (0013) include "m8c.inc"
074B: 08       PUSH  A                  (0014) include "memory.inc"
074C: 51 D4    MOV   A,[__r3]           (0015) include "RX8_GPS.inc"
074E: 08       PUSH  A                  (0016) 
074F: 51 D3    MOV   A,[__r4]           (0017) 
0751: 08       PUSH  A                  (0018) ;-----------------------------------------------
0752: 51 D2    MOV   A,[__r5]           (0019) ;  Global Symbols
0754: 08       PUSH  A                  (0020) ;-----------------------------------------------
0755: 51 D1    MOV   A,[__r6]           (0021) export  _RX8_GPS_ISR
0757: 08       PUSH  A                  (0022) 
0758: 51 D0    MOV   A,[__r7]           (0023) 
075A: 08       PUSH  A                  (0024) IF (RX8_GPS_RXBUF_ENABLE)
075B: 51 CF    MOV   A,[__r8]           (0025) export  RX8_GPS_aRxBuffer
075D: 08       PUSH  A                  (0026) export _RX8_GPS_aRxBuffer
075E: 51 CE    MOV   A,[__r9]           (0027) export  RX8_GPS_bRxCnt
0760: 08       PUSH  A                  (0028) export _RX8_GPS_bRxCnt
0761: 51 CD    MOV   A,[__r10]          (0029) export  RX8_GPS_fStatus
0763: 08       PUSH  A                  (0030) export _RX8_GPS_fStatus
0764: 51 CC    MOV   A,[__r11]          (0031) ENDIF
0766: 08       PUSH  A                  (0032) 
0767: 51 CB    MOV   A,[__rX]           (0033) 
0769: 08       PUSH  A                  (0034) ;-----------------------------------------------
076A: 51 CA    MOV   A,[__rY]           (0035) ; Variable Allocation
076C: 08       PUSH  A                  (0036) ;-----------------------------------------------
076D: 51 C9    MOV   A,[__rZ]           (0037) 
076F: 08       PUSH  A                  (0038) IF (RX8_GPS_RXBUF_ENABLE)
                                        (0039) AREA InterruptRAM(RAM,REL,CON)
0770: 62 D0 00 MOV   REG[0xD0],0x0      (0040)  RX8_GPS_fStatus:
                                        (0041) _RX8_GPS_fStatus:      BLK  1
                                        (0042)  RX8_GPS_bRxCnt:
                                        (0043) _RX8_GPS_bRxCnt:       BLK  1
                                        (0044) AREA RX8_GPS_RAM(RAM,REL,CON)
                                        (0045)  RX8_GPS_aRxBuffer:    
                                        (0046) _RX8_GPS_aRxBuffer:    BLK RX8_GPS_RX_BUFFER_SIZE
                                        (0047) ENDIF
                                        (0048) 
                                        (0049) 
                                        (0050) AREA InterruptRAM(RAM,REL,CON)
                                        (0051) 
                                        (0052) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0053) ;---------------------------------------------------
                                        (0054) ; Insert your custom declarations below this banner
                                        (0055) ;---------------------------------------------------
                                        (0056) 
                                        (0057) ;------------------------
                                        (0058) ; Includes
                                        (0059) ;------------------------
                                        (0060) 
                                        (0061) 	
                                        (0062) ;------------------------
                                        (0063) ;  Constant Definitions
                                        (0064) ;------------------------
                                        (0065) 
                                        (0066) 
                                        (0067) ;------------------------
                                        (0068) ; Variable Allocation
                                        (0069) ;------------------------
                                        (0070) 
                                        (0071) 
                                        (0072) ;---------------------------------------------------
                                        (0073) ; Insert your custom declarations above this banner
                                        (0074) ;---------------------------------------------------
                                        (0075) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0076) 
                                        (0077) 
                                        (0078) AREA UserModules (ROM, REL)
                                        (0079) 
                                        (0080) ;-----------------------------------------------------------------------------
                                        (0081) ;  FUNCTION NAME: _RX8_GPS_ISR
                                        (0082) ;
                                        (0083) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0084) ;
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;
                                        (0087) 
                                        (0088) _RX8_GPS_ISR:
                                        (0089) 
                                        (0090)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0091)    ;---------------------------------------------------
                                        (0092)    ; Insert your custom assembly code below this banner
                                        (0093)    ;---------------------------------------------------
                                        (0094)    ;   NOTE: interrupt service routines must preserve
                                        (0095)    ;   the values of the A and X CPU registers.
                                        (0096)    
                                        (0097)    ;---------------------------------------------------
                                        (0098)    ; Insert your custom assembly code above this banner
                                        (0099)    ;---------------------------------------------------
                                        (0100)    
                                        (0101)    ;---------------------------------------------------
                                        (0102)    ; Insert a lcall to a C function below this banner
                                        (0103)    ; and un-comment the lines between these banners
                                        (0104)    ;---------------------------------------------------
                                        (0105)    
                                        (0106)    PRESERVE_CPU_CONTEXT
0773: 7C 0C 10 LCALL _gps_signal        (0107)    lcall _gps_signal
0776: 70 3F    AND   F,0x3F             
0778: 71 C0    OR    F,0xC0             
077A: 62 D0 00 MOV   REG[0xD0],0x0      
077D: 18       POP   A                  
077E: 53 C9    MOV   [__rZ],A           
0780: 18       POP   A                  
0781: 53 CA    MOV   [__rY],A           
0783: 18       POP   A                  
0784: 53 CB    MOV   [__rX],A           
0786: 18       POP   A                  
0787: 53 CC    MOV   [__r11],A          
0789: 18       POP   A                  
078A: 53 CD    MOV   [__r10],A          
078C: 18       POP   A                  
078D: 53 CE    MOV   [__r9],A           
078F: 18       POP   A                  
0790: 53 CF    MOV   [__r8],A           
0792: 18       POP   A                  
0793: 53 D0    MOV   [__r7],A           
0795: 18       POP   A                  
0796: 53 D1    MOV   [__r6],A           
0798: 18       POP   A                  
0799: 53 D2    MOV   [__r5],A           
079B: 18       POP   A                  
079C: 53 D3    MOV   [__r4],A           
079E: 18       POP   A                  
079F: 53 D4    MOV   [__r3],A           
07A1: 18       POP   A                  
07A2: 53 D5    MOV   [__r2],A           
07A4: 18       POP   A                  
07A5: 53 D6    MOV   [__r1],A           
07A7: 18       POP   A                  
07A8: 53 D7    MOV   [__r0],A           
07AA: 18       POP   A                  
07AB: 60 D5    MOV   REG[0xD5],A        
07AD: 18       POP   A                  
07AE: 60 D4    MOV   REG[0xD4],A        
07B0: 18       POP   A                  
07B1: 60 D3    MOV   REG[0xD3],A        
07B3: 18       POP   A                  
07B4: 60 D0    MOV   REG[0xD0],A        
07B6: 70 00    AND   F,0x0              
07B8: 18       POP   A                  
                                        (0108)    RESTORE_CPU_CONTEXT
                                        (0109)    
                                        (0110)    ;---------------------------------------------------
                                        (0111)    ; Insert a lcall to a C function above this banner
                                        (0112)    ; and un-comment the lines between these banners
                                        (0113)    ;---------------------------------------------------
                                        (0114)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0115) 
                                        (0116)  IF (RX8_GPS_RXBUF_ENABLE)
07B9: 08       PUSH  A                  (0117)    push A
07BA: 10       PUSH  X                  (0118)    push X
07BB: 5D D3    MOV   A,REG[0xD3]        
07BD: 08       PUSH  A                  
                                        (0119) 
                                        (0120)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0121)       REG_PRESERVE IDX_PP                                  ; Save the IDX_PP register	
                                        (0122)    ENDIF
                                        (0123) 
07BE: 58 03    MOV   X,[0x3]            (0124)    mov  X,[RX8_GPS_bRxCnt]                                 ; Load X with byte counter
07C0: 5D 3B    MOV   A,REG[0x3B]        (0125)    mov  A,REG[RX8_GPS_CONTROL_REG]                         ; Read the control register
07C2: 08       PUSH  A                  (0126)    push A                                                  ; Store copy for later test
                                        (0127)                                                            ; IF real RX interrupt
07C3: 21 08    AND   A,0x8              (0128)    and  A,RX8_GPS_RX_REG_FULL                              ; Did really really get an IRQ
07C5: B0 04    JNZ   0x07CA             (0129)    jnz  .UARTRX_ReadRx                                     ; Data ready, go get it
07C7: 18       POP   A                  (0130)    pop  A                                                  ; Restore stack
07C8: 80 62    JMP   0x082B             (0131)    jmp  .RESTORE_IDX_PP
                                        (0132) 
                                        (0133) .UARTRX_ReadRx:
                                        (0134) 
07CA: 18       POP   A                  (0135)    pop  A                                                  ; Restore status flags
                                        (0136)                                                            ; IF there is no error, get data
                                        (0137)                                                            ; Check for parity or framing error
07CB: 21 E0    AND   A,0xE0             (0138)    and  A,RX8_GPS_RX_ERROR
07CD: A0 12    JZ    0x07E0             (0139)    jz   .UARTRX_NO_ERROR                                   ; If there is not an Error go read data
                                        (0140) 
07CF: 2C 02    OR    [0x2],A            (0141)    or   [RX8_GPS_fStatus],A                                ; Set error flags (parity,framing,overrun) bits
                                        (0142) 
07D1: 49 3A 00 TST   REG[0x3A],0x0      (0143)    tst  REG[RX8_GPS_RX_BUFFER_REG], 0x00                   ; Read the data buffer to clear it.
                                        (0144) 
07D4: 21 20    AND   A,0x20             (0145)    and  A,RX8_GPS_RX_FRAMING_ERROR                         ; Check for framing error special case
07D6: A0 54    JZ    0x082B             (0146)    jz   .RESTORE_IDX_PP                                    ; Not framing error, all done
                                        (0147) 
                                        (0148)                                                            ; Disable and re-enable RX to reset after
                                        (0149)                                                            ; framing error.
07D8: 41 3B FE AND   REG[0x3B],0xFE     (0150)    and   REG[RX8_GPS_CONTROL_REG], ~RX8_GPS_RX_ENABLE      ; Disable RX
07DB: 43 3B 01 OR    REG[0x3B],0x1      (0151)    or    REG[RX8_GPS_CONTROL_REG],  RX8_GPS_RX_ENABLE      ; Enable RX
07DE: 80 4C    JMP   0x082B             (0152)    jmp  .RESTORE_IDX_PP                                    ; Done with framing error, leave.
                                        (0153) 
                                        (0154) 
                                        (0155) .UARTRX_NO_ERROR:
07E0: 5D 3A    MOV   A,REG[0x3A]        (0156)    mov  A,REG[RX8_GPS_RX_BUFFER_REG ]                      ; Read the data buffer
                                        (0157) 
                                        (0158)                                                            ; IF buffer not full
07E2: 47 02 01 TST   [0x2],0x1          (0159)    tst  [RX8_GPS_fStatus],RX8_GPS_RX_BUF_CMDTERM           ; Check for buffer full
07E5: B0 45    JNZ   0x082B             (0160)    jnz  .RESTORE_IDX_PP                                    ; All done
                                        (0161) 
07E7: 39 0D    CMP   A,0xD              (0162)    cmp  A,RX8_GPS_CMD_TERM                                 ; Check for End of command
07E9: B0 14    JNZ   0x07FE             (0163)    jnz  .UARTRX_CHK_CTLCHAR
07EB: 2E 02 01 OR    [0x2],0x1          (0164)    or   [RX8_GPS_fStatus],RX8_GPS_RX_BUF_CMDTERM           ; Set command ready bit
07EE: 62 D3 00 MOV   REG[0xD3],0x0      
07F1: 70 3F    AND   F,0x3F             
07F3: 71 80    OR    F,0x80             
                                        (0165) 
                                        (0166)    RAM_SETPAGE_IDX >RX8_GPS_aRxBuffer
                                        (0167)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
07F5: 56 B9 00 MOV   [X-71],0x0         (0168)    mov  [X + RX8_GPS_aRxBuffer],00h                        ; Zero out last data
07F8: 70 3F    AND   F,0x3F             
07FA: 71 00    OR    F,0x0              
                                        (0169)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
07FC: 80 2E    JMP   0x082B             (0170)    jmp  .RESTORE_IDX_PP
                                        (0171) 
                                        (0172) .UARTRX_CHK_CTLCHAR:                                       ; Ignore charaters below this value
                                        (0173)                                                            ; If ignore char is set to 0x00, do not
                                        (0174)                                                            ; ignore any characters.
                                        (0175) IF(RX8_GPS_RX_IGNORE_BELOW)
07FE: 39 20    CMP   A,0x20             (0176)    cmp  A,RX8_GPS_RX_IGNORE_BELOW
0800: C0 2A    JC    0x082B             (0177)    jc   .RESTORE_IDX_PP
                                        (0178) ENDIF
                                        (0179) 
                                        (0180) .UARTRX_CHK_OVFL:                                          ; Check for MAX String here
0802: 3C 03 0F CMP   [0x3],0xF          (0181)    cmp  [RX8_GPS_bRxCnt],(RX8_GPS_RX_BUFFER_SIZE - 1)
0805: C0 14    JC    0x081A             (0182)    jc   .UARTRX_ISR_GETDATA
0807: 2E 02 10 OR    [0x2],0x10         (0183)    or   [RX8_GPS_fStatus],RX8_GPS_RX_BUF_OVERRUN           ; Set error flags (parity,framing,overrun) bits
080A: 62 D3 00 MOV   REG[0xD3],0x0      
080D: 70 3F    AND   F,0x3F             
080F: 71 80    OR    F,0x80             
                                        (0184) 
                                        (0185)    RAM_SETPAGE_IDX >RX8_GPS_aRxBuffer             ;   using idexed address mode
                                        (0186)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0811: 56 B9 00 MOV   [X-71],0x0         (0187)    mov  [X + RX8_GPS_aRxBuffer],00h                        ; Zero out last data
0814: 70 3F    AND   F,0x3F             
0816: 71 00    OR    F,0x0              
                                        (0188)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
0818: 80 12    JMP   0x082B             (0189)    jmp  .RESTORE_IDX_PP
                                        (0190) 
                                        (0191)                                                            ; IF input data == "CR", then end of command
                                        (0192) .UARTRX_ISR_GETDATA:
081A: 75       INC   X                  (0193)    inc  X                                                  ; Inc the pointer
081B: 5A 03    MOV   [0x3],X            (0194)    mov  [RX8_GPS_bRxCnt],X                                 ; Restore the pointer
081D: 79       DEC   X                  (0195)    dec  X                                                  ; Mov X to its original value
081E: 62 D3 00 MOV   REG[0xD3],0x0      
0821: 70 3F    AND   F,0x3F             
0823: 71 80    OR    F,0x80             
                                        (0196) 
                                        (0197)    RAM_SETPAGE_IDX >RX8_GPS_aRxBuffer             ;   using idexed address mode
                                        (0198)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_10b
0825: 54 B9    MOV   [X-71],A           (0199)    mov  [X+RX8_GPS_aRxBuffer],A                            ; store data in array
0827: 70 3F    AND   F,0x3F             
0829: 71 00    OR    F,0x0              
082B: 18       POP   A                  
082C: 60 D3    MOV   REG[0xD3],A        
                                        (0200)    RAM_CHANGE_PAGE_MODE FLAG_PGMODE_00b
                                        (0201) 
                                        (0202) 
                                        (0203) .RESTORE_IDX_PP:
                                        (0204)    IF SYSTEM_LARGE_MEMORY_MODEL
                                        (0205)       REG_RESTORE IDX_PP
                                        (0206)    ENDIF
                                        (0207) 
                                        (0208) .END_UARTRX_ISR:
082E: 20       POP   X                  (0209)    pop  X
082F: 18       POP   A                  (0210)    pop  A
                                        (0211) 
                                        (0212) ENDIF
                                        (0213) 
                                        (0214) RX8_GPS_RX_ISR_END:
0830: 7E       RETI                     (0215)    reti
                                        (0216) 
                                        (0217) 
                                        (0218) ; end of file RX8_GPSINT.asm
FILE: lib\rx8_gps.asm                   (0001) ;;*****************************************************************************
0831: 43 E1 40 OR    REG[0xE1],0x40     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: RX8_GPS.asm
                                        (0004) ;;   Version: 3.50, Updated on 2015/3/4 at 22:26:55
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: RX8 User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) ;-----------------------------------------------
                                        (0023) ; include instance specific register definitions
                                        (0024) ;-----------------------------------------------
                                        (0025) include "m8c.inc"
                                        (0026) include "memory.inc"
                                        (0027) include "RX8_GPS.inc"
                                        (0028) 
                                        (0029) 
                                        (0030) ;-----------------------------------------------
                                        (0031) ;  Global Symbols
                                        (0032) ;-----------------------------------------------
                                        (0033) export   RX8_GPS_EnableInt
                                        (0034) export  _RX8_GPS_EnableInt
                                        (0035) export   RX8_GPS_DisableInt
                                        (0036) export  _RX8_GPS_DisableInt
                                        (0037) export   RX8_GPS_Start
                                        (0038) export  _RX8_GPS_Start
                                        (0039) export   RX8_GPS_Stop
                                        (0040) export  _RX8_GPS_Stop
                                        (0041) export   RX8_GPS_bReadRxData
                                        (0042) export  _RX8_GPS_bReadRxData
                                        (0043) export   RX8_GPS_bReadRxStatus
                                        (0044) export  _RX8_GPS_bReadRxStatus
                                        (0045) 
                                        (0046) ; Old function name convension, do not use.
                                        (0047) ; These will be removed in a future release.
                                        (0048) export  bRX8_GPS_ReadRxData
                                        (0049) export _bRX8_GPS_ReadRxData
                                        (0050) export  bRX8_GPS_ReadRxStatus
                                        (0051) export _bRX8_GPS_ReadRxStatus
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ; High Level RX functions
                                        (0055) ;-----------------------------------------------
                                        (0056) 
                                        (0057) export  RX8_GPS_cGetChar
                                        (0058) export _RX8_GPS_cGetChar
                                        (0059) export  RX8_GPS_cReadChar
                                        (0060) export _RX8_GPS_cReadChar
                                        (0061) export  RX8_GPS_iReadChar
                                        (0062) export _RX8_GPS_iReadChar
                                        (0063) 
                                        (0064) IF (RX8_GPS_RXBUF_ENABLE)
                                        (0065) export  RX8_GPS_CmdReset
                                        (0066) export _RX8_GPS_CmdReset
                                        (0067) export  RX8_GPS_bCmdCheck
                                        (0068) export _RX8_GPS_bCmdCheck
                                        (0069) export  RX8_GPS_bCmdLength
                                        (0070) export _RX8_GPS_bCmdLength
                                        (0071) export  RX8_GPS_bErrCheck
                                        (0072) export _RX8_GPS_bErrCheck
                                        (0073) 
                                        (0074) export  RX8_GPS_szGetParam
                                        (0075) export _RX8_GPS_szGetParam
                                        (0076) export  RX8_GPS_szGetRestOfParams
                                        (0077) export _RX8_GPS_szGetRestOfParams
                                        (0078) 
                                        (0079) ;-----------------------------------------------
                                        (0080) ;  Variables
                                        (0081) ;-----------------------------------------------
                                        (0082) 
                                        (0083) AREA RX8_GPS_RAM(RAM,REL,CON)
                                        (0084)  ptrParam:   			BLK  1
                                        (0085) 
                                        (0086) ENDIF
                                        (0087) ;-----------------------------------------------
                                        (0088) ;  EQUATES
                                        (0089) ;-----------------------------------------------
                                        (0090) bfCONTROL_REG_START_BIT:   equ   1     ; Control register start bit
                                        (0091) 
                                        (0092) area UserModules (ROM, REL)
                                        (0093) 
                                        (0094) .SECTION
                                        (0095) ;-----------------------------------------------------------------------------
                                        (0096) ;  FUNCTION NAME: RX8_GPS_EnableInt
                                        (0097) ;
                                        (0098) ;  DESCRIPTION:
                                        (0099) ;     Enables this receiver's interrupt by setting the interrupt enable mask
                                        (0100) ;     bit associated with this User Module. Remember to call the global interrupt
                                        (0101) ;     enable function by using the macro: M8C_EnableGInt.
                                        (0102) ;
                                        (0103) ;-----------------------------------------------------------------------------
                                        (0104) ;
                                        (0105) ;  ARGUMENTS: none
                                        (0106) ;
                                        (0107) ;  RETURNS: none
                                        (0108) ;
                                        (0109) ;  SIDE EFFECTS:
                                        (0110) ;    The A and X registers may be modified by this or future implementations
                                        (0111) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0112) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0113) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0114) ;    functions.
                                        (0115) ;
                                        (0116)  RX8_GPS_EnableInt:
                                        (0117) _RX8_GPS_EnableInt:
                                        (0118)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0119)    M8C_EnableIntMask RX8_GPS_INT_REG, RX8_GPS_bINT_MASK
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_1
0834: 7F       RET                      (0121)    ret
0835: 41 E1 BF AND   REG[0xE1],0xBF     
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) .SECTION
                                        (0125) ;-----------------------------------------------------------------------------
                                        (0126) ;  FUNCTION NAME: RX8_GPS_DisableInt
                                        (0127) ;
                                        (0128) ;  DESCRIPTION:
                                        (0129) ;     Disables this RX8's interrupt by clearing the interrupt enable mask bit
                                        (0130) ;     associated with this User Module.
                                        (0131) ;
                                        (0132) ;-----------------------------------------------------------------------------
                                        (0133) ;
                                        (0134) ;  ARGUMENTS:  none
                                        (0135) ;
                                        (0136) ;  RETURNS:  none
                                        (0137) ;
                                        (0138) ;  SIDE EFFECTS:
                                        (0139) ;    The A and X registers may be modified by this or future implementations
                                        (0140) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0141) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0142) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0143) ;    functions.
                                        (0144) ;
                                        (0145)  RX8_GPS_DisableInt:
                                        (0146) _RX8_GPS_DisableInt:
                                        (0147)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0148)    M8C_DisableIntMask RX8_GPS_INT_REG, RX8_GPS_bINT_MASK
                                        (0149)    RAM_EPILOGUE RAM_USE_CLASS_1
0838: 7F       RET                      (0150)    ret
                                        (0151) .ENDSECTION
                                        (0152) 
                                        (0153) .SECTION
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;  FUNCTION NAME: RX8_GPS_Start(BYTE bParity)
                                        (0156) ;
                                        (0157) ;  DESCRIPTION:
                                        (0158) ;    Sets the start bit and parity in the Control register of this user module.
                                        (0159) ;
                                        (0160) ;-----------------------------------------------------------------------------
                                        (0161) ;
                                        (0162) ;  ARGUMENTS:
                                        (0163) ;    BYTE bParity - parity of received data.  Use defined masks.
                                        (0164) ;    passed in A register.
                                        (0165) ;
                                        (0166) ;  RETURNS: none
                                        (0167) ;
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  RX8_GPS_Start:
                                        (0176) _RX8_GPS_Start:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
0839: 29 01    OR    A,0x1              (0178)    or    A, bfCONTROL_REG_START_BIT
083B: 60 3B    MOV   REG[0x3B],A        (0179)    mov   REG[RX8_GPS_CONTROL_REG], A
                                        (0180)    RAM_EPILOGUE RAM_USE_CLASS_1
083D: 7F       RET                      (0181)    ret
                                        (0182) .ENDSECTION
                                        (0183) 
                                        (0184) .SECTION
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;  FUNCTION NAME: RX8_GPS_Stop
                                        (0187) ;
                                        (0188) ;  DESCRIPTION:
                                        (0189) ;     Disables RX8 operation.
                                        (0190) ;
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: none
                                        (0194) ;
                                        (0195) ;  RETURNS: none
                                        (0196) ;
                                        (0197) ;  SIDE EFFECTS:
                                        (0198) ;    The A and X registers may be modified by this or future implementations
                                        (0199) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0200) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0201) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0202) ;    functions.
                                        (0203) ;
                                        (0204)  RX8_GPS_Stop:
                                        (0205) _RX8_GPS_Stop:
                                        (0206)    RAM_PROLOGUE RAM_USE_CLASS_1
083E: 41 3B FE AND   REG[0x3B],0xFE     (0207)    and   REG[RX8_GPS_CONTROL_REG], ~bfCONTROL_REG_START_BIT
                                        (0208)    RAM_EPILOGUE RAM_USE_CLASS_1
0841: 7F       RET                      (0209)    ret
                                        (0210) .ENDSECTION
                                        (0211) 
                                        (0212) .SECTION
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;  FUNCTION NAME: RX8_GPS_bReadRxData
                                        (0215) ;
                                        (0216) ;  DESCRIPTION:
                                        (0217) ;     Reads the RX buffer register.  Should check the status regiser to make
                                        (0218) ;     sure data is valid.
                                        (0219) ;
                                        (0220) ;-----------------------------------------------------------------------------
                                        (0221) ;
                                        (0222) ;  ARGUMENTS:  none
                                        (0223) ;
                                        (0224) ;  RETURNS:
                                        (0225) ;    bRxData - returned in A.
                                        (0226) ;
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  RX8_GPS_bReadRxData:
                                        (0235) _RX8_GPS_bReadRxData:
                                        (0236)  bRX8_GPS_ReadRxData:
                                        (0237) _bRX8_GPS_ReadRxData:
                                        (0238)    RAM_PROLOGUE RAM_USE_CLASS_1
0842: 5D 3A    MOV   A,REG[0x3A]        (0239)    mov A, REG[RX8_GPS_RX_BUFFER_REG]
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0844: 7F       RET                      (0241)    ret
                                        (0242) .ENDSECTION
                                        (0243) 
                                        (0244) .SECTION
                                        (0245) ;-----------------------------------------------------------------------------
                                        (0246) ;  FUNCTION NAME: RX8_GPS_bReadRxStatus
                                        (0247) ;
                                        (0248) ;  DESCRIPTION:
                                        (0249) ;    Reads the RX Status bits in the Control/Status register.
                                        (0250) ;
                                        (0251) ;-----------------------------------------------------------------------------
                                        (0252) ;
                                        (0253) ;  ARGUMENTS:  none
                                        (0254) ;
                                        (0255) ;  RETURNS:
                                        (0256) ;     BYTE  bRXStatus - transmit status data.  Use the following defined bits
                                        (0257) ;                       masks: RX_COMPLETE and RX_BUFFER_EMPTY
                                        (0258) ;
                                        (0259) ;  SIDE EFFECTS:
                                        (0260) ;    The A and X registers may be modified by this or future implementations
                                        (0261) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0262) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0263) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0264) ;    functions.
                                        (0265) ;
                                        (0266)  RX8_GPS_bReadRxStatus:
                                        (0267) _RX8_GPS_bReadRxStatus:
                                        (0268)  bRX8_GPS_ReadRxStatus:
                                        (0269) _bRX8_GPS_ReadRxStatus:
                                        (0270)    RAM_PROLOGUE RAM_USE_CLASS_1
0845: 5D 3B    MOV   A,REG[0x3B]        (0271)    mov A,  REG[RX8_GPS_CONTROL_REG]
                                        (0272)    RAM_EPILOGUE RAM_USE_CLASS_1
0847: 7F       RET                      (0273)    ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) ;-----------------------------------------------
                                        (0277) ; High Level RX functions
                                        (0278) ;-----------------------------------------------
                                        (0279) 
                                        (0280) .SECTION
                                        (0281) ;-----------------------------------------------------------------------------
                                        (0282) ;  FUNCTION NAME: RX8_GPS_cGetChar
                                        (0283) ;
                                        (0284) ;  DESCRIPTION:
                                        (0285) ;     Read character from UART RX port.
                                        (0286) ;
                                        (0287) ;
                                        (0288) ;  ARGUMENTS:
                                        (0289) ;      none
                                        (0290) ;
                                        (0291) ;  RETURNS:
                                        (0292) ;     char that is returned from UART
                                        (0293) ;
                                        (0294) ;  SIDE EFFECTS:
                                        (0295) ;    The A and X registers may be modified by this or future implementations
                                        (0296) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0297) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0298) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0299) ;    functions.
                                        (0300) ;    
                                        (0301) ;    Program flow will stay in this function until a character is received.
                                        (0302) ;    If the watchdog timer is used, care must be taken to make sure that
                                        (0303) ;    the delay between characters is less than the watchdog timeout.
                                        (0304) ;
                                        (0305)  RX8_GPS_cGetChar:
                                        (0306) _RX8_GPS_cGetChar:
                                        (0307)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0308) 
                                        (0309) .getChar_Loop:
0848: 49 3B 08 TST   REG[0x3B],0x8      (0310)    tst REG[RX8_GPS_CONTROL_REG],RX8_GPS_RX_REG_FULL   ; Check if a character is ready
084B: AF FC    JZ    _RX8_GPS_cGetChar  (0311)    jz  .getChar_Loop                                        ; If not loop
                                        (0312) 
084D: 5D 3A    MOV   A,REG[0x3A]        (0313)    mov A, REG[RX8_GPS_RX_BUFFER_REG]             ; Get character
                                        (0314)    RAM_EPILOGUE RAM_USE_CLASS_1
084F: 7F       RET                      (0315)    ret
                                        (0316) .ENDSECTION
                                        (0317) 
                                        (0318) .SECTION
                                        (0319) ;-----------------------------------------------------------------------------
                                        (0320) ;  FUNCTION NAME: RX8_GPS_cReadChar
                                        (0321) ;
                                        (0322) ;  DESCRIPTION:
                                        (0323) ;     Read character from UART RX port.
                                        (0324) ;
                                        (0325) ;  ARGUMENTS:
                                        (0326) ;      none
                                        (0327) ;
                                        (0328) ;  RETURNS:
                                        (0329) ;     char that is returned from UART
                                        (0330) ;
                                        (0331) ;  SIDE EFFECTS:
                                        (0332) ;    The A and X registers may be modified by this or future implementations
                                        (0333) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0334) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0335) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0336) ;    functions.
                                        (0337) ;
                                        (0338) ;    A valid 0x00 character will be ignored, since a 0x00 return value
                                        (0339) ;    implies a valid character or an error condition occured.
                                        (0340) ;
                                        (0341)  RX8_GPS_cReadChar:
                                        (0342) _RX8_GPS_cReadChar:
                                        (0343)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0344) 
0850: 5D 3B    MOV   A,REG[0x3B]        (0345)    mov  A,REG[RX8_GPS_CONTROL_REG]                         ; Get Status of RX
0852: 08       PUSH  A                  (0346)    push A
0853: 21 08    AND   A,0x8              (0347)    and  A,RX8_GPS_RX_COMPLETE                              ; Check if a character is ready
0855: B0 04    JNZ   0x085A             (0348)    jnz  .RX_DATA_RDY                                       ; Data Ready go read it.
0857: 18       POP   A                  (0349)    pop  A
0858: 80 0B    JMP   0x0864             (0350)    jmp  .RX_NO_VALID_CHAR
                                        (0351) 
                                        (0352) .RX_DATA_RDY:
085A: 5D 3A    MOV   A,REG[0x3A]        (0353)    mov  A,REG[RX8_GPS_RX_BUFFER_REG]                       ; Read data first, then
085C: 4B       SWAP  A,X                (0354)    swap A,X                                                ; determine if data is valid
                                        (0355) 
085D: 18       POP   A                  (0356)    pop  A                                                  ; Check for errors
085E: 21 A0    AND   A,0xA0             (0357)    and  A,(RX8_GPS_RX_PARITY_ERROR | RX8_GPS_RX_FRAMING_ERROR)
0860: B0 03    JNZ   0x0864             (0358)    jnz  .RX_NO_VALID_CHAR                                  ; No character, exit
0862: 4B       SWAP  A,X                (0359)    swap A,X                                                ; Put data in A and exit
                                        (0360)    RAM_EPILOGUE RAM_USE_CLASS_1
0863: 7F       RET                      (0361)    ret
                                        (0362) 
                                        (0363) .RX_NO_VALID_CHAR:
0864: 50 00    MOV   A,0x0              (0364)    mov A,0x00                                              ; Zero out character
                                        (0365) 
                                        (0366)  End_RX8_GPS_cReadChar:
                                        (0367)    RAM_EPILOGUE RAM_USE_CLASS_1
0866: 7F       RET                      (0368)    ret
                                        (0369) .ENDSECTION
                                        (0370) 																			
                                        (0371) .SECTION
                                        (0372) ;-----------------------------------------------------------------------------
                                        (0373) ;  FUNCTION NAME: RX8_GPS_iReadChar
                                        (0374) ;
                                        (0375) ; WARNING WARNING WARNING  Negative return value not correct!!!!  We may want
                                        (0376) ; to just set a value in the upper byte if error conditions exists.
                                        (0377) ;
                                        (0378) ;  DESCRIPTION:
                                        (0379) ;     Read character from UART RX port.
                                        (0380) ;
                                        (0381) ;  ARGUMENTS:
                                        (0382) ;      none
                                        (0383) ;
                                        (0384) ;  RETURNS:
                                        (0385) ;     An integer value is returned.  A negative value inplies and error
                                        (0386) ;     condition, a positive value between 0 and 255 is the return character.
                                        (0387) ;
                                        (0388) ;     Error Codes:
                                        (0389) ;        0x80CC    Parity Error
                                        (0390) ;        0x40CC    Overrun Error
                                        (0391) ;        0x20CC    Framing Error
                                        (0392) ;        0x01CC    No Data available
                                        (0393) ;
                                        (0394) ;  SIDE EFFECTS:
                                        (0395) ;    The A and X registers may be modified by this or future implementations
                                        (0396) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0397) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0398) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0399) ;    functions.
                                        (0400) ;
                                        (0401)  RX8_GPS_iReadChar:
                                        (0402) _RX8_GPS_iReadChar:
                                        (0403)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0404) 
0867: 5D 3B    MOV   A,REG[0x3B]        (0405)    mov  A,REG[RX8_GPS_CONTROL_REG]                         ; Get Status of RX
                                        (0406)                                                            ; Mask only errors and data ready
0869: 21 E8    AND   A,0xE8             (0407)    and  A,(RX8_GPS_RX_ERROR|RX8_GPS_RX_REG_FULL)
086B: 08       PUSH  A                  (0408)    push A
086C: 21 08    AND   A,0x8              (0409)    and  A,RX8_GPS_RX_COMPLETE                              ; Check if a character is ready
086E: B0 07    JNZ   0x0876             (0410)    jnz  .RX_GET_DATA                                       ; Data Ready go read it.
0870: 18       POP   A                  (0411)    pop  A
0871: 29 01    OR    A,0x1              (0412)    or   A,RX8_GPS_RX_NO_DATA                               ; Add no data flag
0873: 4B       SWAP  A,X                (0413)    swap A,X
0874: 80 07    JMP   0x087C             (0414)    jmp  End_RX8_GPS_iReadChar
                                        (0415) 
                                        (0416) .RX_GET_DATA:
0876: 18       POP   A                  (0417)    pop  A
0877: 21 E0    AND   A,0xE0             (0418)    and  A,RX8_GPS_RX_ERROR
0879: 4B       SWAP  A,X                (0419)    swap A,X
087A: 5D 3A    MOV   A,REG[0x3A]        (0420)    mov  A,REG[RX8_GPS_RX_BUFFER_REG]                       ; Read data first, then
                                        (0421)                                                            ; determine if data is valid
                                        (0422) 
                                        (0423)  End_RX8_GPS_iReadChar:
                                        (0424)    RAM_EPILOGUE RAM_USE_CLASS_1
087C: 7F       RET                      (0425)    ret
087D: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0426) .ENDSECTION
                                        (0427) 
                                        (0428) 
                                        (0429) 
                                        (0430) IF (RX8_GPS_RXBUF_ENABLE)
                                        (0431) .SECTION
                                        (0432) ;-----------------------------------------------------------------------------
                                        (0433) ;-----------------------------------------------------------------------------
                                        (0434) ;
                                        (0435) ;     Command Buffer commands
                                        (0436) ;
                                        (0437) ;-----------------------------------------------------------------------------
                                        (0438) ;-----------------------------------------------------------------------------
                                        (0439) 
                                        (0440) ;-----------------------------------------------------------------------------
                                        (0441) ;  FUNCTION NAME: RX8_GPS_CmdReset
                                        (0442) ;
                                        (0443) ;  DESCRIPTION:
                                        (0444) ;     Reset command string and status flags
                                        (0445) ;
                                        (0446) ;  ARGUMENTS:
                                        (0447) ;     none.
                                        (0448) ;
                                        (0449) ;  RETURNS:
                                        (0450) ;     none.
                                        (0451) ;
                                        (0452) ;  SIDE EFFECTS:
                                        (0453) ;    The A and X registers may be modified by this or future implementations
                                        (0454) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0455) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0456) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0457) ;    functions.
                                        (0458) ;          
                                        (0459) ;    Currently only the page pointer registers listed below are modified: 
                                        (0460) ;          CUR_PP
                                        (0461) ;
                                        (0462) ;  THEORY of OPERATION or PROCEDURE:
                                        (0463) ;     Clear the command buffer, command counter, and flag.
                                        (0464) ;
                                        (0465)  RX8_GPS_CmdReset:
                                        (0466) _RX8_GPS_CmdReset:
                                        (0467)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0468)    RAM_SETPAGE_CUR >RX8_GPS_aRxBuffer
0880: 55 B9 00 MOV   [NMEA_SHFTL+98],0x0(0469)    mov [RX8_GPS_aRxBuffer], 0x00
0883: 62 D0 02 MOV   REG[0xD0],0x2      
                                        (0470)    RAM_SETPAGE_CUR >ptrParam
0886: 55 00 00 MOV   [NMEA_pointer_gps+2],0x0(0471)    mov [ptrParam],0x00
0889: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0472)    RAM_SETPAGE_CUR >RX8_GPS_bRxCnt
088C: 55 03 00 MOV   [0x3],0x0          (0473)    mov [RX8_GPS_bRxCnt], 0x00
088F: 26 02 00 AND   [0x2],0x0          (0474)    and [RX8_GPS_fStatus], 0x00
                                        (0475)    RAM_EPILOGUE RAM_USE_CLASS_4
0892: 7F       RET                      (0476)    ret
0893: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0477) .ENDSECTION
                                        (0478) 
                                        (0479) .SECTION
                                        (0480) ;-----------------------------------------------------------------------------
                                        (0481) ;  FUNCTION NAME: RX8_GPS_bCmdCheck
                                        (0482) ;
                                        (0483) ;  DESCRIPTION:
                                        (0484) ;     Check to see if valid command in buffer.
                                        (0485) ;
                                        (0486) ;  ARGUMENTS:
                                        (0487) ;     none.
                                        (0488) ;
                                        (0489) ;  RETURNS:
                                        (0490) ;     BYTE  fStatus - Status of command receive buffer.
                                        (0491) ;                     Returns non-zero value in A if command is valid.
                                        (0492) ;
                                        (0493) ;  SIDE EFFECTS:
                                        (0494) ;    The A and X registers may be modified by this or future implementations
                                        (0495) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0496) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0497) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0498) ;    functions.
                                        (0499) ;          
                                        (0500) ;    Currently only the page pointer registers listed below are modified: 
                                        (0501) ;          CUR_PP
                                        (0502) ;
                                        (0503) ;  THEORY of OPERATION or PROCEDURE:
                                        (0504) ;     Read the status and control register.
                                        (0505) ;
                                        (0506)  RX8_GPS_bCmdCheck:
                                        (0507) _RX8_GPS_bCmdCheck:
                                        (0508)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0509)    RAM_SETPAGE_CUR >RX8_GPS_fStatus
0896: 51 02    MOV   A,[0x2]            (0510)    mov A,  [RX8_GPS_fStatus]
0898: 21 01    AND   A,0x1              (0511)    and A, RX8_GPS_RX_BUF_CMDTERM                 ; Mask off Command status
                                        (0512)    RAM_EPILOGUE RAM_USE_CLASS_4
089A: 7F       RET                      (0513)    ret
089B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0514) .ENDSECTION
                                        (0515) 
                                        (0516) .SECTION
                                        (0517) ;-----------------------------------------------------------------------------
                                        (0518) ;  FUNCTION NAME: RX8_GPS_bErrCheck
                                        (0519) ;
                                        (0520) ;  DESCRIPTION:
                                        (0521) ;     Check to see if an error has occured since last CmdReset
                                        (0522) ;
                                        (0523) ;  ARGUMENTS:
                                        (0524) ;     none.
                                        (0525) ;
                                        (0526) ;  RETURNS:
                                        (0527) ;     BYTE  fStatus - Status of command receive buffer.
                                        (0528) ;                     Returns non-zero value in A if command is valid.
                                        (0529) ;           0x80 => Parity Error
                                        (0530) ;           0x40 => OverRun Error
                                        (0531) ;           0x20 => Framing Error
                                        (0532) ;           0x10 => Software Buffer OverRun
                                        (0533) ;
                                        (0534) ;  SIDE EFFECTS:
                                        (0535) ;    The A and X registers may be modified by this or future implementations
                                        (0536) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0537) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0538) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0539) ;    functions.
                                        (0540) ;          
                                        (0541) ;    Currently only the page pointer registers listed below are modified: 
                                        (0542) ;          CUR_PP
                                        (0543) ;
                                        (0544) ;     Error Status is clear when read.
                                        (0545) ;
                                        (0546) ;  THEORY of OPERATION or PROCEDURE:
                                        (0547) ;     Read RX buffer error status and clear status
                                        (0548) ;
                                        (0549)  RX8_GPS_bErrCheck:
                                        (0550) _RX8_GPS_bErrCheck:
                                        (0551)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0552)    RAM_SETPAGE_CUR >RX8_GPS_fStatus
089E: 51 02    MOV   A,[0x2]            (0553)    mov A,  [RX8_GPS_fStatus]
08A0: 21 F0    AND   A,0xF0             (0554)    and A, RX8_GPS_RX_BUF_ERROR                   ; Mask off Error status
08A2: 26 02 0F AND   [0x2],0xF          (0555)    and [RX8_GPS_fStatus], ~RX8_GPS_RX_BUF_ERROR
                                        (0556)    RAM_EPILOGUE RAM_USE_CLASS_4
08A5: 7F       RET                      (0557)    ret
08A6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0558) .ENDSECTION
                                        (0559) 
                                        (0560) .SECTION
                                        (0561) ;-----------------------------------------------------------------------------
                                        (0562) ;  FUNCTION NAME: RX8_GPS_bCmdLength
                                        (0563) ;
                                        (0564) ;  DESCRIPTION:
                                        (0565) ;     Get length of command string
                                        (0566) ;
                                        (0567) ;  ARGUMENTS:
                                        (0568) ;     none.
                                        (0569) ;
                                        (0570) ;  RETURNS:
                                        (0571) ;     BYTE  bRxCnt    Returns the command length in A.
                                        (0572) ;
                                        (0573) ;  SIDE EFFECTS:
                                        (0574) ;    The A and X registers may be modified by this or future implementations
                                        (0575) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0576) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0577) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0578) ;    functions.
                                        (0579) ;          
                                        (0580) ;    Currently only the page pointer registers listed below are modified: 
                                        (0581) ;          CUR_PP
                                        (0582) ;
                                        (0583)  RX8_GPS_bCmdLength:
                                        (0584) _RX8_GPS_bCmdLength:
                                        (0585)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0586)    RAM_SETPAGE_CUR >RX8_GPS_bRxCnt
08A9: 51 03    MOV   A,[0x3]            (0587)    mov A,  [RX8_GPS_bRxCnt]
                                        (0588)    RAM_EPILOGUE RAM_USE_CLASS_4
08AB: 7F       RET                      (0589)    ret
08AC: 70 BF    AND   F,0xBF             
08AE: 62 D0 02 MOV   REG[0xD0],0x2      
08B1: 62 D3 00 MOV   REG[0xD3],0x0      
                                        (0590) .ENDSECTION
                                        (0591) 
                                        (0592) .SECTION
                                        (0593) ;-----------------------------------------------------------------------------
                                        (0594) ;  FUNCTION NAME: RX8_GPS_szGetParam
                                        (0595) ;
                                        (0596) ;  DESCRIPTION:
                                        (0597) ;      Return next parameter from UART Rx buffer
                                        (0598) ;
                                        (0599) ;
                                        (0600) ;  ARGUMENTS:  none
                                        (0601) ;
                                        (0602) ;  RETURNS:
                                        (0603) ;     A => MSB of parameter address
                                        (0604) ;     X => LSB of parameter address
                                        (0605) ;
                                        (0606) ;  SIDE EFFECTS:
                                        (0607) ;    The A and X registers may be modified by this or future implementations
                                        (0608) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0609) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0610) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0611) ;    functions.
                                        (0612) ;          
                                        (0613) ;    Currently only the page pointer registers listed below are modified:
                                        (0614) ;          CUR_PP
                                        (0615) ;          IDX_PP
                                        (0616) ;
                                        (0617) ;     The receive string is modified by placing Null characters at the end
                                        (0618) ;     of each parameter as they are recovered.
                                        (0619) ;
                                        (0620) ;  THEORY OF OPERATION:
                                        (0621) ;     This function is a stateful generator of addresses to the "parameters"
                                        (0622) ;     of an input "Command". It scans the (optional) input buffer and breaks
                                        (0623) ;     each lexically distinct element into a null-terminated string by replacing
                                        (0624) ;     delimiters with nulls, as appropriate. The state of the generator is 
                                        (0625) ;     maintained by the private variable ptrParam, which is a buffer-relative
                                        (0626) ;     offset. The generator is initialized by a call to the function
                                        (0627) ;     RX8_GPS_CmdReset which resets the entire buffer to the 'empty'
                                        (0628) ;     state. Typically this function, RX8_GPS_szGetParam, is
                                        (0629) ;     not called until the buffer has been loaded with an entire command
                                        (0630) ;     (See RX8_GPS_bCmdCheck).
                                        (0631) ;
                                        (0632) ;     Note, there is no special distinction between the "command" and the 
                                        (0633) ;     "parameters". The first non-delimiter character of the buffer---the first
                                        (0634) ;     character of the "command"---is also, for the purposes of this function,
                                        (0635) ;     the first "parameter" to which it returns an address.
                                        (0636) ;
                                        (0637) ;     The value of a delimiter (commonly an ascii space, 0x20 and decimal 32)
                                        (0638) ;     is determined at configuration time by a user module parameter.
                                        (0639) ;
                                        (0640)  RX8_GPS_szGetParam:
                                        (0641) _RX8_GPS_szGetParam:
                                        (0642)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0643)    RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0644)    RAM_SETPAGE_CUR >ptrParam
                                        (0645)    RAM_SETPAGE_IDX >RX8_GPS_aRxBuffer
                                        (0646) 
08B4: 50 B9    MOV   A,0xB9             (0647)    mov  A, <RX8_GPS_aRxBuffer               ; Get address to receive buffer
08B6: 02 00    ADD   A,[NMEA_pointer_gps+2](0648)    add  A, [ptrParam]                      ; Add string offset
08B8: 5C       MOV   X,A                (0649)    mov  X,A
                                        (0650) 
08B9: 52 00    MOV   A,[X+0]            (0651)    mov  A,[X]                              ; Get character pointed by X
08BB: B0 04    JNZ   0x08C0             (0652)    jnz  .CheckForDelim                     ; Check for Null character
08BD: 10       PUSH  X                  (0653)    push X                                  ; Save LSB of current pointer
08BE: 80 33    JMP   0x08F2             (0654)    jmp  .End_GetNextParam
                                        (0655) 
                                        (0656)                                             ; Check for delimiter and keep looping until
                                        (0657)                                             ; all leading delimiters have been found.
                                        (0658) .CheckForDelim:
08C0: 39 20    CMP   A,0x20             (0659)     cmp  A,RX8_GPS_DELIMITER                ; Check if we have a delimiter
08C2: B0 11    JNZ   0x08D4             (0660)     jnz  .ParamStartFound
08C4: 75       INC   X                  (0661)     inc  X                                  ; Increment both current pointer and
08C5: 76 00    INC   [NMEA_pointer_gps+2](0662)     inc  [ptrParam]                         ; stored pointer.
08C7: 52 00    MOV   A,[X+0]            (0663)     mov  A,[X]                              ; Get character pointed by X
08C9: 3C 00 0F CMP   [NMEA_pointer_gps+2],0xF(0664)     cmp  [ptrParam],(RX8_GPS_RX_BUFFER_SIZE -1)  ; Check if we are at the end of buffer
08CC: BF F3    JNZ   0x08C0             (0665)     jnz  .CheckForDelim
                                        (0666)                                             ; End of string found
                                        (0667) .EndOfString:
08CE: 10       PUSH  X                  (0668)     push X                                  ; Save ptr
                                        (0669) .TerminateString:
08CF: 56 00 00 MOV   [X+0],0x0          (0670)     mov  [X],0x00                           ; Make sure string is zero
08D2: 80 1F    JMP   0x08F2             (0671)     jmp  .End_GetNextParam
                                        (0672) 
                                        (0673) .ParamStartFound:
08D4: 10       PUSH  X                  (0674)     push X                                  ; Beginning of parameter found, save pointer
                                        (0675) 
                                        (0676) .ParamLoop:
                                        (0677)                                             ; Now loop until end of parameter found.
08D5: 75       INC   X                  (0678)     inc  X                                  ; Advance pointers.
08D6: 76 00    INC   [NMEA_pointer_gps+2](0679)     inc  [ptrParam]
08D8: 3C 00 0F CMP   [NMEA_pointer_gps+2],0xF(0680)     cmp  [ptrParam],(RX8_GPS_RX_BUFFER_SIZE -1)  ; Check if we are at the end of buffer
08DB: AF F3    JZ    0x08CF             (0681)     jz   .TerminateString
08DD: 52 00    MOV   A,[X+0]            (0682)     mov  A,[X]                              ; Get next character
08DF: A0 12    JZ    0x08F2             (0683)     jz   .End_GetNextParam
08E1: 39 20    CMP   A,0x20             (0684)     cmp  A,RX8_GPS_DELIMITER                ; Check if we have a delimiter
08E3: BF F1    JNZ   0x08D5             (0685)     jnz  .ParamLoop                         ; Still no delimiter, loop again
                                        (0686) 
08E5: 56 00 00 MOV   [X+0],0x0          (0687)     mov  [X],0x00                           ; Replace delimiter with null for end of substring
08E8: 76 00    INC   [NMEA_pointer_gps+2](0688)     inc  [ptrParam]
08EA: 3C 00 0F CMP   [NMEA_pointer_gps+2],0xF(0689)     cmp  [ptrParam],(RX8_GPS_RX_BUFFER_SIZE -1)  ; Check if we are at the end of buffer
08ED: B0 04    JNZ   0x08F2             (0690)     jnz  .End_GetNextParam                  ; If not end of string leave
08EF: 55 00 0F MOV   [NMEA_pointer_gps+2],0xF(0691)     mov  [ptrParam],(RX8_GPS_RX_BUFFER_SIZE -1)  ; Reset pointer to end of string.
                                        (0692) 
                                        (0693) 
                                        (0694) .End_GetNextParam:
08F2: 20       POP   X                  (0695)    pop  X
08F3: 10       PUSH  X                  (0696)    push X
08F4: 3D 00 00 CMP   [X+0],0x0          (0697)    cmp  [X],0x00
08F7: B0 0A    JNZ   0x0902             (0698)    jnz  .NotNullString
08F9: 20       POP   X                  (0699)    pop  X
08FA: 57 00    MOV   X,0x0              (0700)    mov  X,0x00
08FC: 5B       MOV   A,X                (0701)    mov  A,X
08FD: 70 3F    AND   F,0x3F             
08FF: 71 C0    OR    F,0xC0             
                                        (0702)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0703)    RAM_EPILOGUE RAM_USE_CLASS_4
0901: 7F       RET                      (0704)    ret
                                        (0705) 
                                        (0706) .NotNullString:
0902: 20       POP   X                  (0707)    pop  X
0903: 50 00    MOV   A,0x0              (0708)    mov  A,>RX8_GPS_aRxBuffer                     ; Return pointer
0905: 70 3F    AND   F,0x3F             
0907: 71 C0    OR    F,0xC0             
                                        (0709)    RAM_EPILOGUE RAM_USE_CLASS_3
                                        (0710)    RAM_EPILOGUE RAM_USE_CLASS_4
0909: 7F       RET                      (0711)    ret
090A: 62 D0 02 MOV   REG[0xD0],0x2      
                                        (0712) .ENDSECTION
                                        (0713) 
                                        (0714) .SECTION
                                        (0715) ;-----------------------------------------------------------------------------
                                        (0716) ;  FUNCTION NAME: RX8_GPS_szGetRestOfParams
                                        (0717) ;
                                        (0718) ;  DESCRIPTION:
                                        (0719) ;      Return the rest of the UART RX buffer
                                        (0720) ;
                                        (0721) ;
                                        (0722) ;  ARGUMENTS:  none
                                        (0723) ;
                                        (0724) ;  RETURNS:
                                        (0725) ;     A => MSB of parameter
                                        (0726) ;     X => LSB of parameter
                                        (0727) ;
                                        (0728) ;  SIDE EFFECTS:
                                        (0729) ;    The A and X registers may be modified by this or future implementations
                                        (0730) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0731) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0732) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0733) ;    functions.
                                        (0734) ;          
                                        (0735) ;    Currently only the page pointer registers listed below are modified: 
                                        (0736) ;          CUR_PP
                                        (0737) ;
                                        (0738)  RX8_GPS_szGetRestOfParams:
                                        (0739) _RX8_GPS_szGetRestOfParams:
                                        (0740)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0741)    RAM_SETPAGE_CUR >ptrParam
                                        (0742) 
090D: 50 B9    MOV   A,0xB9             (0743)     mov  A, <RX8_GPS_aRxBuffer              ; Get address to receive buffer
090F: 02 00    ADD   A,[NMEA_pointer_gps+2](0744)     add  A, [ptrParam]                      ; Add string offset
0911: 5C       MOV   X,A                (0745)     mov  X,A
0912: 50 00    MOV   A,0x0              (0746)     mov  A,>RX8_GPS_aRxBuffer               ; Return pointer
                                        (0747) 
                                        (0748)    RAM_EPILOGUE RAM_USE_CLASS_4
0914: 7F       RET                      (0749)     ret
                                        (0750) .ENDSECTION
                                        (0751) 
                                        (0752) ENDIF
                                        (0753) ; End of File RX8_GPS.asm
FILE: lib\rtcint.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: RTCINT.asm
                                        (0004) ;;   Version: 1.10, Updated on 2015/3/4 at 22:19:15
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: RTC Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "RTC.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _RTC_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _RTC_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _RTC_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0915: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file RTCINT.asm
FILE: lib\rtc.asm                       (0001) ;;*****************************************************************************
0916: 71 10    OR    F,0x10             (0002) ;;*****************************************************************************
0918: 43 A7 20 OR    REG[0xA7],0x20     
091B: 70 EF    AND   F,0xEF             
091D: 43 DE 08 OR    REG[0xDE],0x8      
                                        (0003) ;;  FILENAME: RTC.asm
                                        (0004) ;;   Version: 1.10, Updated on 2015/3/4 at 22:19:15
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: RTC User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "RTC.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  RTC_EnableInt
                                        (0030) export _RTC_EnableInt
                                        (0031) export  RTC_DisableInt
                                        (0032) export _RTC_DisableInt
                                        (0033) export  RTC_ClearInt
                                        (0034) export _RTC_ClearInt
                                        (0035) export  RTC_Start
                                        (0036) export _RTC_Start
                                        (0037) export  RTC_Stop
                                        (0038) export _RTC_Stop
                                        (0039) export  RTC_SetIntPeriod
                                        (0040) export _RTC_SetIntPeriod
                                        (0041) export  RTC_bReadSecond
                                        (0042) export _RTC_bReadSecond
                                        (0043) export  RTC_bReadMinute
                                        (0044) export _RTC_bReadMinute
                                        (0045) export  RTC_bReadHour
                                        (0046) export _RTC_bReadHour
                                        (0047) export  RTC_SetSecond
                                        (0048) export _RTC_SetSecond
                                        (0049) export  RTC_SetMinute
                                        (0050) export _RTC_SetMinute
                                        (0051) export  RTC_SetHour
                                        (0052) export _RTC_SetHour
                                        (0053) 
                                        (0054) 
                                        (0055) ;-----------------------------------------------
                                        (0056) ;  EQUATES
                                        (0057) ;-----------------------------------------------
                                        (0058) 
                                        (0059) ;  Time validation constants
                                        (0060) SEC_MAX_IN_BSD:           equ 60h
                                        (0061) MIN_MAX_IN_BSD:           equ 60h
                                        (0062) HOUR_MAX_IN_BSD:          equ 24h
                                        (0063) 
                                        (0064) ;  Valid parameter range flag constants
                                        (0065) VALID_RANGE_INPUT:        equ 01h
                                        (0066) INVALID_RANGE_INPUT:      equ 00h
                                        (0067) 
                                        (0068) LOW_TETRAD_MASK:          equ 0Fh
                                        (0069) MIN_INVALID_BSD_VALUE:    equ 0Ah
                                        (0070) 
                                        (0071) AREA InterruptRAM (RAM,REL,CON)
                                        (0072) 
                                        (0073) ;-----------------------------------------------
                                        (0074) ;  Constant Definitions
                                        (0075) ;-----------------------------------------------
                                        (0076) 
                                        (0077) 
                                        (0078) ;-----------------------------------------------
                                        (0079) ; Variable Allocation
                                        (0080) ;-----------------------------------------------
                                        (0081) 
                                        (0082) AREA UserModules (ROM, REL)
                                        (0083) 
                                        (0084) .SECTION
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;  FUNCTION NAME: RTC_EnableInt
                                        (0087) ;
                                        (0088) ;  DESCRIPTION:
                                        (0089) ;     Enables this RTC's interrupt by setting the interrupt enable mask bit
                                        (0090) ;     associated with this User Module. This function has no effect until and
                                        (0091) ;     unless the global interrupts are enabled (for example by using the
                                        (0092) ;     macro M8C_EnableGInt).
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ;
                                        (0095) ;  ARGUMENTS:    None.
                                        (0096) ;  RETURNS:      None.
                                        (0097) ;  SIDE EFFECTS: 
                                        (0098) ;    The A and X registers may be modified by this or future implementations
                                        (0099) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0100) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0101) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0102) ;    functions.
                                        (0103) ;
                                        (0104)  RTC_EnableInt:
                                        (0105) _RTC_EnableInt:
                                        (0106)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0107)    RTC_EnableInt_M
                                        (0108)    RAM_EPILOGUE RAM_USE_CLASS_1
0920: 7F       RET                      (0109)    ret
0921: 71 10    OR    F,0x10             
0923: 41 A7 DF AND   REG[0xA7],0xDF     
0926: 70 EF    AND   F,0xEF             
0928: 41 DE F7 AND   REG[0xDE],0xF7     
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) 
                                        (0114) .SECTION
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;  FUNCTION NAME: RTC_DisableInt
                                        (0117) ;
                                        (0118) ;  DESCRIPTION:
                                        (0119) ;     Disables this RTC's interrupt by clearing the interrupt enable
                                        (0120) ;     mask bit associated with this User Module.
                                        (0121) ;-----------------------------------------------------------------------------
                                        (0122) ;
                                        (0123) ;  ARGUMENTS:    None
                                        (0124) ;  RETURNS:      None
                                        (0125) ;  SIDE EFFECTS: 
                                        (0126) ;    The A and X registers may be modified by this or future implementations
                                        (0127) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0128) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0129) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0130) ;    functions.
                                        (0131) ;
                                        (0132)  RTC_DisableInt:
                                        (0133) _RTC_DisableInt:
                                        (0134)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0135)    RTC_DisableInt_M
                                        (0136)    RAM_EPILOGUE RAM_USE_CLASS_1
092B: 7F       RET                      (0137)    ret
092C: 62 DD F7 MOV   REG[0xDD],0xF7     
                                        (0138) 
                                        (0139) .ENDSECTION
                                        (0140) 
                                        (0141) .SECTION
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;  FUNCTION NAME: RTC_ClearInt
                                        (0144) ;
                                        (0145) ;  DESCRIPTION:
                                        (0146) ;
                                        (0147) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0148) ;           M8C global macro: M8C_EnableGInt
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;
                                        (0152) ;  ARGUMENTS:  none
                                        (0153) ;
                                        (0154) ;  RETURNS:  none
                                        (0155) ;
                                        (0156) ;  SIDE EFFECTS:
                                        (0157) ;    The A and X registers may be modified by this or future implementations
                                        (0158) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0159) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0160) ;    responsibility to perserve their values across calls to fastcall16
                                        (0161) ;    functions.
                                        (0162) ;
                                        (0163) ;  THEORY of OPERATION or PROCEDURE:
                                        (0164) ;     Sets the specific user module interrupt enable mask bit.
                                        (0165) ;
                                        (0166)  RTC_ClearInt:
                                        (0167) _RTC_ClearInt:
                                        (0168)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0169)    M8C_ClearIntFlag RTC_CLR_INT_REG, RTC_INT_RTC_MASK
                                        (0170)    RAM_EPILOGUE RAM_USE_CLASS_1
092F: 7F       RET                      (0171)    ret
0930: 71 10    OR    F,0x10             
0932: 43 A7 01 OR    REG[0xA7],0x1      
0935: 70 EF    AND   F,0xEF             
                                        (0172) .ENDSECTION
                                        (0173) 
                                        (0174) .SECTION
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) ;  FUNCTION NAME: RTC_Start
                                        (0177) ;
                                        (0178) ;  DESCRIPTION:
                                        (0179) ;     Enable the RTC UM to start the real timer clock. 
                                        (0180) ;     Set the start bit in RTC control register
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS:    None
                                        (0184) ;  RETURNS:      None
                                        (0185) ;  SIDE EFFECTS: 
                                        (0186) ;    The A and X registers may be modified by this or future implementations
                                        (0187) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0188) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0189) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0190) ;    functions.
                                        (0191) ;
                                        (0192)  RTC_Start:
                                        (0193) _RTC_Start:
                                        (0194)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0195)    M8C_SetBank1
                                        (0196)    RTC_Start_M
                                        (0197)    M8C_SetBank0
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_1
0937: 7F       RET                      (0199)    ret
0938: 71 10    OR    F,0x10             
093A: 41 A7 FE AND   REG[0xA7],0xFE     
093D: 70 EF    AND   F,0xEF             
                                        (0200) 
                                        (0201) .ENDSECTION
                                        (0202) 
                                        (0203) 
                                        (0204) .SECTION
                                        (0205) ;-----------------------------------------------------------------------------
                                        (0206) ;  FUNCTION NAME: RTC_Stop
                                        (0207) ;
                                        (0208) ;  DESCRIPTION:
                                        (0209) ;     Disable the RTC UM to stop the real timer clock 
                                        (0210) ;      by clearing the start bit in the Control
                                        (0211) ;     register.
                                        (0212) ;-----------------------------------------------------------------------------
                                        (0213) ;
                                        (0214) ;  ARGUMENTS:    None
                                        (0215) ;  RETURNS:      None
                                        (0216) ;  SIDE EFFECTS: 
                                        (0217) ;    The A and X registers may be modified by this or future implementations
                                        (0218) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0219) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0220) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0221) ;    functions.
                                        (0222) ;
                                        (0223)  RTC_Stop:
                                        (0224) _RTC_Stop:
                                        (0225)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0226)    M8C_SetBank1
                                        (0227)    RTC_Stop_M
                                        (0228)    M8C_SetBank0
                                        (0229)    RAM_EPILOGUE RAM_USE_CLASS_1
093F: 7F       RET                      (0230)    ret
                                        (0231) 
                                        (0232) .ENDSECTION
                                        (0233) 
                                        (0234) 
                                        (0235) .SECTION
                                        (0236) ;-----------------------------------------------------------------------------
                                        (0237) ;  FUNCTION NAME: RTC_SetIntPeriod
                                        (0238) ;
                                        (0239) ;  DESCRIPTION:
                                        (0240) ;    Configure the interrupt period of RTC module. 
                                        (0241) ;    The period can be 1 second, 1 minute, 1 hour or 1 day.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS: fastcall16 void SetIntPeriod (passed in A)
                                        (0245) ;  RETURNS:   None
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  RTC_SetIntPeriod:
                                        (0254) _RTC_SetIntPeriod:
                                        (0255)    RAM_PROLOGUE RAM_USE_CLASS_2
0940: 21 0C    AND   A,0xC              (0256)    and   A, RTC_INT_SEL_MASK   
0942: 4F       MOV   X,SP               (0257)    mov   X, SP
0943: 08       PUSH  A                  (0258)    push  A                                  ; store value in stack
0944: 71 10    OR    F,0x10             
                                        (0259)    M8C_SetBank1
0946: 5D A7    MOV   A,REG[0xA7]        (0260)    mov   A, reg[RTC_RTCCR_REG]  ; get register value
0948: 21 F3    AND   A,0xF3             (0261)    and   A, ~RTC_INT_SEL_MASK   ; clear INT_SEL bits
094A: 2B 00    OR    A,[X+0]            (0262)    or    A, [X]                              ; set INT_SEL bits
094C: 60 A7    MOV   REG[0xA7],A        (0263)    mov   reg[RTC_RTCCR_REG], A  ; set new register value
094E: 70 EF    AND   F,0xEF             
                                        (0264)    M8C_SetBank0
0950: 18       POP   A                  (0265)    pop   A
0951: 70 3F    AND   F,0x3F             
0953: 71 C0    OR    F,0xC0             
                                        (0266)    RAM_EPILOGUE RAM_USE_CLASS_2
0955: 7F       RET                      (0267)    ret
0956: 71 10    OR    F,0x10             
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) 
                                        (0272) .SECTION
                                        (0273) ;-----------------------------------------------------------------------------
                                        (0274) ;  FUNCTION NAME: RTC_bReadSecond
                                        (0275) ;
                                        (0276) ;  DESCRIPTION:
                                        (0277) ;     This function will access the data in seconds register at address 1A6h.
                                        (0278) ;
                                        (0279) ;-----------------------------------------------------------------------------
                                        (0280) ;
                                        (0281) ;  ARGUMENTS:   None
                                        (0282) ;  RETURNS:     fastcall16 BYTE bReadSecond (void)
                                        (0283) ;  SIDE EFFECTS: 
                                        (0284) ;    The A and X registers may be modified by this or future implementations
                                        (0285) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0286) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0287) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0288) ;    functions.
                                        (0289) ;
                                        (0290)  RTC_bReadSecond:
                                        (0291) _RTC_bReadSecond:
                                        (0292)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0293)    M8C_SetBank1
0958: 5D A6    MOV   A,REG[0xA6]        (0294)    mov   A, reg[RTC_RTCS_REG] ; Read second value in BCD format
095A: 70 EF    AND   F,0xEF             
                                        (0295)    M8C_SetBank0
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
095C: 7F       RET                      (0297)    ret
095D: 71 10    OR    F,0x10             
                                        (0298) 
                                        (0299) .ENDSECTION
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: RTC_bReadMinute
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     This function will access the data in minutes register at address 1A5h.
                                        (0307) ;
                                        (0308) ;-----------------------------------------------------------------------------
                                        (0309) ;
                                        (0310) ;  ARGUMENTS:   None
                                        (0311) ;  RETURNS:     fastcall16 BYTE bReadMinute (void)
                                        (0312) ;  SIDE EFFECTS: 
                                        (0313) ;    The A and X registers may be modified by this or future implementations
                                        (0314) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0315) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0316) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0317) ;    functions.
                                        (0318) ;
                                        (0319)  RTC_bReadMinute:
                                        (0320) _RTC_bReadMinute:
                                        (0321)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0322)    M8C_SetBank1
095F: 5D A5    MOV   A,REG[0xA5]        (0323)    mov   A, reg[RTC_RTCM_REG]   ; Read minute value in BCD format
0961: 70 EF    AND   F,0xEF             
                                        (0324)    M8C_SetBank0
                                        (0325)    RAM_EPILOGUE RAM_USE_CLASS_1
0963: 7F       RET                      (0326)    ret
0964: 71 10    OR    F,0x10             
                                        (0327) 
                                        (0328) .ENDSECTION
                                        (0329) 
                                        (0330) .SECTION
                                        (0331) ;-----------------------------------------------------------------------------
                                        (0332) ;  FUNCTION NAME: RTC_bReadHour
                                        (0333) ;
                                        (0334) ;  DESCRIPTION:
                                        (0335) ;     This function will access the data in hours register at address 1A4h.
                                        (0336) ;
                                        (0337) ;-----------------------------------------------------------------------------
                                        (0338) ;
                                        (0339) ;  ARGUMENTS:   None
                                        (0340) ;  RETURNS:     fastcall16 BYTE bReadHour(void)
                                        (0341) ;  SIDE EFFECTS: 
                                        (0342) ;    The A and X registers may be modified by this or future implementations
                                        (0343) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0344) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0345) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0346) ;    functions.
                                        (0347) ;
                                        (0348)  RTC_bReadHour:
                                        (0349) _RTC_bReadHour:
                                        (0350)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0351)    M8C_SetBank1
0966: 5D A4    MOV   A,REG[0xA4]        (0352)    mov  A,reg[RTC_RTCH_REG]  ; Read hour value in BCD format
0968: 70 EF    AND   F,0xEF             
                                        (0353)    M8C_SetBank0
                                        (0354)    RAM_EPILOGUE RAM_USE_CLASS_1
096A: 7F       RET                      (0355)    ret
                                        (0356) 
                                        (0357) .ENDSECTION
                                        (0358) 
                                        (0359) .SECTION
                                        (0360) ;-----------------------------------------------------------------------------
                                        (0361) ;  FUNCTION NAME: RTC_SetSecond
                                        (0362) ;
                                        (0363) ;  DESCRIPTION:
                                        (0364) ;    This function will set the second valuein seconds register at address 1A6h.
                                        (0365) ;    The legal range for writing the second value is 0 to 59. This data must be in BCD format.
                                        (0366) ;
                                        (0367) ;-----------------------------------------------------------------------------
                                        (0368) ;
                                        (0369) ;  ARGUMENTS:    fastcall16 void SetSecond(passed in A)
                                        (0370) ;  RETURNS:    None
                                        (0371) ;  SIDE EFFECTS: 
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;
                                        (0378)  RTC_SetSecond:
                                        (0379) _RTC_SetSecond:
                                        (0380)    RAM_PROLOGUE RAM_USE_CLASS_1
096B: 39 60    CMP   A,0x60             (0381)    cmp   A, SEC_MAX_IN_BSD                   ; the sec value (in BCD) validation
096D: D0 12    JNC   0x0980             (0382)    jnc   .SetSec_skip                        ; skip sec Reg Update if BCD sec is invalid (>0x59)
096F: 08       PUSH  A                  (0383)    push  A
0970: 21 0F    AND   A,0xF              (0384)    and   A, LOW_TETRAD_MASK
0972: 39 0A    CMP   A,0xA              (0385)    cmp   A, MIN_INVALID_BSD_VALUE
0974: 18       POP   A                  (0386)    pop   A
0975: D0 0A    JNC   0x0980             (0387)    jnc   .SetSec_skip                        ; skip sec Reg Update if sec is not BCD 
0977: 71 10    OR    F,0x10             
                                        (0388)    M8C_SetBank1
0979: 60 A6    MOV   REG[0xA6],A        (0389)    mov   reg[RTC_RTCS_REG], A   ; Set new second value (in BCD)
097B: 70 EF    AND   F,0xEF             
                                        (0390)    M8C_SetBank0
097D: 50 01    MOV   A,0x1              (0391)    mov   A, VALID_RANGE_INPUT                ; Set Flag to Valid
                                        (0392)    RAM_EPILOGUE RAM_USE_CLASS_1   
097F: 7F       RET                      (0393)    ret
                                        (0394) .SetSec_skip:
0980: 50 00    MOV   A,0x0              (0395)    mov   A, INVALID_RANGE_INPUT              ; Set Flag to Invalid
                                        (0396)    RAM_EPILOGUE RAM_USE_CLASS_1
0982: 7F       RET                      (0397)    ret
                                        (0398) .ENDSECTION
                                        (0399) 
                                        (0400) .SECTION
                                        (0401) ;-----------------------------------------------------------------------------
                                        (0402) ;  FUNCTION NAME: RTC_SetMinute
                                        (0403) ;
                                        (0404) ;  DESCRIPTION:
                                        (0405) ;    This function will set the minute value in minute register at address 1A5h.
                                        (0406) ;    The legal range for writing the minute value is 0 to 59. This data must be in BCD format.
                                        (0407) ;
                                        (0408) ;-----------------------------------------------------------------------------
                                        (0409) ;
                                        (0410) ;  ARGUMENTS:    fastcall16 void SetMinute(passed in A)
                                        (0411) ;  RETURNS:    None
                                        (0412) ;  SIDE EFFECTS: 
                                        (0413) ;    The A and X registers may be modified by this or future implementations
                                        (0414) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0415) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0416) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0417) ;    functions.
                                        (0418) ;
                                        (0419)  RTC_SetMinute:
                                        (0420) _RTC_SetMinute:
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0983: 39 60    CMP   A,0x60             (0422)    cmp   A, MIN_MAX_IN_BSD                   ; the minute value (in BCD) validation
0985: D0 12    JNC   0x0998             (0423)    jnc   .SetMin_skip                        ; skip minute Reg Update if BCD minute is invalid (>0x59)
0987: 08       PUSH  A                  (0424)    push  A
0988: 21 0F    AND   A,0xF              (0425)    and   A, LOW_TETRAD_MASK
098A: 39 0A    CMP   A,0xA              (0426)    cmp   A, MIN_INVALID_BSD_VALUE
098C: 18       POP   A                  (0427)    pop   A
098D: D0 0A    JNC   0x0998             (0428)    jnc   .SetMin_skip                        ; skip sec Reg Update if minute is not BCD 
098F: 71 10    OR    F,0x10             
                                        (0429)    M8C_SetBank1
0991: 60 A5    MOV   REG[0xA5],A        (0430)    mov   reg[RTC_RTCM_REG], A   ; Set new minute value (in BCD)
0993: 70 EF    AND   F,0xEF             
                                        (0431)    M8C_SetBank0
0995: 50 01    MOV   A,0x1              (0432)    mov   A, VALID_RANGE_INPUT                ; Set Flag to Valid
                                        (0433)    RAM_EPILOGUE RAM_USE_CLASS_1   
0997: 7F       RET                      (0434)    ret
                                        (0435) .SetMin_skip:
0998: 50 00    MOV   A,0x0              (0436)    mov   A, INVALID_RANGE_INPUT              ; Set Flag to Invalid
                                        (0437)    RAM_EPILOGUE RAM_USE_CLASS_1
099A: 7F       RET                      (0438)    ret
                                        (0439) 
                                        (0440) .ENDSECTION
                                        (0441) 
                                        (0442) .SECTION
                                        (0443) ;-----------------------------------------------------------------------------
                                        (0444) ;  FUNCTION NAME: RTC_SetHour
                                        (0445) ;
                                        (0446) ;  DESCRIPTION:
                                        (0447) ;    This function will set the hour value in hour register at address 1A4h.
                                        (0448) ;    The legal range for writing the hour value is 0 to 23. This data must be in BCD format.
                                        (0449) ;
                                        (0450) ;-----------------------------------------------------------------------------
                                        (0451) ;
                                        (0452) ;  ARGUMENTS:    fastcall16 void SetHour(passed in A)
                                        (0453) ;  RETURNS:    None
                                        (0454) ;  SIDE EFFECTS: 
                                        (0455) ;    The A and X registers may be modified by this or future implementations
                                        (0456) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0457) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0458) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0459) ;    functions.
                                        (0460) ;
                                        (0461)  RTC_SetHour:
                                        (0462) _RTC_SetHour:
                                        (0463)    RAM_PROLOGUE RAM_USE_CLASS_1
099B: 39 24    CMP   A,0x24             (0464)    cmp   A, HOUR_MAX_IN_BSD                  ; the hour value (in BCD) validation
099D: D0 12    JNC   0x09B0             (0465)    jnc   .SetHour_skip                       ; skip hour Reg Update if BCD hour is invalid (>0x59)
099F: 08       PUSH  A                  (0466)    push  A
09A0: 21 0F    AND   A,0xF              (0467)    and   A, LOW_TETRAD_MASK
09A2: 39 0A    CMP   A,0xA              (0468)    cmp   A, MIN_INVALID_BSD_VALUE
09A4: 18       POP   A                  (0469)    pop   A
09A5: D0 0A    JNC   0x09B0             (0470)    jnc   .SetHour_skip                        ; skip sec Reg Update if hour is not BCD 
09A7: 71 10    OR    F,0x10             
                                        (0471)    M8C_SetBank1
09A9: 60 A4    MOV   REG[0xA4],A        (0472)    mov   reg[RTC_RTCH_REG], A   ; Set new hour value (in BCD)
09AB: 70 EF    AND   F,0xEF             
                                        (0473)    M8C_SetBank0
09AD: 50 01    MOV   A,0x1              (0474)    mov   A, VALID_RANGE_INPUT                ; Set Flag to Valid
                                        (0475)    RAM_EPILOGUE RAM_USE_CLASS_1   
09AF: 7F       RET                      (0476)    ret
                                        (0477) .SetHour_skip:
09B0: 50 00    MOV   A,0x0              (0478)    mov   A, INVALID_RANGE_INPUT              ; Set Flag to Invalid
                                        (0479)    RAM_EPILOGUE RAM_USE_CLASS_1
09B2: 7F       RET                      (0480)    ret
                                        (0481) 
                                        (0482) .ENDSECTION
                                        (0483) ; End of File RTC.asm
FILE: lib\pwm16_ch1int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_CH1INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM16_CH1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM16_CH1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM16_CH1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM16_CH1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
09B3: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM16_CH1INT.asm
FILE: lib\pwm16_ch1.asm                 (0001) ;;*****************************************************************************
09B4: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_CH1.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM16_CH1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM16_CH1_EnableInt
                                        (0030) export _PWM16_CH1_EnableInt
                                        (0031) export  PWM16_CH1_DisableInt
                                        (0032) export _PWM16_CH1_DisableInt
                                        (0033) export  PWM16_CH1_Start
                                        (0034) export _PWM16_CH1_Start
                                        (0035) export  PWM16_CH1_Stop
                                        (0036) export _PWM16_CH1_Stop
                                        (0037) export  PWM16_CH1_WritePeriod
                                        (0038) export _PWM16_CH1_WritePeriod
                                        (0039) export  PWM16_CH1_WritePulseWidth
                                        (0040) export _PWM16_CH1_WritePulseWidth
                                        (0041) export  PWM16_CH1_wReadPulseWidth
                                        (0042) export _PWM16_CH1_wReadPulseWidth
                                        (0043) export  PWM16_CH1_wReadCounter
                                        (0044) export _PWM16_CH1_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM16_CH1_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM16_CH1_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM16_CH1_ReadCounter       ; deprecated
                                        (0051) export _wPWM16_CH1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA fitolamp_slave_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM16_CH1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM16_CH1_EnableInt:
                                        (0091) _PWM16_CH1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM16_CH1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
09B7: 7F       RET                      (0095)    ret
09B8: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM16_CH1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM16_CH1_DisableInt:
                                        (0119) _PWM16_CH1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM16_CH1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
09BB: 7F       RET                      (0123)    ret
09BC: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM16_CH1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM16_CH1_Start:
                                        (0148) _PWM16_CH1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM16_CH1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
09BF: 7F       RET                      (0152)    ret
09C0: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM16_CH1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM16_CH1_Stop:
                                        (0176) _PWM16_CH1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM16_CH1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
09C3: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM16_CH1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM16_CH1_WritePeriod:
                                        (0206) _PWM16_CH1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
09C4: 60 29    MOV   REG[0x29],A        (0208)    mov   reg[PWM16_CH1_PERIOD_LSB_REG], A
09C6: 5B       MOV   A,X                (0209)    mov   A, X
09C7: 60 2D    MOV   REG[0x2D],A        (0210)    mov   reg[PWM16_CH1_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
09C9: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM16_CH1_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM16_CH1_WritePulseWidth:
                                        (0235) _PWM16_CH1_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
09CA: 60 2A    MOV   REG[0x2A],A        (0237)    mov   reg[PWM16_CH1_COMPARE_LSB_REG], A
09CC: 5B       MOV   A,X                (0238)    mov   A, X
09CD: 60 2E    MOV   REG[0x2E],A        (0239)    mov   reg[PWM16_CH1_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
09CF: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM16_CH1_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM16_CH1_wReadPulseWidth:
                                        (0264) _PWM16_CH1_wReadPulseWidth:
                                        (0265)  wPWM16_CH1_ReadPulseWidth:                      ; this name deprecated
                                        (0266) _wPWM16_CH1_ReadPulseWidth:                      ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
09D0: 5D 2E    MOV   A,REG[0x2E]        (0268)    mov   A, reg[PWM16_CH1_COMPARE_MSB_REG]
09D2: 5C       MOV   X,A                (0269)    mov   X, A
09D3: 5D 2A    MOV   A,REG[0x2A]        (0270)    mov   A, reg[PWM16_CH1_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
09D5: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM16_CH1_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM16_CH1_wReadCounter:
                                        (0299) _PWM16_CH1_wReadCounter:
                                        (0300)  wPWM16_CH1_ReadCounter:                         ; this name deprecated
                                        (0301) _wPWM16_CH1_ReadCounter:                         ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
09D6: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
09D7: 5D 2E    MOV   A,REG[0x2E]        (0310)    mov   A, reg[PWM16_CH1_COMPARE_MSB_REG]       ; Save the Compare register on the stack
09D9: 08       PUSH  A                  (0311)    push  A                                          ;
09DA: 5D 2A    MOV   A,REG[0x2A]        (0312)    mov   A, reg[PWM16_CH1_COMPARE_LSB_REG]       ;
09DC: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
09DD: 41 2B FE AND   REG[0x2B],0xFE     
09E0: 71 10    OR    F,0x10             
                                        (0314)    PWM16_CH1_Stop_M                              ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
09E2: 5D 29    MOV   A,REG[0x29]        (0316)    mov   A, reg[PWM16_CH1_INPUT_LSB_REG]         ; save the LSB clock input setting
09E4: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
09E5: 62 29 00 MOV   REG[0x29],0x0      (0319)    mov   reg[PWM16_CH1_INPUT_LSB_REG], INPUT_REG_NULL
09E8: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
09EA: 5D 2C    MOV   A,REG[0x2C]        (0321)    mov   A, reg[PWM16_CH1_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
09EC: 5D 2E    MOV   A,REG[0x2E]        (0322)    mov   A, reg[PWM16_CH1_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
09EE: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
09EF: 5D 28    MOV   A,REG[0x28]        (0324)    mov   A, reg[PWM16_CH1_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
09F1: 5D 2A    MOV   A,REG[0x2A]        (0325)    mov   A, reg[PWM16_CH1_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
09F3: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
09F4: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
09F6: 60 2E    MOV   REG[0x2E],A        (0328)    mov   reg[PWM16_CH1_COMPARE_MSB_REG], A       ;
09F8: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
09FA: 60 2A    MOV   REG[0x2A],A        (0330)    mov   reg[PWM16_CH1_COMPARE_LSB_REG], A       ;
09FC: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
09FE: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0A00: 60 29    MOV   REG[0x29],A        (0333)    mov   reg[PWM16_CH1_INPUT_LSB_REG], A         ;    and restore it
0A02: 70 EF    AND   F,0xEF             
0A04: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM16_CH1_Start_M                             ; Now re-enable the PWM function
0A07: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0A08: 20       POP   X                  (0337)    pop   X                                          ;
0A09: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0A0B: 70 3F    AND   F,0x3F             
0A0D: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0A0F: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM16_CH1.asm
FILE: lib\pwm16_ch0int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_CH0INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM16_CH0.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM16_CH0_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM16_CH0_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM16_CH0_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0A10: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM16_CH0INT.asm
FILE: lib\pwm16_ch0.asm                 (0001) ;;*****************************************************************************
0A11: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_CH0.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM16_CH0.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM16_CH0_EnableInt
                                        (0030) export _PWM16_CH0_EnableInt
                                        (0031) export  PWM16_CH0_DisableInt
                                        (0032) export _PWM16_CH0_DisableInt
                                        (0033) export  PWM16_CH0_Start
                                        (0034) export _PWM16_CH0_Start
                                        (0035) export  PWM16_CH0_Stop
                                        (0036) export _PWM16_CH0_Stop
                                        (0037) export  PWM16_CH0_WritePeriod
                                        (0038) export _PWM16_CH0_WritePeriod
                                        (0039) export  PWM16_CH0_WritePulseWidth
                                        (0040) export _PWM16_CH0_WritePulseWidth
                                        (0041) export  PWM16_CH0_wReadPulseWidth
                                        (0042) export _PWM16_CH0_wReadPulseWidth
                                        (0043) export  PWM16_CH0_wReadCounter
                                        (0044) export _PWM16_CH0_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM16_CH0_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM16_CH0_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM16_CH0_ReadCounter       ; deprecated
                                        (0051) export _wPWM16_CH0_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA fitolamp_slave_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM16_CH0_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM16_CH0_EnableInt:
                                        (0091) _PWM16_CH0_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM16_CH0_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
0A14: 7F       RET                      (0095)    ret
0A15: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM16_CH0_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM16_CH0_DisableInt:
                                        (0119) _PWM16_CH0_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM16_CH0_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
0A18: 7F       RET                      (0123)    ret
0A19: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM16_CH0_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM16_CH0_Start:
                                        (0148) _PWM16_CH0_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM16_CH0_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0A1C: 7F       RET                      (0152)    ret
0A1D: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM16_CH0_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM16_CH0_Stop:
                                        (0176) _PWM16_CH0_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM16_CH0_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0A20: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM16_CH0_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM16_CH0_WritePeriod:
                                        (0206) _PWM16_CH0_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0A21: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWM16_CH0_PERIOD_LSB_REG], A
0A23: 5B       MOV   A,X                (0209)    mov   A, X
0A24: 60 25    MOV   REG[0x25],A        (0210)    mov   reg[PWM16_CH0_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
0A26: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM16_CH0_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM16_CH0_WritePulseWidth:
                                        (0235) _PWM16_CH0_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
0A27: 60 22    MOV   REG[0x22],A        (0237)    mov   reg[PWM16_CH0_COMPARE_LSB_REG], A
0A29: 5B       MOV   A,X                (0238)    mov   A, X
0A2A: 60 26    MOV   REG[0x26],A        (0239)    mov   reg[PWM16_CH0_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0A2C: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM16_CH0_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM16_CH0_wReadPulseWidth:
                                        (0264) _PWM16_CH0_wReadPulseWidth:
                                        (0265)  wPWM16_CH0_ReadPulseWidth:                      ; this name deprecated
                                        (0266) _wPWM16_CH0_ReadPulseWidth:                      ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0A2D: 5D 26    MOV   A,REG[0x26]        (0268)    mov   A, reg[PWM16_CH0_COMPARE_MSB_REG]
0A2F: 5C       MOV   X,A                (0269)    mov   X, A
0A30: 5D 22    MOV   A,REG[0x22]        (0270)    mov   A, reg[PWM16_CH0_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0A32: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM16_CH0_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM16_CH0_wReadCounter:
                                        (0299) _PWM16_CH0_wReadCounter:
                                        (0300)  wPWM16_CH0_ReadCounter:                         ; this name deprecated
                                        (0301) _wPWM16_CH0_ReadCounter:                         ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0A33: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
0A34: 5D 26    MOV   A,REG[0x26]        (0310)    mov   A, reg[PWM16_CH0_COMPARE_MSB_REG]       ; Save the Compare register on the stack
0A36: 08       PUSH  A                  (0311)    push  A                                          ;
0A37: 5D 22    MOV   A,REG[0x22]        (0312)    mov   A, reg[PWM16_CH0_COMPARE_LSB_REG]       ;
0A39: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
0A3A: 41 23 FE AND   REG[0x23],0xFE     
0A3D: 71 10    OR    F,0x10             
                                        (0314)    PWM16_CH0_Stop_M                              ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0A3F: 5D 21    MOV   A,REG[0x21]        (0316)    mov   A, reg[PWM16_CH0_INPUT_LSB_REG]         ; save the LSB clock input setting
0A41: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0A42: 62 21 00 MOV   REG[0x21],0x0      (0319)    mov   reg[PWM16_CH0_INPUT_LSB_REG], INPUT_REG_NULL
0A45: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0A47: 5D 24    MOV   A,REG[0x24]        (0321)    mov   A, reg[PWM16_CH0_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
0A49: 5D 26    MOV   A,REG[0x26]        (0322)    mov   A, reg[PWM16_CH0_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
0A4B: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0A4C: 5D 20    MOV   A,REG[0x20]        (0324)    mov   A, reg[PWM16_CH0_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
0A4E: 5D 22    MOV   A,REG[0x22]        (0325)    mov   A, reg[PWM16_CH0_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
0A50: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0A51: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0A53: 60 26    MOV   REG[0x26],A        (0328)    mov   reg[PWM16_CH0_COMPARE_MSB_REG], A       ;
0A55: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0A57: 60 22    MOV   REG[0x22],A        (0330)    mov   reg[PWM16_CH0_COMPARE_LSB_REG], A       ;
0A59: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
0A5B: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0A5D: 60 21    MOV   REG[0x21],A        (0333)    mov   reg[PWM16_CH0_INPUT_LSB_REG], A         ;    and restore it
0A5F: 70 EF    AND   F,0xEF             
0A61: 43 23 01 OR    REG[0x23],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM16_CH0_Start_M                             ; Now re-enable the PWM function
0A64: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0A65: 20       POP   X                  (0337)    pop   X                                          ;
0A66: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0A68: 70 3F    AND   F,0x3F             
0A6A: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0A6C: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM16_CH0.asm
FILE: lib\led_blue.asm                  (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LED_Blue.asm
                                        (0004) ;;  Version: 2.00, Updated on 2015/3/4 at 22:26:37
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LED user module.
                                        (0008) ;;
                                        (0009) ;;
                                        (0010) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0011) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0012) ;;        This means it is the caller's responsibility to preserve any values
                                        (0013) ;;        in the X and A registers that are still needed after the API functions
                                        (0014) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0015) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0016) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0017) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0018) ;;-----------------------------------------------------------------------------
                                        (0019) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0020) ;;*****************************************************************************
                                        (0021) ;;*****************************************************************************
                                        (0022) 
                                        (0023) include "LED_Blue.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) export _LED_Blue_Start
                                        (0027) export  LED_Blue_Start
                                        (0028) 
                                        (0029) export _LED_Blue_Stop
                                        (0030) export  LED_Blue_Stop
                                        (0031) 
                                        (0032) export _LED_Blue_On
                                        (0033) export  LED_Blue_On
                                        (0034) 
                                        (0035) export _LED_Blue_Off
                                        (0036) export  LED_Blue_Off
                                        (0037) 
                                        (0038) export _LED_Blue_Switch
                                        (0039) export  LED_Blue_Switch
                                        (0040) 
                                        (0041) export _LED_Blue_Invert
                                        (0042) export  LED_Blue_Invert
                                        (0043) 
                                        (0044) export _LED_Blue_GetState
                                        (0045) export  LED_Blue_GetState
                                        (0046) 
                                        (0047) 
                                        (0048) AREA UserModules (ROM, REL)
                                        (0049) 
                                        (0050) 
                                        (0051) .SECTION
                                        (0052) ;-----------------------------------------------------------------------------
                                        (0053) ;  FUNCTION NAME: LED_Blue_Start(void)
                                        (0054) ;  FUNCTION NAME: LED_Blue_Stop(void)
                                        (0055) ;
                                        (0056) ;  FUNCTION NAME: LED_Blue_Switch(void)
                                        (0057) ;
                                        (0058) ;  DESCRIPTION: ( Switch )
                                        (0059) ;     Turn LED on or off     
                                        (0060) ;
                                        (0061) ;  DESCRIPTION: ( Start, Stop )
                                        (0062) ;     Turn LED off                       
                                        (0063) ;
                                        (0064) ;-----------------------------------------------------------------------------
                                        (0065) ;
                                        (0066) ;  ARGUMENTS:  ( Switch )
                                        (0067) ;     A => If 0, turn off LED, if > 0 turn on LED
                                        (0068) ;
                                        (0069) ;  ARGUMENTS:  ( Start, Stop )
                                        (0070) ;      None
                                        (0071) ;
                                        (0072) ;  RETURNS:  none
                                        (0073) ;
                                        (0074) ;  SIDE EFFECTS:
                                        (0075) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0076) ;
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) _LED_Blue_On:
                                        (0079)  LED_Blue_On:
0A6D: 50 01    MOV   A,0x1              (0080)    mov  A,0x01
0A6F: 80 03    JMP   _LED_Blue_Switch   (0081)    jmp  LED_Blue_Switch 
                                        (0082) 
                                        (0083) _LED_Blue_Start:
                                        (0084)  LED_Blue_Start:
                                        (0085) _LED_Blue_Stop:
                                        (0086)  LED_Blue_Stop:
                                        (0087) _LED_Blue_Off:
                                        (0088)  LED_Blue_Off:
0A71: 50 00    MOV   A,0x0              (0089)    mov  A,0x00
0A73: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0090) 
                                        (0091) _LED_Blue_Switch:
                                        (0092)  LED_Blue_Switch:
                                        (0093)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0094)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0095)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0096) 
0A76: 29 00    OR    A,0x0              (0097)    or   A,0x00                                   ; Check mode
0A78: A0 06    JZ    0x0A7F             (0098)    jz   .Turn_Off_LED
                                        (0099) 
                                        (0100) .Turn_On_LED:
                                        (0101) IF(0)                                            ; Active High Digit Drive
                                        (0102)    or   [Port_1_Data_SHADE],LED_Blue_PinMask
                                        (0103) ELSE                                             ; Active Low Digit Drive
0A7A: 26 04 EF AND   [0x4],0xEF         (0104)    and  [Port_1_Data_SHADE],~LED_Blue_PinMask
                                        (0105) ENDIF
0A7D: 80 04    JMP   0x0A82             (0106)    jmp  .Switch_LED
                                        (0107) 
                                        (0108) .Turn_Off_LED:
                                        (0109) IF(0)                      ; Active High Digit Drive
                                        (0110)    and  [Port_1_Data_SHADE],~LED_Blue_PinMask
                                        (0111) ELSE                              ; Active Low Digit Drive
0A7F: 2E 04 10 OR    [0x4],0x10         (0112)    or   [Port_1_Data_SHADE],LED_Blue_PinMask
                                        (0113) ENDIF
                                        (0114) 
                                        (0115) .Switch_LED:
0A82: 51 04    MOV   A,[0x4]            (0116)    mov  A,[Port_1_Data_SHADE]
0A84: 60 04    MOV   REG[0x4],A         (0117)    mov  reg[LED_Blue_PortDR],A
0A86: 70 3F    AND   F,0x3F             
0A88: 71 C0    OR    F,0xC0             
                                        (0118) 
                                        (0119)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0120)    RAM_EPILOGUE RAM_USE_CLASS_4
0A8A: 7F       RET                      (0121)    ret
0A8B: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0122) .ENDSECTION
                                        (0123) 
                                        (0124) 
                                        (0125) 
                                        (0126) .SECTION
                                        (0127) ;-----------------------------------------------------------------------------
                                        (0128) ;  FUNCTION NAME: LED_Blue_Invert(void)
                                        (0129) ;
                                        (0130) ;  DESCRIPTION:
                                        (0131) ;     Invert state of LED                               
                                        (0132) ;
                                        (0133) ;-----------------------------------------------------------------------------
                                        (0134) ;
                                        (0135) ;  ARGUMENTS: none
                                        (0136) ;
                                        (0137) ;  RETURNS:  none
                                        (0138) ;
                                        (0139) ;  SIDE EFFECTS:
                                        (0140) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0141) ;
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) _LED_Blue_Invert:
                                        (0144)  LED_Blue_Invert:
                                        (0145)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0146)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0147)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0148) 
0A8E: 36 04 10 XOR   [0x4],0x10         (0149)    xor  [Port_1_Data_SHADE],LED_Blue_PinMask
0A91: 51 04    MOV   A,[0x4]            (0150)    mov  A,[Port_1_Data_SHADE]
0A93: 60 04    MOV   REG[0x4],A         (0151)    mov  reg[LED_Blue_PortDR],A
0A95: 70 3F    AND   F,0x3F             
0A97: 71 C0    OR    F,0xC0             
                                        (0152) 
                                        (0153)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0154)    RAM_EPILOGUE RAM_USE_CLASS_4
0A99: 7F       RET                      (0155)    ret
0A9A: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0156) .ENDSECTION
                                        (0157) 
                                        (0158) .SECTION
                                        (0159) ;-----------------------------------------------------------------------------
                                        (0160) ;  FUNCTION NAME: LED_Blue_GetState(void)
                                        (0161) ;
                                        (0162) ;  DESCRIPTION:
                                        (0163) ;     Get state of LED
                                        (0164) ;
                                        (0165) ;-----------------------------------------------------------------------------
                                        (0166) ;
                                        (0167) ;  ARGUMENTS: none
                                        (0168) ;
                                        (0169) ;  RETURNS:  
                                        (0170) ;    State of LED   1 = ON,  0 = OFF
                                        (0171) ;
                                        (0172) ;  SIDE EFFECTS:
                                        (0173) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0174) ;
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) _LED_Blue_GetState:
                                        (0177)  LED_Blue_GetState:
                                        (0178)    RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0179)    RAM_PROLOGUE RAM_USE_CLASS_2
                                        (0180)    RAM_SETPAGE_CUR >Port_1_Data_SHADE
                                        (0181) 
0A9D: 51 04    MOV   A,[0x4]            (0182)    mov   A,[Port_1_Data_SHADE]         ; Get shade value
                                        (0183) IF(0)                                  ; Active High Digit Drive
                                        (0184)    // Nothing for now
                                        (0185) ELSE                                   ; Active Low Digit Drive
0A9F: 73       CPL   A                  (0186)    cpl   A                             ; Invert bit if Active low
                                        (0187) ENDIF
0AA0: 21 10    AND   A,0x10             (0188)    and   A,LED_Blue_PinMask            ; Mask off the trash
0AA2: A0 03    JZ    0x0AA6             (0189)    jz    .End_LED_GS                   ; If zero, we're done
0AA4: 50 01    MOV   A,0x1              (0190)    mov   A,0x01                        ; Return a 1 no mater what the mask is.
0AA6: 70 3F    AND   F,0x3F             
0AA8: 71 C0    OR    F,0xC0             
                                        (0191) 
                                        (0192) .End_LED_GS:
                                        (0193)    RAM_EPILOGUE RAM_USE_CLASS_2
                                        (0194)    RAM_EPILOGUE RAM_USE_CLASS_4
0AAA: 7F       RET                      (0195)    ret
FILE: lib\counter8_rf_clkint.asm        (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter8_RF_clkINT.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:23:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "Counter8_RF_clk.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _Counter8_RF_clk_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter8_RF_clk_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter8_RF_clk_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0AAB: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file Counter8_RF_clkINT.asm
FILE: lib\counter8_rf_clk.asm           (0001) ;;*****************************************************************************
0AAC: 43 DF 01 OR    REG[0xDF],0x1      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter8_RF_clk.asm
                                        (0004) ;;   Version: 2.60, Updated on 2015/3/4 at 22:23:47
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter8 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter8_RF_clk.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter8_RF_clk_EnableInt
                                        (0030) export _Counter8_RF_clk_EnableInt
                                        (0031) export  Counter8_RF_clk_DisableInt
                                        (0032) export _Counter8_RF_clk_DisableInt
                                        (0033) export  Counter8_RF_clk_Start
                                        (0034) export _Counter8_RF_clk_Start
                                        (0035) export  Counter8_RF_clk_Stop
                                        (0036) export _Counter8_RF_clk_Stop
                                        (0037) export  Counter8_RF_clk_WritePeriod
                                        (0038) export _Counter8_RF_clk_WritePeriod
                                        (0039) export  Counter8_RF_clk_WriteCompareValue
                                        (0040) export _Counter8_RF_clk_WriteCompareValue
                                        (0041) export  Counter8_RF_clk_bReadCompareValue
                                        (0042) export _Counter8_RF_clk_bReadCompareValue
                                        (0043) export  Counter8_RF_clk_bReadCounter
                                        (0044) export _Counter8_RF_clk_bReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  bCounter8_RF_clk_ReadCompareValue  ; deprecated
                                        (0049) export _bCounter8_RF_clk_ReadCompareValue  ; deprecated
                                        (0050) export  bCounter8_RF_clk_ReadCounter       ; deprecated
                                        (0051) export _bCounter8_RF_clk_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Counter8_RF_clk_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Counter8_RF_clk_EnableInt:
                                        (0082) _Counter8_RF_clk_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    Counter8_RF_clk_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0AAF: 7F       RET                      (0086)    ret
0AB0: 41 DF FE AND   REG[0xDF],0xFE     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Counter8_RF_clk_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Counter8_RF_clk_DisableInt:
                                        (0109) _Counter8_RF_clk_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    Counter8_RF_clk_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0AB3: 7F       RET                      (0113)    ret
0AB4: 43 43 01 OR    REG[0x43],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Counter8_RF_clk_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Counter8_RF_clk_Start:
                                        (0138) _Counter8_RF_clk_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    Counter8_RF_clk_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0AB7: 7F       RET                      (0142)    ret
0AB8: 41 43 FE AND   REG[0x43],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Counter8_RF_clk_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Counter8_RF_clk_Stop:
                                        (0166) _Counter8_RF_clk_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    Counter8_RF_clk_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0ABB: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Counter8_RF_clk_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 8-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 BYTE bPeriodValue (passed in A)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count register (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Counter8_RF_clk_WritePeriod:
                                        (0196) _Counter8_RF_clk_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0ABC: 60 41    MOV   REG[0x41],A        (0198)    mov   reg[Counter8_RF_clk_PERIOD_REG], A
                                        (0199)    RAM_EPILOGUE RAM_USE_CLASS_1
0ABE: 7F       RET                      (0200)    ret
                                        (0201) 
                                        (0202) 
                                        (0203) .ENDSECTION
                                        (0204) 
                                        (0205) .SECTION
                                        (0206) ;-----------------------------------------------------------------------------
                                        (0207) ;  FUNCTION NAME: Counter8_RF_clk_WriteCompareValue
                                        (0208) ;
                                        (0209) ;  DESCRIPTION:
                                        (0210) ;     Writes compare value into the Compare register (DR2).
                                        (0211) ;-----------------------------------------------------------------------------
                                        (0212) ;
                                        (0213) ;  ARGUMENTS:    fastcall16 BYTE bCompareValue (passed in A)
                                        (0214) ;  RETURNS:      Nothing
                                        (0215) ;  SIDE EFFECTS: 
                                        (0216) ;    The A and X registers may be modified by this or future implementations
                                        (0217) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0218) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0219) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0220) ;    functions.
                                        (0221) ;
                                        (0222)  Counter8_RF_clk_WriteCompareValue:
                                        (0223) _Counter8_RF_clk_WriteCompareValue:
                                        (0224)    RAM_PROLOGUE RAM_USE_CLASS_1
0ABF: 60 42    MOV   REG[0x42],A        (0225)    mov   reg[Counter8_RF_clk_COMPARE_REG], A
                                        (0226)    RAM_EPILOGUE RAM_USE_CLASS_1
0AC1: 7F       RET                      (0227)    ret
                                        (0228) 
                                        (0229) 
                                        (0230) .ENDSECTION
                                        (0231) 
                                        (0232) .SECTION
                                        (0233) ;-----------------------------------------------------------------------------
                                        (0234) ;  FUNCTION NAME: Counter8_RF_clk_bReadCompareValue
                                        (0235) ;
                                        (0236) ;  DESCRIPTION:
                                        (0237) ;     Reads the Compare register.
                                        (0238) ;-----------------------------------------------------------------------------
                                        (0239) ;
                                        (0240) ;  ARGUMENTS:    None
                                        (0241) ;  RETURNS:      fastcall16 BYTE bCompareValue (value of DR2 in the A register)
                                        (0242) ;  SIDE EFFECTS: 
                                        (0243) ;    The A and X registers may be modified by this or future implementations
                                        (0244) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0245) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0246) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0247) ;    functions.
                                        (0248) ;
                                        (0249)  Counter8_RF_clk_bReadCompareValue:
                                        (0250) _Counter8_RF_clk_bReadCompareValue:
                                        (0251)  bCounter8_RF_clk_ReadCompareValue:                ; this name deprecated
                                        (0252) _bCounter8_RF_clk_ReadCompareValue:                ; this name deprecated
                                        (0253)    RAM_PROLOGUE RAM_USE_CLASS_1
0AC2: 5D 42    MOV   A,REG[0x42]        (0254)    mov   A, reg[Counter8_RF_clk_COMPARE_REG]
                                        (0255)    RAM_EPILOGUE RAM_USE_CLASS_1
0AC4: 7F       RET                      (0256)    ret
                                        (0257) 
                                        (0258) 
                                        (0259) .ENDSECTION
                                        (0260) 
                                        (0261) .SECTION
                                        (0262) ;-----------------------------------------------------------------------------
                                        (0263) ;  FUNCTION NAME: Counter8_RF_clk_bReadCounter
                                        (0264) ;
                                        (0265) ;  DESCRIPTION:
                                        (0266) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0267) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0268) ;     from the Count to the Compare registers by holding the clock low in
                                        (0269) ;     the PSoC block.
                                        (0270) ;-----------------------------------------------------------------------------
                                        (0271) ;
                                        (0272) ;  ARGUMENTS: None
                                        (0273) ;  RETURNS:   fastcall16 BYTE bCount (value of DR0 in the A register)
                                        (0274) ;  SIDE EFFECTS:
                                        (0275) ;     1) If running, the user module is stopped momentarily and one or more
                                        (0276) ;        counts may be missed.
                                        (0277) ;     2) The A and X registers may be modified by this or future implementations
                                        (0278) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0279) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0280) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0281) ;        functions.
                                        (0282) ;
                                        (0283)  Counter8_RF_clk_bReadCounter:
                                        (0284) _Counter8_RF_clk_bReadCounter:
                                        (0285)  bCounter8_RF_clk_ReadCounter:                   ; this name deprecated
                                        (0286) _bCounter8_RF_clk_ReadCounter:                   ; this name deprecated
                                        (0287) 
                                        (0288)    bOrigCompareValue:      EQU   0               ; Frame offset to temp Compare store
                                        (0289)    bOrigControlReg:        EQU   1               ; Frame offset to temp CR0     store
                                        (0290)    bOrigClockSetting:      EQU   2               ; Frame offset to temp Input   store
                                        (0291)    wCounter:               EQU   3               ; Frame offset to temp Count   store
                                        (0292)    STACK_FRAME_SIZE:       EQU   4               ; max stack frame size is 4 bytes
                                        (0293) 
                                        (0294)    RAM_PROLOGUE RAM_USE_CLASS_2
0AC5: 4F       MOV   X,SP               (0295)    mov   X, SP                                   ; X <- stack frame pointer
0AC6: 5D 42    MOV   A,REG[0x42]        (0296)    mov   A, reg[Counter8_RF_clk_COMPARE_REG]     ; Save the Compare register on the stack
0AC8: 08       PUSH  A                  (0297)    push  A                                       ;
0AC9: 5D 43    MOV   A,REG[0x43]        (0298)    mov   A, reg[Counter8_RF_clk_CONTROL_REG]     ; Save CR0 (running or stopped state)
0ACB: 08       PUSH  A                  (0299)    push  A                                       ;
0ACC: 41 43 FE AND   REG[0x43],0xFE     
0ACF: 71 10    OR    F,0x10             
                                        (0300)    Counter8_RF_clk_Stop_M                        ; Disable (stop) the Counter if running
                                        (0301)    M8C_SetBank1                                  ;
0AD1: 5D 41    MOV   A,REG[0x41]        (0302)    mov   A, reg[Counter8_RF_clk_INPUT_REG]       ; save the clock input setting
0AD3: 08       PUSH  A                  (0303)    push  A                                       ;   on the stack (now 2 bytes) and ...
                                        (0304)                                                  ;   hold the clock low:
0AD4: 62 41 00 MOV   REG[0x41],0x0      (0305)    mov   reg[Counter8_RF_clk_INPUT_REG], INPUT_REG_NULL
0AD7: 70 EF    AND   F,0xEF             
                                        (0306)    M8C_SetBank0
                                        (0307)                                                  ; Extract the Count via DR2 register
0AD9: 5D 40    MOV   A,REG[0x40]        (0308)    mov   A, reg[Counter8_RF_clk_COUNTER_REG]     ; DR2 <- DR0
0ADB: 5D 42    MOV   A,REG[0x42]        (0309)    mov   A, reg[Counter8_RF_clk_COMPARE_REG]     ; Stash the Count on the stack
0ADD: 08       PUSH  A                  (0310)    push  A                                       ;  -stack frame is now 3 bytes
0ADE: 52 00    MOV   A,[X+0]            (0311)    mov   A, [X+bOrigCompareValue]                ; Restore the Compare register
0AE0: 60 42    MOV   REG[0x42],A        (0312)    mov   reg[Counter8_RF_clk_COMPARE_REG], A
0AE2: 71 10    OR    F,0x10             
                                        (0313)    M8C_SetBank1                                  ; Restore the counter operation:
0AE4: 52 02    MOV   A,[X+2]            (0314)    mov   A, [X+bOrigClockSetting]                ;   First, the clock setting...
0AE6: 60 41    MOV   REG[0x41],A        (0315)    mov   reg[Counter8_RF_clk_INPUT_REG], A       ;
0AE8: 70 EF    AND   F,0xEF             
                                        (0316)    M8C_SetBank0                                  ;   then re-enable (start) the counter
0AEA: 52 01    MOV   A,[X+1]            (0317)    mov   A, [X+bOrigControlReg]                  ;     if it was running when
0AEC: 60 43    MOV   REG[0x43],A        (0318)    mov   reg[Counter8_RF_clk_CONTROL_REG], A     ;     this function was first called
0AEE: 18       POP   A                  (0319)    pop   A                                       ; Setup the return value
0AEF: 38 FD    ADD   SP,0xFD            (0320)    ADD   SP, -(STACK_FRAME_SIZE-1)               ; Zap remainder of stack frame
0AF1: 70 3F    AND   F,0x3F             
0AF3: 71 C0    OR    F,0xC0             
                                        (0321)    RAM_EPILOGUE RAM_USE_CLASS_2
0AF5: 7F       RET                      (0322)    ret
                                        (0323) 
                                        (0324) .ENDSECTION
                                        (0325) 
                                        (0326) ; End of File Counter8_RF_clk.asm
FILE: lib\counter16_pwrupdint.asm       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
0AF6: 08       PUSH  A                  (0003) ;;  FILENAME: Counter16_PwrUpdINT.asm
0AF7: 5D D0    MOV   A,REG[0xD0]        
0AF9: 08       PUSH  A                  
0AFA: 5D D3    MOV   A,REG[0xD3]        
0AFC: 08       PUSH  A                  
0AFD: 5D D4    MOV   A,REG[0xD4]        
0AFF: 08       PUSH  A                  
0B00: 5D D5    MOV   A,REG[0xD5]        
0B02: 08       PUSH  A                  
0B03: 70 3F    AND   F,0x3F             
0B05: 71 C0    OR    F,0xC0             (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
0B07: 62 D0 00 MOV   REG[0xD0],0x0      (0007) ;;  DESCRIPTION: Counter16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
0B0A: 51 D7    MOV   A,[__r0]           (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
0B0C: 08       PUSH  A                  (0010) ;;*****************************************************************************
0B0D: 51 D6    MOV   A,[__r1]           (0011) ;;*****************************************************************************
0B0F: 08       PUSH  A                  (0012) 
0B10: 51 D5    MOV   A,[__r2]           (0013) include "m8c.inc"
0B12: 08       PUSH  A                  (0014) include "memory.inc"
0B13: 51 D4    MOV   A,[__r3]           (0015) include "Counter16_PwrUpd.inc"
0B15: 08       PUSH  A                  (0016) 
0B16: 51 D3    MOV   A,[__r4]           (0017) 
0B18: 08       PUSH  A                  (0018) ;-----------------------------------------------
0B19: 51 D2    MOV   A,[__r5]           (0019) ;  Global Symbols
0B1B: 08       PUSH  A                  (0020) ;-----------------------------------------------
0B1C: 51 D1    MOV   A,[__r6]           (0021) export  _Counter16_PwrUpd_ISR
0B1E: 08       PUSH  A                  (0022) 
0B1F: 51 D0    MOV   A,[__r7]           (0023) 
0B21: 08       PUSH  A                  (0024) AREA InterruptRAM (RAM,REL,CON)
0B22: 51 CF    MOV   A,[__r8]           (0025) 
0B24: 08       PUSH  A                  (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
0B25: 51 CE    MOV   A,[__r9]           (0027) ;---------------------------------------------------
0B27: 08       PUSH  A                  (0028) ; Insert your custom declarations below this banner
0B28: 51 CD    MOV   A,[__r10]          (0029) ;---------------------------------------------------
0B2A: 08       PUSH  A                  (0030) 
0B2B: 51 CC    MOV   A,[__r11]          (0031) ;------------------------
0B2D: 08       PUSH  A                  (0032) ; Includes
0B2E: 51 CB    MOV   A,[__rX]           (0033) ;------------------------
0B30: 08       PUSH  A                  (0034) 
0B31: 51 CA    MOV   A,[__rY]           (0035) 	
0B33: 08       PUSH  A                  (0036) ;------------------------
0B34: 51 C9    MOV   A,[__rZ]           (0037) ;  Constant Definitions
0B36: 08       PUSH  A                  (0038) ;------------------------
                                        (0039) 
0B37: 62 D0 00 MOV   REG[0xD0],0x0      (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _Counter16_PwrUpd_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _Counter16_PwrUpd_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    PRESERVE_CPU_CONTEXT
0B3A: 7C 0F F5 LCALL _update_power      (0081)    lcall _update_power
0B3D: 70 3F    AND   F,0x3F             
0B3F: 71 C0    OR    F,0xC0             
0B41: 62 D0 00 MOV   REG[0xD0],0x0      
0B44: 18       POP   A                  
0B45: 53 C9    MOV   [__rZ],A           
0B47: 18       POP   A                  
0B48: 53 CA    MOV   [__rY],A           
0B4A: 18       POP   A                  
0B4B: 53 CB    MOV   [__rX],A           
0B4D: 18       POP   A                  
0B4E: 53 CC    MOV   [__r11],A          
0B50: 18       POP   A                  
0B51: 53 CD    MOV   [__r10],A          
0B53: 18       POP   A                  
0B54: 53 CE    MOV   [__r9],A           
0B56: 18       POP   A                  
0B57: 53 CF    MOV   [__r8],A           
0B59: 18       POP   A                  
0B5A: 53 D0    MOV   [__r7],A           
0B5C: 18       POP   A                  
0B5D: 53 D1    MOV   [__r6],A           
0B5F: 18       POP   A                  
0B60: 53 D2    MOV   [__r5],A           
0B62: 18       POP   A                  
0B63: 53 D3    MOV   [__r4],A           
0B65: 18       POP   A                  
0B66: 53 D4    MOV   [__r3],A           
0B68: 18       POP   A                  
0B69: 53 D5    MOV   [__r2],A           
0B6B: 18       POP   A                  
0B6C: 53 D6    MOV   [__r1],A           
0B6E: 18       POP   A                  
0B6F: 53 D7    MOV   [__r0],A           
0B71: 18       POP   A                  
0B72: 60 D5    MOV   REG[0xD5],A        
0B74: 18       POP   A                  
0B75: 60 D4    MOV   REG[0xD4],A        
0B77: 18       POP   A                  
0B78: 60 D3    MOV   REG[0xD3],A        
0B7A: 18       POP   A                  
0B7B: 60 D0    MOV   REG[0xD0],A        
0B7D: 70 00    AND   F,0x0              
0B7F: 18       POP   A                  
                                        (0082)    RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0B80: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file Counter16_PwrUpdINT.asm
FILE: lib\counter16_pwrupd.asm          (0001) ;;*****************************************************************************
0B81: 43 E1 20 OR    REG[0xE1],0x20     (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: Counter16_PwrUpd.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:23:43
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: Counter16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "Counter16_PwrUpd.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  Counter16_PwrUpd_EnableInt
                                        (0030) export _Counter16_PwrUpd_EnableInt
                                        (0031) export  Counter16_PwrUpd_DisableInt
                                        (0032) export _Counter16_PwrUpd_DisableInt
                                        (0033) export  Counter16_PwrUpd_Start
                                        (0034) export _Counter16_PwrUpd_Start
                                        (0035) export  Counter16_PwrUpd_Stop
                                        (0036) export _Counter16_PwrUpd_Stop
                                        (0037) export  Counter16_PwrUpd_WritePeriod
                                        (0038) export _Counter16_PwrUpd_WritePeriod
                                        (0039) export  Counter16_PwrUpd_WriteCompareValue
                                        (0040) export _Counter16_PwrUpd_WriteCompareValue
                                        (0041) export  Counter16_PwrUpd_wReadCompareValue
                                        (0042) export _Counter16_PwrUpd_wReadCompareValue
                                        (0043) export  Counter16_PwrUpd_wReadCounter
                                        (0044) export _Counter16_PwrUpd_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wCounter16_PwrUpd_ReadCompareValue  ; deprecated
                                        (0049) export _wCounter16_PwrUpd_ReadCompareValue  ; deprecated
                                        (0050) export  wCounter16_PwrUpd_ReadCounter       ; deprecated
                                        (0051) export _wCounter16_PwrUpd_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) ;-----------------------------------------------
                                        (0054) ;  Constant Definitions
                                        (0055) ;-----------------------------------------------
                                        (0056) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0057) 
                                        (0058) 
                                        (0059) AREA UserModules (ROM, REL)
                                        (0060) 
                                        (0061) .SECTION
                                        (0062) ;-----------------------------------------------------------------------------
                                        (0063) ;  FUNCTION NAME: Counter16_PwrUpd_EnableInt
                                        (0064) ;
                                        (0065) ;  DESCRIPTION:
                                        (0066) ;     Enables this counter's interrupt by setting the interrupt enable mask bit
                                        (0067) ;     associated with this User Module. This function has no effect until and
                                        (0068) ;     unless the global interrupts are enabled (for example by using the
                                        (0069) ;     macro M8C_EnableGInt).
                                        (0070) ;-----------------------------------------------------------------------------
                                        (0071) ;
                                        (0072) ;  ARGUMENTS:    None.
                                        (0073) ;  RETURNS:      Nothing.
                                        (0074) ;  SIDE EFFECTS: 
                                        (0075) ;    The A and X registers may be modified by this or future implementations
                                        (0076) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0077) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0078) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0079) ;    functions.
                                        (0080) ;
                                        (0081)  Counter16_PwrUpd_EnableInt:
                                        (0082) _Counter16_PwrUpd_EnableInt:
                                        (0083)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0084)    Counter16_PwrUpd_EnableInt_M
                                        (0085)    RAM_EPILOGUE RAM_USE_CLASS_1
0B84: 7F       RET                      (0086)    ret
0B85: 41 E1 DF AND   REG[0xE1],0xDF     
                                        (0087) 
                                        (0088) .ENDSECTION
                                        (0089) 
                                        (0090) .SECTION
                                        (0091) ;-----------------------------------------------------------------------------
                                        (0092) ;  FUNCTION NAME: Counter16_PwrUpd_DisableInt
                                        (0093) ;
                                        (0094) ;  DESCRIPTION:
                                        (0095) ;     Disables this counter's interrupt by clearing the interrupt enable
                                        (0096) ;     mask bit associated with this User Module.
                                        (0097) ;-----------------------------------------------------------------------------
                                        (0098) ;
                                        (0099) ;  ARGUMENTS:    None
                                        (0100) ;  RETURNS:      Nothing
                                        (0101) ;  SIDE EFFECTS: 
                                        (0102) ;    The A and X registers may be modified by this or future implementations
                                        (0103) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0104) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0105) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0106) ;    functions.
                                        (0107) ;
                                        (0108)  Counter16_PwrUpd_DisableInt:
                                        (0109) _Counter16_PwrUpd_DisableInt:
                                        (0110)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0111)    Counter16_PwrUpd_DisableInt_M
                                        (0112)    RAM_EPILOGUE RAM_USE_CLASS_1
0B88: 7F       RET                      (0113)    ret
0B89: 43 33 01 OR    REG[0x33],0x1      
                                        (0114) 
                                        (0115) 
                                        (0116) .ENDSECTION
                                        (0117) 
                                        (0118) .SECTION
                                        (0119) ;-----------------------------------------------------------------------------
                                        (0120) ;  FUNCTION NAME: Counter16_PwrUpd_Start
                                        (0121) ;
                                        (0122) ;  DESCRIPTION:
                                        (0123) ;     Sets the start bit in the Control register of this user module.  The
                                        (0124) ;     counter will begin counting on the next input clock as soon as the
                                        (0125) ;     enable input is asserted high.
                                        (0126) ;-----------------------------------------------------------------------------
                                        (0127) ;
                                        (0128) ;  ARGUMENTS:    None
                                        (0129) ;  RETURNS:      Nothing
                                        (0130) ;  SIDE EFFECTS: 
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137)  Counter16_PwrUpd_Start:
                                        (0138) _Counter16_PwrUpd_Start:
                                        (0139)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0140)    Counter16_PwrUpd_Start_M
                                        (0141)    RAM_EPILOGUE RAM_USE_CLASS_1
0B8C: 7F       RET                      (0142)    ret
0B8D: 41 33 FE AND   REG[0x33],0xFE     
                                        (0143) 
                                        (0144) 
                                        (0145) .ENDSECTION
                                        (0146) 
                                        (0147) .SECTION
                                        (0148) ;-----------------------------------------------------------------------------
                                        (0149) ;  FUNCTION NAME: Counter16_PwrUpd_Stop
                                        (0150) ;
                                        (0151) ;  DESCRIPTION:
                                        (0152) ;     Disables counter operation by clearing the start bit in the Control
                                        (0153) ;     register of the LSB block.
                                        (0154) ;-----------------------------------------------------------------------------
                                        (0155) ;
                                        (0156) ;  ARGUMENTS:    None
                                        (0157) ;  RETURNS:      Nothing
                                        (0158) ;  SIDE EFFECTS: 
                                        (0159) ;    The A and X registers may be modified by this or future implementations
                                        (0160) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0161) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0162) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0163) ;    functions.
                                        (0164) ;
                                        (0165)  Counter16_PwrUpd_Stop:
                                        (0166) _Counter16_PwrUpd_Stop:
                                        (0167)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0168)    Counter16_PwrUpd_Stop_M
                                        (0169)    RAM_EPILOGUE RAM_USE_CLASS_1
0B90: 7F       RET                      (0170)    ret
                                        (0171) 
                                        (0172) 
                                        (0173) .ENDSECTION
                                        (0174) 
                                        (0175) .SECTION
                                        (0176) ;-----------------------------------------------------------------------------
                                        (0177) ;  FUNCTION NAME: Counter16_PwrUpd_WritePeriod
                                        (0178) ;
                                        (0179) ;  DESCRIPTION:
                                        (0180) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0184) ;  RETURNS:   Nothing
                                        (0185) ;  SIDE EFFECTS:
                                        (0186) ;    If the counter user module is stopped, then this value will also be
                                        (0187) ;    latched into the Count registers (DR0).
                                        (0188) ;     
                                        (0189) ;    The A and X registers may be modified by this or future implementations
                                        (0190) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0191) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0192) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0193) ;    functions.
                                        (0194) ;
                                        (0195)  Counter16_PwrUpd_WritePeriod:
                                        (0196) _Counter16_PwrUpd_WritePeriod:
                                        (0197)    RAM_PROLOGUE RAM_USE_CLASS_1
0B91: 60 31    MOV   REG[0x31],A        (0198)    mov   reg[Counter16_PwrUpd_PERIOD_LSB_REG], A
0B93: 5B       MOV   A,X                (0199)    mov   A, X
0B94: 60 35    MOV   REG[0x35],A        (0200)    mov   reg[Counter16_PwrUpd_PERIOD_MSB_REG], A
                                        (0201)    RAM_EPILOGUE RAM_USE_CLASS_1
0B96: 7F       RET                      (0202)    ret
                                        (0203) 
                                        (0204) 
                                        (0205) .ENDSECTION
                                        (0206) 
                                        (0207) .SECTION
                                        (0208) ;-----------------------------------------------------------------------------
                                        (0209) ;  FUNCTION NAME: Counter16_PwrUpd_WriteCompareValue
                                        (0210) ;
                                        (0211) ;  DESCRIPTION:
                                        (0212) ;     Writes compare value into the Compare register (DR2).
                                        (0213) ;-----------------------------------------------------------------------------
                                        (0214) ;
                                        (0215) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0216) ;  RETURNS:      Nothing
                                        (0217) ;  SIDE EFFECTS: 
                                        (0218) ;    The A and X registers may be modified by this or future implementations
                                        (0219) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0220) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0221) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0222) ;    functions.
                                        (0223) ;
                                        (0224)  Counter16_PwrUpd_WriteCompareValue:
                                        (0225) _Counter16_PwrUpd_WriteCompareValue:
                                        (0226)    RAM_PROLOGUE RAM_USE_CLASS_1
0B97: 60 32    MOV   REG[0x32],A        (0227)    mov   reg[Counter16_PwrUpd_COMPARE_LSB_REG], A
0B99: 5B       MOV   A,X                (0228)    mov   A, X
0B9A: 60 36    MOV   REG[0x36],A        (0229)    mov   reg[Counter16_PwrUpd_COMPARE_MSB_REG], A
                                        (0230)    RAM_EPILOGUE RAM_USE_CLASS_1
0B9C: 7F       RET                      (0231)    ret
                                        (0232) 
                                        (0233) 
                                        (0234) .ENDSECTION
                                        (0235) 
                                        (0236) .SECTION
                                        (0237) ;-----------------------------------------------------------------------------
                                        (0238) ;  FUNCTION NAME: Counter16_PwrUpd_wReadCompareValue
                                        (0239) ;
                                        (0240) ;  DESCRIPTION:
                                        (0241) ;     Reads the Compare registers.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS:    None
                                        (0245) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  Counter16_PwrUpd_wReadCompareValue:
                                        (0254) _Counter16_PwrUpd_wReadCompareValue:
                                        (0255)  wCounter16_PwrUpd_ReadCompareValue:                ; this name deprecated
                                        (0256) _wCounter16_PwrUpd_ReadCompareValue:                ; this name deprecated
                                        (0257)    RAM_PROLOGUE RAM_USE_CLASS_1
0B9D: 5D 36    MOV   A,REG[0x36]        (0258)    mov   A, reg[Counter16_PwrUpd_COMPARE_MSB_REG]
0B9F: 5C       MOV   X,A                (0259)    mov   X, A
0BA0: 5D 32    MOV   A,REG[0x32]        (0260)    mov   A, reg[Counter16_PwrUpd_COMPARE_LSB_REG]
                                        (0261)    RAM_EPILOGUE RAM_USE_CLASS_1
0BA2: 7F       RET                      (0262)    ret
                                        (0263) 
                                        (0264) 
                                        (0265) .ENDSECTION
                                        (0266) 
                                        (0267) .SECTION
                                        (0268) ;-----------------------------------------------------------------------------
                                        (0269) ;  FUNCTION NAME: Counter16_PwrUpd_wReadCounter
                                        (0270) ;
                                        (0271) ;  DESCRIPTION:
                                        (0272) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0273) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0274) ;     from the Count to the Compare registers by holding the clock low in
                                        (0275) ;     the MSB PSoC block.
                                        (0276) ;-----------------------------------------------------------------------------
                                        (0277) ;
                                        (0278) ;  ARGUMENTS: None
                                        (0279) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0280) ;  SIDE EFFECTS:
                                        (0281) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0282) ;     2) The A and X registers may be modified by this or future implementations
                                        (0283) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0284) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0285) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0286) ;        functions.
                                        (0287) ;
                                        (0288)  Counter16_PwrUpd_wReadCounter:
                                        (0289) _Counter16_PwrUpd_wReadCounter:
                                        (0290)  wCounter16_PwrUpd_ReadCounter:                     ; this name deprecated
                                        (0291) _wCounter16_PwrUpd_ReadCounter:                     ; this name deprecated
                                        (0292) 
                                        (0293)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0294)    bOrigControlReg:        EQU   2                  ; Frame offset to temp CR0     store
                                        (0295)    bOrigClockSetting:      EQU   3                  ; Frame offset to temp Input   store
                                        (0296)    wCounter:               EQU   4                  ; Frame offset to temp Count   store
                                        (0297)    STACK_FRAME_SIZE:       EQU   6                  ; max stack frame size is 6 bytes
                                        (0298) 
                                        (0299)    RAM_PROLOGUE RAM_USE_CLASS_2
0BA3: 4F       MOV   X,SP               (0300)    mov   X, SP                                      ; X <-  stack frame pointer
0BA4: 5D 36    MOV   A,REG[0x36]        (0301)    mov   A, reg[Counter16_PwrUpd_COMPARE_MSB_REG]   ; Save the Compare register on the stack
0BA6: 08       PUSH  A                  (0302)    push  A                                          ;
0BA7: 5D 32    MOV   A,REG[0x32]        (0303)    mov   A, reg[Counter16_PwrUpd_COMPARE_LSB_REG]   ;
0BA9: 08       PUSH  A                  (0304)    push  A                                          ;   -stack frame now 2 bytes-
0BAA: 5D 33    MOV   A,REG[0x33]        (0305)    mov   A, reg[Counter16_PwrUpd_CONTROL_LSB_REG]   ; Save CR0 (running or stopped state)
0BAC: 08       PUSH  A                  (0306)    push  A                                          ;   -stack frame now 3 bytes-
0BAD: 41 33 FE AND   REG[0x33],0xFE     
0BB0: 71 10    OR    F,0x10             
                                        (0307)    Counter16_PwrUpd_Stop_M                          ; Disable (stop) the Counter if running
                                        (0308)    M8C_SetBank1                                     ;
0BB2: 5D 31    MOV   A,REG[0x31]        (0309)    mov   A, reg[Counter16_PwrUpd_INPUT_LSB_REG]     ; save the LSB clock input setting
0BB4: 08       PUSH  A                  (0310)    push  A                                          ;   on the stack (now 4 bytes) and ...
                                        (0311)                                                     ;   hold the clock low:
0BB5: 62 31 00 MOV   REG[0x31],0x0      (0312)    mov   reg[Counter16_PwrUpd_INPUT_LSB_REG], INPUT_REG_NULL
0BB8: 70 EF    AND   F,0xEF             
                                        (0313)    M8C_SetBank0                                     ; Extract the Count via DR2 register
0BBA: 5D 34    MOV   A,REG[0x34]        (0314)    mov   A, reg[Counter16_PwrUpd_COUNTER_MSB_REG]   ; DR2 <- DR0 (in the MSB block)
0BBC: 5D 36    MOV   A,REG[0x36]        (0315)    mov   A, reg[Counter16_PwrUpd_COMPARE_MSB_REG]   ; Stash the Count MSB on the stack
0BBE: 08       PUSH  A                  (0316)    push  A                                          ;   -stack frame is now 5 bytes
0BBF: 5D 30    MOV   A,REG[0x30]        (0317)    mov   A, reg[Counter16_PwrUpd_COUNTER_LSB_REG]   ; DR2 <- DR0 (in the LSB block)
0BC1: 5D 32    MOV   A,REG[0x32]        (0318)    mov   A, reg[Counter16_PwrUpd_COMPARE_LSB_REG]   ; Stash the Count LSB on the stack
0BC3: 08       PUSH  A                  (0319)    push  A                                          ;   -stack frame is now 6 bytes-
0BC4: 52 00    MOV   A,[X+0]            (0320)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0BC6: 60 36    MOV   REG[0x36],A        (0321)    mov   reg[Counter16_PwrUpd_COMPARE_MSB_REG], A   ;
0BC8: 52 01    MOV   A,[X+1]            (0322)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
0BCA: 60 32    MOV   REG[0x32],A        (0323)    mov   reg[Counter16_PwrUpd_COMPARE_LSB_REG], A   ;
0BCC: 71 10    OR    F,0x10             
                                        (0324)    M8C_SetBank1                                     ; ---Restore the counter operation
0BCE: 52 03    MOV   A,[X+3]            (0325)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0BD0: 60 31    MOV   REG[0x31],A        (0326)    mov   reg[Counter16_PwrUpd_INPUT_LSB_REG], A     ;   and restore it
0BD2: 70 EF    AND   F,0xEF             
                                        (0327)    M8C_SetBank0                                     ; Now re-enable (start) the counter
0BD4: 52 02    MOV   A,[X+2]            (0328)    mov   A, [X+bOrigControlReg]                     ;   if it was running when
0BD6: 60 33    MOV   REG[0x33],A        (0329)    mov   reg[Counter16_PwrUpd_CONTROL_LSB_REG], A   ;   this function was first called
0BD8: 18       POP   A                  (0330)    pop   A                                          ; Setup the return value
0BD9: 20       POP   X                  (0331)    pop   X                                          ;
0BDA: 38 FC    ADD   SP,0xFC            (0332)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
0BDC: 70 3F    AND   F,0x3F             
0BDE: 71 C0    OR    F,0xC0             
                                        (0333)    RAM_EPILOGUE RAM_USE_CLASS_2
0BE0: 7F       RET                      (0334)    ret
                                        (0335) 
                                        (0336) .ENDSECTION
                                        (0337) 
                                        (0338) ; End of File Counter16_PwrUpd.asm
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
0BE1: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
0BE2: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
0BE4: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
0BE6: 78       DEC   A                  (0062)     dec   A
0BE7: BF FC    JNZ   0x0BE4             (0063)     jnz   DELAY50US
                                        (0064) 
0BE9: 18       POP   A                  (0065) 	pop A
0BEA: 78       DEC   A                  (0066) 	dec   A
0BEB: BF F5    JNZ   __UserModules_end|Delay10msTimes|_Delay10msTimes|__text_start(0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
0BED: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
0BEE: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
0BF0: 78       DEC   A                  (0104) 	dec A
0BF1: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
0BF3: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
0BFC: 08       PUSH  A                  (0149)     push  A
0BFD: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
0BFF: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
0C01: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
0C03: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
0C05: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
0C07: D0 06    JNC   0x0C0E             (0155)     jnc   Delay50u_End
0C09: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
0C0B: 78       DEC   A                  (0158)     dec   A                            ; [4]
0C0C: BF FE    JNZ   0x0C0B             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
0C0E: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
0C0F: 7F       RET                      (0163)     ret
FILE: C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "delay.h"
(0008) #include <stdlib.h>
(0009) #include <stdio.h>
(0010) #include <math.h> 
(0011) #include <stdbool.h>
(0012) #include <string.h>
(0013) 
(0014) //#define DEBUG
(0015) 
(0016) #define DECIMAL_COUNT_SYSTEM_BASIS  10
(0017) #define DECIMAL_NUMBER_SIZE         4
(0018) #define HOUR_MAX   	          	    23
(0019) 
(0020) // NMEA definitions
(0021) #define NMEA_MAX_SIZE             82
(0022) #define NMEA_START_DELIMITER      '$'
(0023) #define NMEA_END_DELIMITER        0x0A
(0024) #define NMEA_CHECKSUM_DELIMITER   '*'
(0025) #define NMEA_FIELD_DELIMITER      ','
(0026) #define NMEA_HEADER_SIZE          3
(0027) 
(0028) #define NMEA_GPRMC_UTC              1
(0029) #define NMEA_GPRMC_DATE      		7
(0030) #define NMEA_GPRMC_HDOP             8
(0031) #define NMEA_GPRMC_ALTITUDE         9
(0032) 
(0033) #define NMEA_GPRMC_VALID            'A'
(0034) #define NMEA_GPRMC_INVALID          'V'
(0035) 
(0036) // System settings
(0037) #define POWER_MAX	14000
(0038) #define POWER_STEP	1
(0039) #define GMT_OFFSET	3
(0040) #define WAIT_PERIOD			2			// Global non critical tasks execution period in x10 miliseconds
(0041) #define OVERRIDE_TIMEOUT	540000		// x20 miliseconds (540000 = 3 hours)
(0042) #define POWER_UPDATE_SLOW   2000
(0043) #define POWER_UPDATE_FAST   100
(0044) #define HW_ID				"1"
(0045) 
(0046) #define NMEA_GPRMC_EMPTY            "GPRMC"
(0047) #define NMEA_SHFTL_EMPTY            "SHFTL"
(0048) #define NMEA_FIELD_CMD              1
(0049) #define NMEA_FIELD_ID               2
(0050) 
(0051) const char hw_id[] = HW_ID;
(0052) 
(0053) const char cmd_on[] = "ON";
(0054) const char cmd_off[] = "OFF";
(0055) const char cmd_fon[] = "FON";
(0056) const char cmd_foff[] = "FOFF";
(0057) char nmea_gprmc_empty[] = NMEA_GPRMC_EMPTY;
(0058) char nmea_shftl_empty[] = NMEA_SHFTL_EMPTY;
(0059) char fld_buf[NMEA_MAX_SIZE];
(0060) bool override = false;
(0061) unsigned long override_counter;
(0062) 
(0063) unsigned int const schedule[2][2] = {
(0064) 		                                {5, POWER_MAX},
(0065) 		                                {20, 0}
(0066)                               		};
(0067) 
(0068) struct datetime {
(0069) 	unsigned char sec;
(0070) 	unsigned char min;
(0071) 	unsigned char hour;
(0072) 	unsigned char day;
(0073) 	unsigned char month;
(0074) 	unsigned char year;
(0075) 	bool valid;
(0076) };
(0077) 
(0078) unsigned int power_target = 0;
(0079) 
(0080) // NMEA variables
(0081) char NMEA_buffer_gps[NMEA_MAX_SIZE] = "NMEA_buffer_gps";
(0082) char NMEA_buffer_rf[NMEA_MAX_SIZE] = "NMEA_buffer_rf";
(0083) char NMEA_GPRMC[NMEA_MAX_SIZE] = NMEA_GPRMC_EMPTY;
(0084) char NMEA_SHFTL[NMEA_MAX_SIZE] = NMEA_SHFTL_EMPTY;
(0085) bool NMEA_cmd_received = false;
(0086) unsigned char NMEA_pointer_gps;
(0087) unsigned char NMEA_pointer_rf;
(0088) 
(0089) struct datetime gps_datetime = {0, 0, 0, 0, 0, 0, false};
(0090) struct datetime local_datetime = {0, 0, 0, 0, 0, 0, false};
(0091) 
(0092) void set_power(unsigned int pwr);
(0093) void override_enable(void);
(0094) void update_power(void);
(0095) void schedule_processing(unsigned char hour);
(0096) void schedule_init(void);
(0097) void rtc_update(struct datetime *datetime);
(0098) bool check_fld(const char *cmd);
(0099) 
(0100) // NMEA functions
(0101) bool NMEA_handle_packet(char *packet, char *NMEA_data);
(0102) void NMEA_GetField(char *packet, unsigned char field, char *result);
(0103) void NMEA_GetTimeUTC(char *gprmc, struct datetime *gps_datetime);
(0104) 
(0105) unsigned char str_cmp(char *str1, char *str2, unsigned char stop);
(0106) unsigned char str_cmp_const(char *str1, const char *str2, unsigned char stop);
(0107) unsigned char byte_to_bcd(unsigned char byte);
(0108) unsigned char bcd_to_byte(unsigned char reg);
(0109) void utc_to_local(struct datetime *gps_datetime, struct datetime *local_datetime);
(0110) 
(0111) void gps_signal(void)
(0112) {
_gps_signal:
    0C10: 10       PUSH  X
    0C11: 4F       MOV   X,SP
    0C12: 38 02    ADD   SP,0x2
(0113) 	M8C_DisableGInt;
    0C14: 70 FE    AND   F,0xFE
(0114) 	if (NMEA_pointer_gps >= NMEA_MAX_SIZE) NMEA_pointer_gps = 0;
    0C16: 62 D0 01 MOV   REG[0xD0],0x1
    0C19: 3C FE 52 CMP   [NMEA_pointer_gps],0x52
    0C1C: C0 07    JC    0x0C24
    0C1E: 62 D0 01 MOV   REG[0xD0],0x1
    0C21: 55 FE 00 MOV   [NMEA_pointer_gps],0x0
(0115)     NMEA_buffer_gps[NMEA_pointer_gps] = RX8_GPS_bReadRxData();	
    0C24: 10       PUSH  X
    0C25: 7C 08 42 LCALL bRX8_GPS_ReadRxData|_RX8_GPS_bReadRxData|RX8_GPS_bReadRxData|_bRX8_GPS_ReadRxData
    0C28: 20       POP   X
    0C29: 62 D0 00 MOV   REG[0xD0],0x0
    0C2C: 53 D7    MOV   [__r0],A
    0C2E: 62 D0 01 MOV   REG[0xD0],0x1
    0C31: 51 FE    MOV   A,[NMEA_pointer_gps]
    0C33: 62 D0 00 MOV   REG[0xD0],0x0
    0C36: 53 D4    MOV   [__r3],A
    0C38: 55 D5 00 MOV   [__r2],0x0
    0C3B: 06 D4 05 ADD   [__r3],0x5
    0C3E: 0E D5 00 ADC   [__r2],0x0
    0C41: 51 D5    MOV   A,[__r2]
    0C43: 60 D5    MOV   REG[0xD5],A
    0C45: 51 D7    MOV   A,[__r0]
    0C47: 3F D4    MVI   [__r3],A
(0116)     NMEA_buffer_gps[NMEA_pointer_gps + 1] = 0;	
    0C49: 62 D0 01 MOV   REG[0xD0],0x1
    0C4C: 51 FE    MOV   A,[NMEA_pointer_gps]
    0C4E: 62 D0 00 MOV   REG[0xD0],0x0
    0C51: 53 D6    MOV   [__r1],A
    0C53: 55 D7 00 MOV   [__r0],0x0
    0C56: 06 D6 06 ADD   [__r1],0x6
    0C59: 0E D7 00 ADC   [__r0],0x0
    0C5C: 51 D7    MOV   A,[__r0]
    0C5E: 60 D5    MOV   REG[0xD5],A
    0C60: 50 00    MOV   A,0x0
    0C62: 3F D6    MVI   [__r1],A
(0117)     switch(NMEA_buffer_gps[NMEA_pointer_gps])
    0C64: 62 D0 01 MOV   REG[0xD0],0x1
    0C67: 51 FE    MOV   A,[NMEA_pointer_gps]
    0C69: 62 D0 00 MOV   REG[0xD0],0x0
    0C6C: 53 D6    MOV   [__r1],A
    0C6E: 55 D7 00 MOV   [__r0],0x0
    0C71: 06 D6 05 ADD   [__r1],0x5
    0C74: 0E D7 00 ADC   [__r0],0x0
    0C77: 51 D7    MOV   A,[__r0]
    0C79: 60 D4    MOV   REG[0xD4],A
    0C7B: 3E D6    MVI   A,[__r1]
    0C7D: 54 01    MOV   [X+1],A
    0C7F: 56 00 00 MOV   [X+0],0x0
    0C82: 52 01    MOV   A,[X+1]
    0C84: 11 0A    SUB   A,0xA
    0C86: 53 CA    MOV   [__rY],A
    0C88: 52 00    MOV   A,[X+0]
    0C8A: 31 80    XOR   A,0x80
    0C8C: 19 80    SBB   A,0x80
    0C8E: C0 2B    JC    0x0CBA
    0C90: 2A CA    OR    A,[__rY]
    0C92: A0 15    JZ    0x0CA8
    0C94: 3D 00 00 CMP   [X+0],0x0
    0C97: B0 06    JNZ   0x0C9E
    0C99: 3D 01 24 CMP   [X+1],0x24
    0C9C: A0 03    JZ    0x0CA0
    0C9E: 80 1B    JMP   0x0CBA
(0118)     {
(0119)         case NMEA_START_DELIMITER:
(0120)         NMEA_pointer_gps = 0;
    0CA0: 62 D0 01 MOV   REG[0xD0],0x1
    0CA3: 55 FE 00 MOV   [NMEA_pointer_gps],0x0
(0121)         break;
    0CA6: 80 18    JMP   0x0CBF
(0122)         
(0123)         case NMEA_END_DELIMITER:
(0124)         NMEA_handle_packet(NMEA_buffer_gps, NMEA_GPRMC);
    0CA8: 50 01    MOV   A,0x1
    0CAA: 08       PUSH  A
    0CAB: 50 00    MOV   A,0x0
    0CAD: 08       PUSH  A
    0CAE: 50 00    MOV   A,0x0
    0CB0: 08       PUSH  A
    0CB1: 50 05    MOV   A,0x5
    0CB3: 08       PUSH  A
    0CB4: 96 6B    CALL  _NMEA_handle_packet
    0CB6: 38 FC    ADD   SP,0xFC
(0125)         break;
    0CB8: 80 06    JMP   0x0CBF
(0126)         
(0127)         default:
(0128)         NMEA_pointer_gps++;
    0CBA: 62 D0 01 MOV   REG[0xD0],0x1
    0CBD: 76 FE    INC   [NMEA_pointer_gps]
(0129)         break;
(0130)     }
(0131) 	M8C_EnableGInt;
    0CBF: 71 01    OR    F,0x1
    0CC1: 38 FE    ADD   SP,0xFE
    0CC3: 20       POP   X
    0CC4: 7F       RET   
(0132) }
(0133) 
(0134) void rf_signal(void)
(0135) {	
_rf_signal:
    0CC5: 10       PUSH  X
    0CC6: 4F       MOV   X,SP
    0CC7: 38 02    ADD   SP,0x2
(0136) 	M8C_DisableGInt;
    0CC9: 70 FE    AND   F,0xFE
(0137) 	if (NMEA_pointer_rf >= NMEA_MAX_SIZE) NMEA_pointer_rf = 0;
    0CCB: 62 D0 00 MOV   REG[0xD0],0x0
    0CCE: 3C F6 52 CMP   [NMEA_pointer_rf],0x52
    0CD1: C0 07    JC    0x0CD9
    0CD3: 62 D0 00 MOV   REG[0xD0],0x0
    0CD6: 55 F6 00 MOV   [NMEA_pointer_rf],0x0
(0138)     NMEA_buffer_rf[NMEA_pointer_rf] = RX8_RF_bReadRxData();	
    0CD9: 10       PUSH  X
    0CDA: 7C 06 5C LCALL _RX8_RF_bReadRxData|bRX8_RF_ReadRxData|RX8_RF_bReadRxData|_bRX8_RF_ReadRxData
    0CDD: 20       POP   X
    0CDE: 62 D0 00 MOV   REG[0xD0],0x0
    0CE1: 53 D7    MOV   [__r0],A
    0CE3: 62 D0 00 MOV   REG[0xD0],0x0
    0CE6: 51 F6    MOV   A,[NMEA_pointer_rf]
    0CE8: 62 D0 00 MOV   REG[0xD0],0x0
    0CEB: 53 D4    MOV   [__r3],A
    0CED: 55 D5 00 MOV   [__r2],0x0
    0CF0: 06 D4 52 ADD   [__r3],0x52
    0CF3: 0E D5 01 ADC   [__r2],0x1
    0CF6: 51 D5    MOV   A,[__r2]
    0CF8: 60 D5    MOV   REG[0xD5],A
    0CFA: 51 D7    MOV   A,[__r0]
    0CFC: 3F D4    MVI   [__r3],A
(0139)     NMEA_buffer_rf[NMEA_pointer_rf + 1] = 0;	
    0CFE: 62 D0 00 MOV   REG[0xD0],0x0
    0D01: 51 F6    MOV   A,[NMEA_pointer_rf]
    0D03: 62 D0 00 MOV   REG[0xD0],0x0
    0D06: 53 D6    MOV   [__r1],A
    0D08: 55 D7 00 MOV   [__r0],0x0
    0D0B: 06 D6 53 ADD   [__r1],0x53
    0D0E: 0E D7 01 ADC   [__r0],0x1
    0D11: 51 D7    MOV   A,[__r0]
    0D13: 60 D5    MOV   REG[0xD5],A
    0D15: 50 00    MOV   A,0x0
    0D17: 3F D6    MVI   [__r1],A
(0140)     switch(NMEA_buffer_rf[NMEA_pointer_rf])
    0D19: 62 D0 00 MOV   REG[0xD0],0x0
    0D1C: 51 F6    MOV   A,[NMEA_pointer_rf]
    0D1E: 62 D0 00 MOV   REG[0xD0],0x0
    0D21: 53 D6    MOV   [__r1],A
    0D23: 55 D7 00 MOV   [__r0],0x0
    0D26: 06 D6 52 ADD   [__r1],0x52
    0D29: 0E D7 01 ADC   [__r0],0x1
    0D2C: 51 D7    MOV   A,[__r0]
    0D2E: 60 D4    MOV   REG[0xD4],A
    0D30: 3E D6    MVI   A,[__r1]
    0D32: 54 01    MOV   [X+1],A
    0D34: 56 00 00 MOV   [X+0],0x0
    0D37: 52 01    MOV   A,[X+1]
    0D39: 11 0A    SUB   A,0xA
    0D3B: 53 CA    MOV   [__rY],A
    0D3D: 52 00    MOV   A,[X+0]
    0D3F: 31 80    XOR   A,0x80
    0D41: 19 80    SBB   A,0x80
    0D43: C0 41    JC    0x0D85
    0D45: 2A CA    OR    A,[__rY]
    0D47: A0 15    JZ    0x0D5D
    0D49: 3D 00 00 CMP   [X+0],0x0
    0D4C: B0 06    JNZ   0x0D53
    0D4E: 3D 01 24 CMP   [X+1],0x24
    0D51: A0 03    JZ    0x0D55
    0D53: 80 31    JMP   0x0D85
(0141)     {
(0142)         case NMEA_START_DELIMITER:
(0143)         NMEA_pointer_rf = 0;
    0D55: 62 D0 00 MOV   REG[0xD0],0x0
    0D58: 55 F6 00 MOV   [NMEA_pointer_rf],0x0
(0144)         break;
    0D5B: 80 2E    JMP   0x0D8A
(0145)         
(0146)         case NMEA_END_DELIMITER:
(0147)         NMEA_cmd_received = NMEA_handle_packet(NMEA_buffer_rf, NMEA_SHFTL);
    0D5D: 50 00    MOV   A,0x0
    0D5F: 08       PUSH  A
    0D60: 50 57    MOV   A,0x57
    0D62: 08       PUSH  A
    0D63: 50 01    MOV   A,0x1
    0D65: 08       PUSH  A
    0D66: 50 52    MOV   A,0x52
    0D68: 08       PUSH  A
    0D69: 95 B6    CALL  _NMEA_handle_packet
    0D6B: 38 FC    ADD   SP,0xFC
    0D6D: 62 D0 00 MOV   REG[0xD0],0x0
    0D70: 51 D6    MOV   A,[__r1]
    0D72: 08       PUSH  A
    0D73: 51 D7    MOV   A,[__r0]
    0D75: 62 D0 00 MOV   REG[0xD0],0x0
    0D78: 53 F4    MOV   [NMEA_cmd_received],A
    0D7A: 18       POP   A
    0D7B: 53 F5    MOV   [NMEA_cmd_received+1],A
(0148)         NMEA_buffer_rf[0] = 0;
    0D7D: 62 D0 01 MOV   REG[0xD0],0x1
    0D80: 55 52 00 MOV   [NMEA_buffer_rf],0x0
(0149)         break;
    0D83: 80 06    JMP   0x0D8A
(0150)         
(0151)         default:
(0152)         NMEA_pointer_rf++;
    0D85: 62 D0 00 MOV   REG[0xD0],0x0
    0D88: 76 F6    INC   [NMEA_pointer_rf]
(0153)         break;
(0154)     }
(0155) 	M8C_EnableGInt;
    0D8A: 71 01    OR    F,0x1
    0D8C: 38 FE    ADD   SP,0xFE
    0D8E: 20       POP   X
    0D8F: 7F       RET   
(0156) }
(0157) 
(0158) void main(void)
(0159) {
_main:
  t                    --> X+0
    0D90: 10       PUSH  X
    0D91: 4F       MOV   X,SP
    0D92: 38 01    ADD   SP,0x1
(0160) 	unsigned char t;
(0161) 	
(0162) 	M8C_EnableGInt; // Uncomment this line to enable Global Interrupts
    0D94: 71 01    OR    F,0x1
(0163) 
(0164) 	RTC_SetHour(0x08);
    0D96: 10       PUSH  X
    0D97: 50 08    MOV   A,0x8
    0D99: 7C 09 9B LCALL _RTC_SetHour
(0165) 	RTC_SetMinute(0x00);
    0D9C: 50 00    MOV   A,0x0
    0D9E: 7C 09 83 LCALL _RTC_SetMinute
(0166) 	RTC_SetSecond(0x00);
    0DA1: 50 00    MOV   A,0x0
    0DA3: 7C 09 6B LCALL _RTC_SetSecond
(0167) 	RTC_Start();
    0DA6: 7C 09 30 LCALL _RTC_Start
(0168) 	PWM16_CH0_Start();
    0DA9: 7C 0A 19 LCALL _PWM16_CH0_Start
(0169) 	PWM16_CH1_Start();
    0DAC: 7C 09 BC LCALL _PWM16_CH1_Start
(0170) 	Counter16_PwrUpd_Start();
    0DAF: 7C 0B 89 LCALL _Counter16_PwrUpd_Start
(0171) 	Counter8_RF_clk_Start();
    0DB2: 7C 0A B4 LCALL _Counter8_RF_clk_Start
(0172) 	RX8_GPS_Start(RX8_GPS_PARITY_NONE);
    0DB5: 50 00    MOV   A,0x0
    0DB7: 7C 08 39 LCALL _RX8_GPS_Start
(0173) 	RX8_RF_Start(RX8_GPS_PARITY_ODD);
    0DBA: 50 06    MOV   A,0x6
    0DBC: 7C 06 53 LCALL _RX8_RF_Start
(0174) 	
(0175) 	RX8_GPS_EnableInt();
    0DBF: 7C 08 31 LCALL _RX8_GPS_EnableInt
(0176) 	RX8_RF_EnableInt();
    0DC2: 7C 06 4B LCALL _RX8_RF_EnableInt
(0177) 	Counter16_PwrUpd_EnableInt();
    0DC5: 7C 0B 81 LCALL _Counter16_PwrUpd_EnableInt
(0178) 		
(0179) 	Counter16_PwrUpd_WritePeriod(POWER_UPDATE_SLOW);
    0DC8: 57 07    MOV   X,0x7
    0DCA: 50 D0    MOV   A,0xD0
    0DCC: 7C 0B 91 LCALL _Counter16_PwrUpd_WritePeriod
    0DCF: 20       POP   X
(0180) 	set_power(POWER_MAX);
    0DD0: 50 36    MOV   A,0x36
    0DD2: 08       PUSH  A
    0DD3: 50 B0    MOV   A,0xB0
    0DD5: 08       PUSH  A
    0DD6: 91 E5    CALL  _set_power
    0DD8: 38 FE    ADD   SP,0xFE
(0181) 	LED_Blue_Off();
    0DDA: 10       PUSH  X
    0DDB: 7C 0A 71 LCALL LED_Blue_Start|LED_Blue_Off|_LED_Blue_Start|_LED_Blue_Stop|_LED_Blue_Off|LED_Blue_Stop
    0DDE: 20       POP   X
    0DDF: 81 D6    JMP   0x0FB6
(0182) 	
(0183) 	while (1)
(0184) 	{		
(0185) 		// Handle commands
(0186) 		if (NMEA_cmd_received)
    0DE1: 62 D0 00 MOV   REG[0xD0],0x0
    0DE4: 3C F4 00 CMP   [NMEA_cmd_received],0x0
    0DE7: B0 06    JNZ   0x0DEE
    0DE9: 3C F5 00 CMP   [NMEA_cmd_received+1],0x0
    0DEC: A1 35    JZ    0x0F22
(0187)         {
(0188) 			LED_Blue_On();
    0DEE: 10       PUSH  X
    0DEF: 7C 0A 6D LCALL _LED_Blue_On
    0DF2: 20       POP   X
(0189) 			NMEA_cmd_received = false;		
    0DF3: 62 D0 00 MOV   REG[0xD0],0x0
    0DF6: 55 F5 00 MOV   [NMEA_cmd_received+1],0x0
    0DF9: 55 F4 00 MOV   [NMEA_cmd_received],0x0
(0190)             
(0191)             // NMEA_SHFTL handle
(0192) 			NMEA_GetField(NMEA_SHFTL, NMEA_FIELD_ID, fld_buf);
    0DFC: 50 01    MOV   A,0x1
    0DFE: 08       PUSH  A
    0DFF: 50 A4    MOV   A,0xA4
    0E01: 08       PUSH  A
    0E02: 50 02    MOV   A,0x2
    0E04: 08       PUSH  A
    0E05: 50 00    MOV   A,0x0
    0E07: 08       PUSH  A
    0E08: 50 57    MOV   A,0x57
    0E0A: 08       PUSH  A
    0E0B: 93 D9    CALL  _NMEA_GetField
(0193) 			if(check_fld(hw_id) || check_fld("0"))	// Check ID
    0E0D: 50 01    MOV   A,0x1
    0E0F: 08       PUSH  A
    0E10: 50 90    MOV   A,0x90
    0E12: 08       PUSH  A
    0E13: 93 84    CALL  _check_fld
    0E15: 38 F9    ADD   SP,0xF9
    0E17: 62 D0 00 MOV   REG[0xD0],0x0
    0E1A: 3C D7 00 CMP   [__r0],0x0
    0E1D: B0 1D    JNZ   0x0E3B
    0E1F: 3C D6 00 CMP   [__r1],0x0
    0E22: B0 18    JNZ   0x0E3B
    0E24: 50 01    MOV   A,0x1
    0E26: 08       PUSH  A
    0E27: 50 AA    MOV   A,0xAA
    0E29: 08       PUSH  A
    0E2A: 93 6D    CALL  _check_fld
    0E2C: 38 FE    ADD   SP,0xFE
    0E2E: 62 D0 00 MOV   REG[0xD0],0x0
    0E31: 3C D7 00 CMP   [__r0],0x0
    0E34: B0 06    JNZ   0x0E3B
    0E36: 3C D6 00 CMP   [__r1],0x0
    0E39: A0 E8    JZ    0x0F22
(0194) 			{			
(0195) 	            NMEA_GetField(NMEA_SHFTL, NMEA_FIELD_CMD, fld_buf);
    0E3B: 50 01    MOV   A,0x1
    0E3D: 08       PUSH  A
    0E3E: 50 A4    MOV   A,0xA4
    0E40: 08       PUSH  A
    0E41: 50 01    MOV   A,0x1
    0E43: 08       PUSH  A
    0E44: 50 00    MOV   A,0x0
    0E46: 08       PUSH  A
    0E47: 50 57    MOV   A,0x57
    0E49: 08       PUSH  A
    0E4A: 93 9A    CALL  _NMEA_GetField
(0196) 	            if(check_fld(cmd_on))
    0E4C: 50 01    MOV   A,0x1
    0E4E: 08       PUSH  A
    0E4F: 50 92    MOV   A,0x92
    0E51: 08       PUSH  A
    0E52: 93 45    CALL  _check_fld
    0E54: 38 F9    ADD   SP,0xF9
    0E56: 62 D0 00 MOV   REG[0xD0],0x0
    0E59: 3C D7 00 CMP   [__r0],0x0
    0E5C: B0 06    JNZ   0x0E63
    0E5E: 3C D6 00 CMP   [__r1],0x0
    0E61: A0 18    JZ    0x0E7A
(0197) 	            {
(0198) 	                Counter16_PwrUpd_WritePeriod(POWER_UPDATE_SLOW);
    0E63: 10       PUSH  X
    0E64: 57 07    MOV   X,0x7
    0E66: 50 D0    MOV   A,0xD0
    0E68: 7C 0B 91 LCALL _Counter16_PwrUpd_WritePeriod
    0E6B: 20       POP   X
(0199) 					set_power(POWER_MAX);
    0E6C: 50 36    MOV   A,0x36
    0E6E: 08       PUSH  A
    0E6F: 50 B0    MOV   A,0xB0
    0E71: 08       PUSH  A
    0E72: 91 49    CALL  _set_power
    0E74: 38 FE    ADD   SP,0xFE
(0200) 					override_enable();	
    0E76: 91 64    CALL  _override_enable
(0201) 	            }
    0E78: 80 8C    JMP   0x0F05
(0202) 	            else if(check_fld(cmd_off))
    0E7A: 50 01    MOV   A,0x1
    0E7C: 08       PUSH  A
    0E7D: 50 95    MOV   A,0x95
    0E7F: 08       PUSH  A
    0E80: 93 17    CALL  _check_fld
    0E82: 38 FE    ADD   SP,0xFE
    0E84: 62 D0 00 MOV   REG[0xD0],0x0
    0E87: 3C D7 00 CMP   [__r0],0x0
    0E8A: B0 06    JNZ   0x0E91
    0E8C: 3C D6 00 CMP   [__r1],0x0
    0E8F: A0 16    JZ    0x0EA6
(0203) 	            {
(0204) 	                Counter16_PwrUpd_WritePeriod(POWER_UPDATE_SLOW);
    0E91: 10       PUSH  X
    0E92: 57 07    MOV   X,0x7
    0E94: 50 D0    MOV   A,0xD0
    0E96: 7C 0B 91 LCALL _Counter16_PwrUpd_WritePeriod
    0E99: 20       POP   X
(0205) 					set_power(0);
    0E9A: 50 00    MOV   A,0x0
    0E9C: 08       PUSH  A
    0E9D: 08       PUSH  A
    0E9E: 91 1D    CALL  _set_power
    0EA0: 38 FE    ADD   SP,0xFE
(0206) 					override_enable();	
    0EA2: 91 38    CALL  _override_enable
(0207) 	            }
    0EA4: 80 60    JMP   0x0F05
(0208) 				else if(check_fld(cmd_fon))
    0EA6: 50 01    MOV   A,0x1
    0EA8: 08       PUSH  A
    0EA9: 50 99    MOV   A,0x99
    0EAB: 08       PUSH  A
    0EAC: 92 EB    CALL  _check_fld
    0EAE: 38 FE    ADD   SP,0xFE
    0EB0: 62 D0 00 MOV   REG[0xD0],0x0
    0EB3: 3C D7 00 CMP   [__r0],0x0
    0EB6: B0 06    JNZ   0x0EBD
    0EB8: 3C D6 00 CMP   [__r1],0x0
    0EBB: A0 18    JZ    0x0ED4
(0209) 	            {
(0210) 	                Counter16_PwrUpd_WritePeriod(POWER_UPDATE_FAST);
    0EBD: 10       PUSH  X
    0EBE: 57 00    MOV   X,0x0
    0EC0: 50 64    MOV   A,0x64
    0EC2: 7C 0B 91 LCALL _Counter16_PwrUpd_WritePeriod
    0EC5: 20       POP   X
(0211) 					set_power(POWER_MAX);
    0EC6: 50 36    MOV   A,0x36
    0EC8: 08       PUSH  A
    0EC9: 50 B0    MOV   A,0xB0
    0ECB: 08       PUSH  A
    0ECC: 90 EF    CALL  _set_power
    0ECE: 38 FE    ADD   SP,0xFE
(0212) 					override_enable();	
    0ED0: 91 0A    CALL  _override_enable
(0213) 	            }
    0ED2: 80 32    JMP   0x0F05
(0214) 	            else if(check_fld(cmd_foff))
    0ED4: 50 01    MOV   A,0x1
    0ED6: 08       PUSH  A
    0ED7: 50 9D    MOV   A,0x9D
    0ED9: 08       PUSH  A
    0EDA: 92 BD    CALL  _check_fld
    0EDC: 38 FE    ADD   SP,0xFE
    0EDE: 62 D0 00 MOV   REG[0xD0],0x0
    0EE1: 3C D7 00 CMP   [__r0],0x0
    0EE4: B0 06    JNZ   0x0EEB
    0EE6: 3C D6 00 CMP   [__r1],0x0
    0EE9: A0 16    JZ    0x0F00
(0215) 	            {
(0216) 	                Counter16_PwrUpd_WritePeriod(POWER_UPDATE_FAST);
    0EEB: 10       PUSH  X
    0EEC: 57 00    MOV   X,0x0
    0EEE: 50 64    MOV   A,0x64
    0EF0: 7C 0B 91 LCALL _Counter16_PwrUpd_WritePeriod
    0EF3: 20       POP   X
(0217) 					set_power(0);
    0EF4: 50 00    MOV   A,0x0
    0EF6: 08       PUSH  A
    0EF7: 08       PUSH  A
    0EF8: 90 C3    CALL  _set_power
    0EFA: 38 FE    ADD   SP,0xFE
(0218) 					override_enable();	
    0EFC: 90 DE    CALL  _override_enable
(0219) 	            }
    0EFE: 80 06    JMP   0x0F05
(0220) 				else LED_Blue_Off();
    0F00: 10       PUSH  X
    0F01: 7C 0A 71 LCALL LED_Blue_Start|LED_Blue_Off|_LED_Blue_Start|_LED_Blue_Stop|_LED_Blue_Off|LED_Blue_Stop
    0F04: 20       POP   X
(0221) 				
(0222) 	            NMEA_SHFTL[0] = 0;
    0F05: 62 D0 00 MOV   REG[0xD0],0x0
    0F08: 55 57 00 MOV   [NMEA_SHFTL],0x0
(0223) 	            strncat(NMEA_SHFTL, nmea_shftl_empty, NMEA_MAX_SIZE);
    0F0B: 50 00    MOV   A,0x0
    0F0D: 08       PUSH  A
    0F0E: 50 52    MOV   A,0x52
    0F10: 08       PUSH  A
    0F11: 50 00    MOV   A,0x0
    0F13: 08       PUSH  A
    0F14: 50 E8    MOV   A,0xE8
    0F16: 08       PUSH  A
    0F17: 50 00    MOV   A,0x0
    0F19: 08       PUSH  A
    0F1A: 50 57    MOV   A,0x57
    0F1C: 08       PUSH  A
    0F1D: 7C 1A 0A LCALL _strncat
    0F20: 38 FA    ADD   SP,0xFA
(0224) 			}
(0225) 		}		
(0226) 				
(0227) 		if(!override)
    0F22: 62 D0 01 MOV   REG[0xD0],0x1
    0F25: 3C FC 00 CMP   [override],0x0
    0F28: B0 50    JNZ   0x0F79
    0F2A: 3C FD 00 CMP   [override+1],0x0
    0F2D: B0 4B    JNZ   0x0F79
(0228) 		{
(0229) 			// Get datetime
(0230) 			local_datetime.valid = false;
    0F2F: 62 D0 00 MOV   REG[0xD0],0x0
    0F32: 55 DF 00 MOV   [local_datetime+7],0x0
    0F35: 55 DE 00 MOV   [local_datetime+6],0x0
(0231) 			NMEA_GetTimeUTC(NMEA_GPRMC, &gps_datetime);
    0F38: 50 00    MOV   A,0x0
    0F3A: 08       PUSH  A
    0F3B: 50 E0    MOV   A,0xE0
    0F3D: 08       PUSH  A
    0F3E: 50 01    MOV   A,0x1
    0F40: 08       PUSH  A
    0F41: 50 00    MOV   A,0x0
    0F43: 08       PUSH  A
    0F44: 95 03    CALL  _NMEA_GetTimeUTC
    0F46: 38 FC    ADD   SP,0xFC
(0232) 			if(gps_datetime.valid) 
    0F48: 62 D0 00 MOV   REG[0xD0],0x0
    0F4B: 3C E6 00 CMP   [gps_datetime+6],0x0
    0F4E: B0 06    JNZ   0x0F55
    0F50: 3C E7 00 CMP   [gps_datetime+7],0x0
    0F53: A0 1A    JZ    0x0F6E
(0233) 			{
(0234) 				utc_to_local(&gps_datetime, &local_datetime);
    0F55: 50 00    MOV   A,0x0
    0F57: 08       PUSH  A
    0F58: 50 D8    MOV   A,0xD8
    0F5A: 08       PUSH  A
    0F5B: 50 00    MOV   A,0x0
    0F5D: 08       PUSH  A
    0F5E: 50 E0    MOV   A,0xE0
    0F60: 08       PUSH  A
    0F61: 7C 17 6E LCALL _utc_to_local
(0235) 				rtc_update(&local_datetime);
    0F64: 50 00    MOV   A,0x0
    0F66: 08       PUSH  A
    0F67: 50 D8    MOV   A,0xD8
    0F69: 08       PUSH  A
    0F6A: 91 CB    CALL  _rtc_update
    0F6C: 38 FA    ADD   SP,0xFA
(0236) 			}
(0237) 			
(0238) 			// Scheduler
(0239) 			Counter16_PwrUpd_WritePeriod(POWER_UPDATE_SLOW);
    0F6E: 10       PUSH  X
    0F6F: 57 07    MOV   X,0x7
    0F71: 50 D0    MOV   A,0xD0
    0F73: 7C 0B 91 LCALL _Counter16_PwrUpd_WritePeriod
    0F76: 20       POP   X
(0240) 			schedule_init();
    0F77: 91 80    CALL  _schedule_init
(0241) 		}
(0242) 		
(0243) 		Delay10msTimes(WAIT_PERIOD);
    0F79: 10       PUSH  X
    0F7A: 50 02    MOV   A,0x2
    0F7C: 7C 0B E1 LCALL __UserModules_end|Delay10msTimes|_Delay10msTimes|__text_start
    0F7F: 20       POP   X
(0244) 		if (override_counter > 0) override_counter--;
    0F80: 62 D0 01 MOV   REG[0xD0],0x1
    0F83: 3C F6 00 CMP   [override_counter],0x0
    0F86: B0 10    JNZ   0x0F97
    0F88: 3C F7 00 CMP   [override_counter+1],0x0
    0F8B: B0 0B    JNZ   0x0F97
    0F8D: 3C F8 00 CMP   [override_counter+2],0x0
    0F90: B0 06    JNZ   0x0F97
    0F92: 3C F9 00 CMP   [override_counter+3],0x0
    0F95: A0 12    JZ    0x0FA8
    0F97: 62 D0 01 MOV   REG[0xD0],0x1
    0F9A: 16 F9 01 SUB   [override_counter+3],0x1
    0F9D: 1E F8 00 SBB   [override_counter+2],0x0
    0FA0: 1E F7 00 SBB   [override_counter+1],0x0
    0FA3: 1E F6 00 SBB   [override_counter],0x0
    0FA6: 80 0A    JMP   0x0FB1
(0245) 		else override = false;
    0FA8: 62 D0 01 MOV   REG[0xD0],0x1
    0FAB: 55 FD 00 MOV   [override+1],0x0
    0FAE: 55 FC 00 MOV   [override],0x0
(0246) 		LED_Blue_Off();
    0FB1: 10       PUSH  X
    0FB2: 7C 0A 71 LCALL LED_Blue_Start|LED_Blue_Off|_LED_Blue_Start|_LED_Blue_Stop|_LED_Blue_Off|LED_Blue_Stop
    0FB5: 20       POP   X
(0247) 	}
    0FB6: 8E 2A    JMP   0x0DE1
    0FB8: 38 FF    ADD   SP,0xFF
    0FBA: 20       POP   X
    0FBB: 8F FF    JMP   0x0FBB
(0248) }
(0249) 
(0250) void set_power(unsigned int pwr)
(0251) {
_set_power:
  pwr                  --> X-5
    0FBD: 10       PUSH  X
    0FBE: 4F       MOV   X,SP
(0252) 	if(pwr > POWER_MAX) pwr = POWER_MAX;
    0FBF: 50 B0    MOV   A,0xB0
    0FC1: 13 FC    SUB   A,[X-4]
    0FC3: 50 36    MOV   A,0x36
    0FC5: 1B FB    SBB   A,[X-5]
    0FC7: D0 07    JNC   0x0FCF
    0FC9: 56 FC B0 MOV   [X-4],0xB0
    0FCC: 56 FB 36 MOV   [X-5],0x36
(0253) 	power_target = pwr;
    0FCF: 62 D0 01 MOV   REG[0xD0],0x1
    0FD2: 52 FC    MOV   A,[X-4]
    0FD4: 53 FB    MOV   [power_target+1],A
    0FD6: 52 FB    MOV   A,[X-5]
    0FD8: 53 FA    MOV   [power_target],A
    0FDA: 20       POP   X
    0FDB: 7F       RET   
(0254) }
(0255) 
(0256) void override_enable(void)
(0257) {
(0258) 	override = true;
_override_enable:
    0FDC: 62 D0 01 MOV   REG[0xD0],0x1
    0FDF: 55 FD 01 MOV   [override+1],0x1
    0FE2: 55 FC 00 MOV   [override],0x0
(0259) 	override_counter = OVERRIDE_TIMEOUT;
    0FE5: 62 D0 01 MOV   REG[0xD0],0x1
    0FE8: 55 F6 00 MOV   [override_counter],0x0
    0FEB: 55 F7 08 MOV   [override_counter+1],0x8
    0FEE: 55 F8 3D MOV   [override_counter+2],0x3D
    0FF1: 55 F9 60 MOV   [override_counter+3],0x60
    0FF4: 7F       RET   
(0260) }
(0261) 
(0262) void update_power(void)
(0263) {
_update_power:
  pwr                  --> X+0
    0FF5: 10       PUSH  X
    0FF6: 4F       MOV   X,SP
    0FF7: 38 02    ADD   SP,0x2
(0264) 	unsigned int pwr;
(0265) 	
(0266) 	// CH0
(0267) 	pwr = PWM16_CH0_wReadPulseWidth();
    0FF9: 10       PUSH  X
    0FFA: 7C 0A 2D LCALL wPWM16_CH0_ReadPulseWidth|PWM16_CH0_wReadPulseWidth|_PWM16_CH0_wReadPulseWidth|_wPWM16_CH0_ReadPulseWidth
    0FFD: 62 D0 00 MOV   REG[0xD0],0x0
    1000: 5A D7    MOV   [__r0],X
    1002: 20       POP   X
    1003: 54 01    MOV   [X+1],A
    1005: 51 D7    MOV   A,[__r0]
    1007: 54 00    MOV   [X+0],A
(0268) 	if(pwr < power_target) pwr += POWER_STEP;
    1009: 62 D0 01 MOV   REG[0xD0],0x1
    100C: 52 01    MOV   A,[X+1]
    100E: 12 FB    SUB   A,[power_target+1]
    1010: 52 00    MOV   A,[X+0]
    1012: 1A FA    SBB   A,[power_target]
    1014: D0 06    JNC   0x101B
    1016: 77 01    INC   [X+1]
    1018: 0F 00 00 ADC   [X+0],0x0
(0269) 	if(pwr > power_target) pwr -= POWER_STEP;
    101B: 62 D0 01 MOV   REG[0xD0],0x1
    101E: 51 FB    MOV   A,[power_target+1]
    1020: 13 01    SUB   A,[X+1]
    1022: 51 FA    MOV   A,[power_target]
    1024: 1B 00    SBB   A,[X+0]
    1026: D0 06    JNC   0x102D
    1028: 7B 01    DEC   [X+1]
    102A: 1F 00 00 SBB   [X+0],0x0
(0270) 	PWM16_CH0_WritePulseWidth(pwr);
    102D: 10       PUSH  X
    102E: 52 00    MOV   A,[X+0]
    1030: 08       PUSH  A
    1031: 52 01    MOV   A,[X+1]
    1033: 20       POP   X
    1034: 7C 0A 27 LCALL _PWM16_CH0_WritePulseWidth
(0271) 	
(0272) 	// CH1
(0273) 	pwr = PWM16_CH1_wReadPulseWidth();
    1037: 7C 09 D0 LCALL _wPWM16_CH1_ReadPulseWidth|_PWM16_CH1_wReadPulseWidth|wPWM16_CH1_ReadPulseWidth|PWM16_CH1_wReadPulseWidth
    103A: 62 D0 00 MOV   REG[0xD0],0x0
    103D: 5A D7    MOV   [__r0],X
    103F: 20       POP   X
    1040: 54 01    MOV   [X+1],A
    1042: 51 D7    MOV   A,[__r0]
    1044: 54 00    MOV   [X+0],A
(0274) 	if(pwr < power_target) pwr += POWER_STEP;
    1046: 62 D0 01 MOV   REG[0xD0],0x1
    1049: 52 01    MOV   A,[X+1]
    104B: 12 FB    SUB   A,[power_target+1]
    104D: 52 00    MOV   A,[X+0]
    104F: 1A FA    SBB   A,[power_target]
    1051: D0 06    JNC   0x1058
    1053: 77 01    INC   [X+1]
    1055: 0F 00 00 ADC   [X+0],0x0
(0275) 	if(pwr > power_target) pwr -= POWER_STEP;
    1058: 62 D0 01 MOV   REG[0xD0],0x1
    105B: 51 FB    MOV   A,[power_target+1]
    105D: 13 01    SUB   A,[X+1]
    105F: 51 FA    MOV   A,[power_target]
    1061: 1B 00    SBB   A,[X+0]
    1063: D0 06    JNC   0x106A
    1065: 7B 01    DEC   [X+1]
    1067: 1F 00 00 SBB   [X+0],0x0
(0276) 	PWM16_CH1_WritePulseWidth(pwr);
    106A: 10       PUSH  X
    106B: 52 00    MOV   A,[X+0]
    106D: 08       PUSH  A
    106E: 52 01    MOV   A,[X+1]
    1070: 20       POP   X
    1071: 7C 09 CA LCALL _PWM16_CH1_WritePulseWidth
    1074: 20       POP   X
    1075: 38 FE    ADD   SP,0xFE
    1077: 20       POP   X
    1078: 7F       RET   
(0277) }
(0278) 
(0279) void schedule_processing(unsigned char hour)
(0280) {
_schedule_processing:
  i                    --> X+0
  hour                 --> X-4
    1079: 10       PUSH  X
    107A: 4F       MOV   X,SP
    107B: 38 01    ADD   SP,0x1
(0281)     unsigned char i; 
(0282)     for(i = 0; i < sizeof(schedule); i++)
    107D: 56 00 00 MOV   [X+0],0x0
    1080: 80 6F    JMP   0x10F0
(0283)     {
(0284)         if(hour == schedule[i][0])
    1082: 62 D0 00 MOV   REG[0xD0],0x0
    1085: 52 00    MOV   A,[X+0]
    1087: 53 D6    MOV   [__r1],A
    1089: 55 D7 00 MOV   [__r0],0x0
    108C: 65 D6    ASL   [__r1]
    108E: 6B D7    RLC   [__r0]
    1090: 65 D6    ASL   [__r1]
    1092: 6B D7    RLC   [__r0]
    1094: 06 D6 A2 ADD   [__r1],0xA2
    1097: 0E D7 01 ADC   [__r0],0x1
    109A: 51 D7    MOV   A,[__r0]
    109C: 10       PUSH  X
    109D: 58 D6    MOV   X,[__r1]
    109F: 08       PUSH  A
    10A0: 28       ROMX  
    10A1: 53 D7    MOV   [__r0],A
    10A3: 18       POP   A
    10A4: 75       INC   X
    10A5: 09 00    ADC   A,0x0
    10A7: 28       ROMX  
    10A8: 53 D6    MOV   [__r1],A
    10AA: 20       POP   X
    10AB: 52 FC    MOV   A,[X-4]
    10AD: 53 D4    MOV   [__r3],A
    10AF: 50 00    MOV   A,0x0
    10B1: 3A D7    CMP   A,[__r0]
    10B3: B0 3A    JNZ   0x10EE
    10B5: 51 D4    MOV   A,[__r3]
    10B7: 3A D6    CMP   A,[__r1]
    10B9: B0 34    JNZ   0x10EE
(0285)         {
(0286)             set_power(schedule[i][1]);
    10BB: 62 D0 00 MOV   REG[0xD0],0x0
    10BE: 52 00    MOV   A,[X+0]
    10C0: 53 D6    MOV   [__r1],A
    10C2: 55 D7 00 MOV   [__r0],0x0
    10C5: 65 D6    ASL   [__r1]
    10C7: 6B D7    RLC   [__r0]
    10C9: 65 D6    ASL   [__r1]
    10CB: 6B D7    RLC   [__r0]
    10CD: 06 D6 A4 ADD   [__r1],0xA4
    10D0: 0E D7 01 ADC   [__r0],0x1
    10D3: 51 D7    MOV   A,[__r0]
    10D5: 10       PUSH  X
    10D6: 58 D6    MOV   X,[__r1]
    10D8: 08       PUSH  A
    10D9: 28       ROMX  
    10DA: 53 D7    MOV   [__r0],A
    10DC: 18       POP   A
    10DD: 75       INC   X
    10DE: 09 00    ADC   A,0x0
    10E0: 28       ROMX  
    10E1: 53 D6    MOV   [__r1],A
    10E3: 20       POP   X
    10E4: 51 D7    MOV   A,[__r0]
    10E6: 08       PUSH  A
    10E7: 51 D6    MOV   A,[__r1]
    10E9: 08       PUSH  A
    10EA: 9E D1    CALL  _set_power
    10EC: 38 FE    ADD   SP,0xFE
(0287)         }
(0288)     }
    10EE: 77 00    INC   [X+0]
    10F0: 3D 00 08 CMP   [X+0],0x8
    10F3: CF 8E    JC    0x1082
    10F5: 38 FF    ADD   SP,0xFF
    10F7: 20       POP   X
    10F8: 7F       RET   
(0289) }
(0290) 
(0291) void schedule_init(void)
(0292) {
_schedule_init:
  hour                 --> X+0
    10F9: 10       PUSH  X
    10FA: 4F       MOV   X,SP
    10FB: 38 01    ADD   SP,0x1
(0293)     unsigned char hour;
(0294) 	
(0295) 	for(hour = 0; hour <= HOUR_MAX; hour++)
    10FD: 56 00 00 MOV   [X+0],0x0
    1100: 80 0A    JMP   0x110B
(0296)     {
(0297)         schedule_processing(hour);
    1102: 52 00    MOV   A,[X+0]
    1104: 08       PUSH  A
    1105: 9F 72    CALL  _schedule_processing
    1107: 38 FF    ADD   SP,0xFF
(0298)     }
    1109: 77 00    INC   [X+0]
    110B: 50 17    MOV   A,0x17
    110D: 3B 00    CMP   A,[X+0]
    110F: DF F2    JNC   0x1102
(0299)     for(hour = 0; hour <= bcd_to_byte(RTC_bReadHour()); hour++)
    1111: 56 00 00 MOV   [X+0],0x0
    1114: 80 0A    JMP   0x111F
(0300)     {
(0301)         schedule_processing(hour);
    1116: 52 00    MOV   A,[X+0]
    1118: 08       PUSH  A
    1119: 9F 5E    CALL  _schedule_processing
    111B: 38 FF    ADD   SP,0xFF
(0302)     }
    111D: 77 00    INC   [X+0]
    111F: 10       PUSH  X
    1120: 7C 09 64 LCALL _RTC_bReadHour
    1123: 20       POP   X
    1124: 62 D0 00 MOV   REG[0xD0],0x0
    1127: 08       PUSH  A
    1128: 96 0D    CALL  _bcd_to_byte
    112A: 38 FF    ADD   SP,0xFF
    112C: 62 D0 00 MOV   REG[0xD0],0x0
    112F: 3B 00    CMP   A,[X+0]
    1131: DF E4    JNC   0x1116
    1133: 38 FF    ADD   SP,0xFF
    1135: 20       POP   X
    1136: 7F       RET   
(0303) }
(0304) 
(0305) void rtc_update(struct datetime *datetime)
(0306) {
_rtc_update:
  datetime             --> X-5
    1137: 10       PUSH  X
    1138: 4F       MOV   X,SP
(0307) 	RTC_Stop();
    1139: 10       PUSH  X
    113A: 7C 09 38 LCALL _RTC_Stop
    113D: 20       POP   X
(0308) 	RTC_SetHour(byte_to_bcd(datetime->hour));
    113E: 62 D0 00 MOV   REG[0xD0],0x0
    1141: 52 FC    MOV   A,[X-4]
    1143: 01 02    ADD   A,0x2
    1145: 53 D6    MOV   [__r1],A
    1147: 52 FB    MOV   A,[X-5]
    1149: 09 00    ADC   A,0x0
    114B: 60 D4    MOV   REG[0xD4],A
    114D: 3E D6    MVI   A,[__r1]
    114F: 08       PUSH  A
    1150: 95 AE    CALL  _byte_to_bcd
    1152: 38 FF    ADD   SP,0xFF
    1154: 62 D0 00 MOV   REG[0xD0],0x0
    1157: 10       PUSH  X
    1158: 7C 09 9B LCALL _RTC_SetHour
    115B: 20       POP   X
(0309) 	RTC_SetMinute(byte_to_bcd(datetime->min));
    115C: 62 D0 00 MOV   REG[0xD0],0x0
    115F: 52 FC    MOV   A,[X-4]
    1161: 01 01    ADD   A,0x1
    1163: 53 D6    MOV   [__r1],A
    1165: 52 FB    MOV   A,[X-5]
    1167: 09 00    ADC   A,0x0
    1169: 60 D4    MOV   REG[0xD4],A
    116B: 3E D6    MVI   A,[__r1]
    116D: 08       PUSH  A
    116E: 95 90    CALL  _byte_to_bcd
    1170: 38 FF    ADD   SP,0xFF
    1172: 62 D0 00 MOV   REG[0xD0],0x0
    1175: 10       PUSH  X
    1176: 7C 09 83 LCALL _RTC_SetMinute
    1179: 20       POP   X
(0310) 	RTC_SetSecond(byte_to_bcd(datetime->sec));
    117A: 62 D0 00 MOV   REG[0xD0],0x0
    117D: 52 FC    MOV   A,[X-4]
    117F: 53 D6    MOV   [__r1],A
    1181: 52 FB    MOV   A,[X-5]
    1183: 60 D4    MOV   REG[0xD4],A
    1185: 3E D6    MVI   A,[__r1]
    1187: 08       PUSH  A
    1188: 95 76    CALL  _byte_to_bcd
    118A: 38 FF    ADD   SP,0xFF
    118C: 62 D0 00 MOV   REG[0xD0],0x0
    118F: 10       PUSH  X
    1190: 7C 09 6B LCALL _RTC_SetSecond
(0311) 	RTC_Start();
    1193: 7C 09 30 LCALL _RTC_Start
    1196: 20       POP   X
    1197: 20       POP   X
    1198: 7F       RET   
(0312) }
(0313) 
(0314) bool check_fld(const char *cmd)
(0315) {
_check_fld:
  cmd                  --> X-5
    1199: 10       PUSH  X
    119A: 4F       MOV   X,SP
    119B: 38 02    ADD   SP,0x2
(0316)     return !str_cmp_const(fld_buf, cmd, strlen(fld_buf) - 1);
    119D: 50 01    MOV   A,0x1
    119F: 08       PUSH  A
    11A0: 50 A4    MOV   A,0xA4
    11A2: 08       PUSH  A
    11A3: 7C 18 61 LCALL _strlenLMM
    11A6: 62 D0 00 MOV   REG[0xD0],0x0
    11A9: 16 D6 01 SUB   [__r1],0x1
    11AC: 1E D7 00 SBB   [__r0],0x0
    11AF: 51 D6    MOV   A,[__r1]
    11B1: 08       PUSH  A
    11B2: 52 FB    MOV   A,[X-5]
    11B4: 08       PUSH  A
    11B5: 52 FC    MOV   A,[X-4]
    11B7: 08       PUSH  A
    11B8: 50 01    MOV   A,0x1
    11BA: 08       PUSH  A
    11BB: 50 A4    MOV   A,0xA4
    11BD: 08       PUSH  A
    11BE: 94 EE    CALL  _str_cmp_const
    11C0: 38 F9    ADD   SP,0xF9
    11C2: 62 D0 00 MOV   REG[0xD0],0x0
    11C5: 39 00    CMP   A,0x0
    11C7: B0 09    JNZ   0x11D1
    11C9: 56 01 01 MOV   [X+1],0x1
    11CC: 56 00 00 MOV   [X+0],0x0
    11CF: 80 07    JMP   0x11D7
    11D1: 56 01 00 MOV   [X+1],0x0
    11D4: 56 00 00 MOV   [X+0],0x0
    11D7: 62 D0 00 MOV   REG[0xD0],0x0
    11DA: 52 01    MOV   A,[X+1]
    11DC: 53 D6    MOV   [__r1],A
    11DE: 52 00    MOV   A,[X+0]
    11E0: 53 D7    MOV   [__r0],A
    11E2: 38 FE    ADD   SP,0xFE
    11E4: 20       POP   X
    11E5: 7F       RET   
(0317) }
(0318) 
(0319) void NMEA_GetField(char *packet, unsigned char field, char *result)
(0320) {
_NMEA_GetField:
  count                --> X+1
  i                    --> X+0
  result               --> X-8
  field                --> X-6
  packet               --> X-5
    11E6: 10       PUSH  X
    11E7: 4F       MOV   X,SP
    11E8: 38 06    ADD   SP,0x6
(0321)     unsigned char i;
(0322)     unsigned char count = 0;
    11EA: 56 01 00 MOV   [X+1],0x0
(0323)     
(0324)     // Search field
(0325)     for (i = 0; (i < NMEA_MAX_SIZE) & (count < field); i++)
    11ED: 56 00 00 MOV   [X+0],0x0
    11F0: 80 3F    JMP   0x1230
(0326)     {
(0327)         if (packet[i] == NMEA_FIELD_DELIMITER) count++;
    11F2: 62 D0 00 MOV   REG[0xD0],0x0
    11F5: 52 00    MOV   A,[X+0]
    11F7: 53 D6    MOV   [__r1],A
    11F9: 55 D7 00 MOV   [__r0],0x0
    11FC: 52 FC    MOV   A,[X-4]
    11FE: 04 D6    ADD   [__r1],A
    1200: 52 FB    MOV   A,[X-5]
    1202: 0C D7    ADC   [__r0],A
    1204: 51 D7    MOV   A,[__r0]
    1206: 60 D4    MOV   REG[0xD4],A
    1208: 3E D6    MVI   A,[__r1]
    120A: 39 2C    CMP   A,0x2C
    120C: B0 03    JNZ   0x1210
    120E: 77 01    INC   [X+1]
(0328) 		if (packet[i] == 0) break;
    1210: 62 D0 00 MOV   REG[0xD0],0x0
    1213: 52 00    MOV   A,[X+0]
    1215: 53 D6    MOV   [__r1],A
    1217: 55 D7 00 MOV   [__r0],0x0
    121A: 52 FC    MOV   A,[X-4]
    121C: 04 D6    ADD   [__r1],A
    121E: 52 FB    MOV   A,[X-5]
    1220: 0C D7    ADC   [__r0],A
    1222: 51 D7    MOV   A,[__r0]
    1224: 60 D4    MOV   REG[0xD4],A
    1226: 3E D6    MVI   A,[__r1]
    1228: 39 00    CMP   A,0x0
    122A: B0 03    JNZ   0x122E
    122C: 80 40    JMP   0x126D
(0329)     }
    122E: 77 00    INC   [X+0]
    1230: 3D 00 52 CMP   [X+0],0x52
    1233: D0 09    JNC   0x123D
    1235: 56 03 01 MOV   [X+3],0x1
    1238: 56 02 00 MOV   [X+2],0x0
    123B: 80 07    JMP   0x1243
    123D: 56 03 00 MOV   [X+3],0x0
    1240: 56 02 00 MOV   [X+2],0x0
    1243: 52 01    MOV   A,[X+1]
    1245: 3B FA    CMP   A,[X-6]
    1247: D0 09    JNC   0x1251
    1249: 56 05 01 MOV   [X+5],0x1
    124C: 56 04 00 MOV   [X+4],0x0
    124F: 80 07    JMP   0x1257
    1251: 56 05 00 MOV   [X+5],0x0
    1254: 56 04 00 MOV   [X+4],0x0
    1257: 62 D0 00 MOV   REG[0xD0],0x0
    125A: 52 03    MOV   A,[X+3]
    125C: 23 05    AND   A,[X+5]
    125E: 53 D6    MOV   [__r1],A
    1260: 52 02    MOV   A,[X+2]
    1262: 23 04    AND   A,[X+4]
    1264: 39 00    CMP   A,0x0
    1266: BF 8B    JNZ   0x11F2
    1268: 3C D6 00 CMP   [__r1],0x0
    126B: BF 86    JNZ   0x11F2
(0330)     
(0331)     // Measure field size
(0332)     for (count = 0; count < NMEA_MAX_SIZE; count++)
    126D: 56 01 00 MOV   [X+1],0x0
    1270: 80 57    JMP   0x12C8
(0333)     {
(0334)         if (packet[i + count] == NMEA_FIELD_DELIMITER) break;
    1272: 62 D0 00 MOV   REG[0xD0],0x0
    1275: 52 01    MOV   A,[X+1]
    1277: 53 D6    MOV   [__r1],A
    1279: 55 D7 00 MOV   [__r0],0x0
    127C: 52 00    MOV   A,[X+0]
    127E: 02 D6    ADD   A,[__r1]
    1280: 53 D6    MOV   [__r1],A
    1282: 50 00    MOV   A,0x0
    1284: 0A D7    ADC   A,[__r0]
    1286: 53 D7    MOV   [__r0],A
    1288: 52 FC    MOV   A,[X-4]
    128A: 04 D6    ADD   [__r1],A
    128C: 52 FB    MOV   A,[X-5]
    128E: 0C D7    ADC   [__r0],A
    1290: 51 D7    MOV   A,[__r0]
    1292: 60 D4    MOV   REG[0xD4],A
    1294: 3E D6    MVI   A,[__r1]
    1296: 39 2C    CMP   A,0x2C
    1298: B0 03    JNZ   0x129C
    129A: 80 32    JMP   0x12CD
(0335)         if (packet[i + count] == 0u) break;
    129C: 62 D0 00 MOV   REG[0xD0],0x0
    129F: 52 01    MOV   A,[X+1]
    12A1: 53 D6    MOV   [__r1],A
    12A3: 55 D7 00 MOV   [__r0],0x0
    12A6: 52 00    MOV   A,[X+0]
    12A8: 02 D6    ADD   A,[__r1]
    12AA: 53 D6    MOV   [__r1],A
    12AC: 50 00    MOV   A,0x0
    12AE: 0A D7    ADC   A,[__r0]
    12B0: 53 D7    MOV   [__r0],A
    12B2: 52 FC    MOV   A,[X-4]
    12B4: 04 D6    ADD   [__r1],A
    12B6: 52 FB    MOV   A,[X-5]
    12B8: 0C D7    ADC   [__r0],A
    12BA: 51 D7    MOV   A,[__r0]
    12BC: 60 D4    MOV   REG[0xD4],A
    12BE: 3E D6    MVI   A,[__r1]
    12C0: 39 00    CMP   A,0x0
    12C2: B0 03    JNZ   0x12C6
    12C4: 80 08    JMP   0x12CD
(0336)     }
    12C6: 77 01    INC   [X+1]
    12C8: 3D 01 52 CMP   [X+1],0x52
    12CB: CF A6    JC    0x1272
(0337)     strncpy(result, packet + i, count + 1);  // Add 1 to count for null terminator
    12CD: 62 D0 00 MOV   REG[0xD0],0x0
    12D0: 52 01    MOV   A,[X+1]
    12D2: 53 D6    MOV   [__r1],A
    12D4: 55 D7 00 MOV   [__r0],0x0
    12D7: 06 D6 01 ADD   [__r1],0x1
    12DA: 0E D7 00 ADC   [__r0],0x0
    12DD: 51 D7    MOV   A,[__r0]
    12DF: 08       PUSH  A
    12E0: 51 D6    MOV   A,[__r1]
    12E2: 08       PUSH  A
    12E3: 52 00    MOV   A,[X+0]
    12E5: 53 D6    MOV   [__r1],A
    12E7: 55 D7 00 MOV   [__r0],0x0
    12EA: 52 FC    MOV   A,[X-4]
    12EC: 04 D6    ADD   [__r1],A
    12EE: 52 FB    MOV   A,[X-5]
    12F0: 0C D7    ADC   [__r0],A
    12F2: 51 D7    MOV   A,[__r0]
    12F4: 08       PUSH  A
    12F5: 51 D6    MOV   A,[__r1]
    12F7: 08       PUSH  A
    12F8: 52 F8    MOV   A,[X-8]
    12FA: 08       PUSH  A
    12FB: 52 F9    MOV   A,[X-7]
    12FD: 08       PUSH  A
    12FE: 7C 1A B7 LCALL _strncpy
    1301: 38 FA    ADD   SP,0xFA
(0338) 	result[count] = 0u;	// Add null terminator
    1303: 62 D0 00 MOV   REG[0xD0],0x0
    1306: 52 01    MOV   A,[X+1]
    1308: 53 D6    MOV   [__r1],A
    130A: 55 D7 00 MOV   [__r0],0x0
    130D: 52 F9    MOV   A,[X-7]
    130F: 04 D6    ADD   [__r1],A
    1311: 52 F8    MOV   A,[X-8]
    1313: 0C D7    ADC   [__r0],A
    1315: 51 D7    MOV   A,[__r0]
    1317: 60 D5    MOV   REG[0xD5],A
    1319: 50 00    MOV   A,0x0
    131B: 3F D6    MVI   [__r1],A
    131D: 38 FA    ADD   SP,0xFA
    131F: 20       POP   X
    1320: 7F       RET   
(0339) }
(0340) 
(0341) bool NMEA_handle_packet(char *packet, char *NMEA_data)
(0342) {
_NMEA_handle_packet:
  n                    --> X+2
  error                --> X+1
  i                    --> X+0
  NMEA_data            --> X-7
  packet               --> X-5
    1321: 10       PUSH  X
    1322: 4F       MOV   X,SP
    1323: 38 09    ADD   SP,0x9
(0343)     unsigned char i, n;
(0344)     unsigned char error = 0;
    1325: 56 01 00 MOV   [X+1],0x0
(0345) 	        
(0346)     // Check if appropriate packet is handled
(0347) 	if (str_cmp(packet, NMEA_data, NMEA_HEADER_SIZE) == 0u)
    1328: 50 03    MOV   A,0x3
    132A: 08       PUSH  A
    132B: 52 F9    MOV   A,[X-7]
    132D: 08       PUSH  A
    132E: 52 FA    MOV   A,[X-6]
    1330: 08       PUSH  A
    1331: 52 FB    MOV   A,[X-5]
    1333: 08       PUSH  A
    1334: 52 FC    MOV   A,[X-4]
    1336: 08       PUSH  A
    1337: 93 24    CALL  _str_cmp
    1339: 38 FB    ADD   SP,0xFB
    133B: 62 D0 00 MOV   REG[0xD0],0x0
    133E: 39 00    CMP   A,0x0
    1340: B0 E9    JNZ   0x142A
(0348)     {
(0349) 		// Check for receive errors
(0350)         for(i = 0; i < NMEA_MAX_SIZE; i++)
    1342: 56 00 00 MOV   [X+0],0x0
    1345: 80 C1    JMP   0x1407
(0351)         {
(0352)             if ((packet[i] < 32) & (packet[i] != 0x0D) & (packet[i] != NMEA_END_DELIMITER)) 
    1347: 62 D0 00 MOV   REG[0xD0],0x0
    134A: 52 00    MOV   A,[X+0]
    134C: 53 D6    MOV   [__r1],A
    134E: 55 D7 00 MOV   [__r0],0x0
    1351: 52 FC    MOV   A,[X-4]
    1353: 04 D6    ADD   [__r1],A
    1355: 52 FB    MOV   A,[X-5]
    1357: 0C D7    ADC   [__r0],A
    1359: 51 D7    MOV   A,[__r0]
    135B: 60 D4    MOV   REG[0xD4],A
    135D: 3E D6    MVI   A,[__r1]
    135F: 39 20    CMP   A,0x20
    1361: D0 09    JNC   0x136B
    1363: 56 04 01 MOV   [X+4],0x1
    1366: 56 03 00 MOV   [X+3],0x0
    1369: 80 07    JMP   0x1371
    136B: 56 04 00 MOV   [X+4],0x0
    136E: 56 03 00 MOV   [X+3],0x0
    1371: 62 D0 00 MOV   REG[0xD0],0x0
    1374: 52 00    MOV   A,[X+0]
    1376: 53 D6    MOV   [__r1],A
    1378: 55 D7 00 MOV   [__r0],0x0
    137B: 52 FC    MOV   A,[X-4]
    137D: 04 D6    ADD   [__r1],A
    137F: 52 FB    MOV   A,[X-5]
    1381: 0C D7    ADC   [__r0],A
    1383: 51 D7    MOV   A,[__r0]
    1385: 60 D4    MOV   REG[0xD4],A
    1387: 3E D6    MVI   A,[__r1]
    1389: 39 0D    CMP   A,0xD
    138B: A0 09    JZ    0x1395
    138D: 56 06 01 MOV   [X+6],0x1
    1390: 56 05 00 MOV   [X+5],0x0
    1393: 80 07    JMP   0x139B
    1395: 56 06 00 MOV   [X+6],0x0
    1398: 56 05 00 MOV   [X+5],0x0
    139B: 62 D0 00 MOV   REG[0xD0],0x0
    139E: 52 00    MOV   A,[X+0]
    13A0: 53 D6    MOV   [__r1],A
    13A2: 55 D7 00 MOV   [__r0],0x0
    13A5: 52 FC    MOV   A,[X-4]
    13A7: 04 D6    ADD   [__r1],A
    13A9: 52 FB    MOV   A,[X-5]
    13AB: 0C D7    ADC   [__r0],A
    13AD: 51 D7    MOV   A,[__r0]
    13AF: 60 D4    MOV   REG[0xD4],A
    13B1: 3E D6    MVI   A,[__r1]
    13B3: 39 0A    CMP   A,0xA
    13B5: A0 09    JZ    0x13BF
    13B7: 56 08 01 MOV   [X+8],0x1
    13BA: 56 07 00 MOV   [X+7],0x0
    13BD: 80 07    JMP   0x13C5
    13BF: 56 08 00 MOV   [X+8],0x0
    13C2: 56 07 00 MOV   [X+7],0x0
    13C5: 62 D0 00 MOV   REG[0xD0],0x0
    13C8: 52 04    MOV   A,[X+4]
    13CA: 23 06    AND   A,[X+6]
    13CC: 53 D6    MOV   [__r1],A
    13CE: 52 03    MOV   A,[X+3]
    13D0: 23 05    AND   A,[X+5]
    13D2: 53 D7    MOV   [__r0],A
    13D4: 52 08    MOV   A,[X+8]
    13D6: 24 D6    AND   [__r1],A
    13D8: 52 07    MOV   A,[X+7]
    13DA: 24 D7    AND   [__r0],A
    13DC: B0 06    JNZ   0x13E3
    13DE: 3C D6 00 CMP   [__r1],0x0
    13E1: A0 05    JZ    0x13E7
(0353)             {
(0354)                 error++;
    13E3: 77 01    INC   [X+1]
(0355)                 break;
    13E5: 80 26    JMP   0x140C
(0356)             }
(0357)             if (packet[i] != NMEA_END_DELIMITER) break;
    13E7: 62 D0 00 MOV   REG[0xD0],0x0
    13EA: 52 00    MOV   A,[X+0]
    13EC: 53 D6    MOV   [__r1],A
    13EE: 55 D7 00 MOV   [__r0],0x0
    13F1: 52 FC    MOV   A,[X-4]
    13F3: 04 D6    ADD   [__r1],A
    13F5: 52 FB    MOV   A,[X-5]
    13F7: 0C D7    ADC   [__r0],A
    13F9: 51 D7    MOV   A,[__r0]
    13FB: 60 D4    MOV   REG[0xD4],A
    13FD: 3E D6    MVI   A,[__r1]
    13FF: 39 0A    CMP   A,0xA
    1401: A0 03    JZ    0x1405
    1403: 80 08    JMP   0x140C
(0358)         }
    1405: 77 00    INC   [X+0]
    1407: 3D 00 52 CMP   [X+0],0x52
    140A: CF 3C    JC    0x1347
(0359) 		
(0360)         // Copy buffer to NMEA packet if no errors found
(0361)         if (!error) strncpy(NMEA_data, packet, NMEA_MAX_SIZE); 
    140C: 3D 01 00 CMP   [X+1],0x0
    140F: B0 1C    JNZ   0x142C
    1411: 50 00    MOV   A,0x0
    1413: 08       PUSH  A
    1414: 50 52    MOV   A,0x52
    1416: 08       PUSH  A
    1417: 52 FB    MOV   A,[X-5]
    1419: 08       PUSH  A
    141A: 52 FC    MOV   A,[X-4]
    141C: 08       PUSH  A
    141D: 52 F9    MOV   A,[X-7]
    141F: 08       PUSH  A
    1420: 52 FA    MOV   A,[X-6]
    1422: 08       PUSH  A
    1423: 7C 1A B7 LCALL _strncpy
    1426: 38 FA    ADD   SP,0xFA
(0362)     }
    1428: 80 03    JMP   0x142C
(0363) 	else error++;
    142A: 77 01    INC   [X+1]
(0364) 	
(0365) 	if(error) return false;
    142C: 3D 01 00 CMP   [X+1],0x0
    142F: A0 0C    JZ    0x143C
    1431: 62 D0 00 MOV   REG[0xD0],0x0
    1434: 55 D6 00 MOV   [__r1],0x0
    1437: 55 D7 00 MOV   [__r0],0x0
    143A: 80 0A    JMP   0x1445
(0366) 	else return true;	
    143C: 62 D0 00 MOV   REG[0xD0],0x0
    143F: 55 D6 01 MOV   [__r1],0x1
    1442: 55 D7 00 MOV   [__r0],0x0
    1445: 38 F7    ADD   SP,0xF7
    1447: 20       POP   X
    1448: 7F       RET   
(0367) }
(0368) 
(0369) void NMEA_GetTimeUTC(char *gprmc, struct datetime *gps_datetime)
(0370) {
_NMEA_GetTimeUTC:
  field                --> X+82
  buf                  --> X+0
  gps_datetime         --> X-7
  gprmc                --> X-5
    1449: 10       PUSH  X
    144A: 4F       MOV   X,SP
    144B: 38 A4    ADD   SP,0xA4
(0371) 	#define POS_SIZE	2
(0372) 	#define POS_HOUR	0
(0373) 	#define POS_MIN		2
(0374) 	#define POS_SEC		4	
(0375) 	#define POS_DAY		0
(0376) 	#define POS_MON		2
(0377) 	#define POS_YEAR	4
(0378) 	
(0379) 	char field[NMEA_MAX_SIZE];
(0380) 	char buf[NMEA_MAX_SIZE];
(0381) 	
(0382) 	NMEA_GetField(gprmc, NMEA_GPRMC_UTC, field);
    144D: 62 D0 00 MOV   REG[0xD0],0x0
    1450: 5A D6    MOV   [__r1],X
    1452: 06 D6 52 ADD   [__r1],0x52
    1455: 50 03    MOV   A,0x3
    1457: 08       PUSH  A
    1458: 51 D6    MOV   A,[__r1]
    145A: 08       PUSH  A
    145B: 50 01    MOV   A,0x1
    145D: 08       PUSH  A
    145E: 52 FB    MOV   A,[X-5]
    1460: 08       PUSH  A
    1461: 52 FC    MOV   A,[X-4]
    1463: 08       PUSH  A
    1464: 9D 80    CALL  _NMEA_GetField
    1466: 38 FB    ADD   SP,0xFB
(0383) 	if (field[0] != 0)
    1468: 3D 52 00 CMP   [X+82],0x0
    146B: A0 D0    JZ    0x153C
(0384) 	{
(0385) 		// Hour
(0386) 		strncpy(buf, field + POS_HOUR, POS_SIZE);
    146D: 50 00    MOV   A,0x0
    146F: 08       PUSH  A
    1470: 50 02    MOV   A,0x2
    1472: 08       PUSH  A
    1473: 62 D0 00 MOV   REG[0xD0],0x0
    1476: 5A D6    MOV   [__r1],X
    1478: 06 D6 52 ADD   [__r1],0x52
    147B: 50 03    MOV   A,0x3
    147D: 08       PUSH  A
    147E: 51 D6    MOV   A,[__r1]
    1480: 08       PUSH  A
    1481: 50 03    MOV   A,0x3
    1483: 08       PUSH  A
    1484: 10       PUSH  X
    1485: 7C 1A B7 LCALL _strncpy
(0387) 		buf[POS_SIZE] = 0;	// Add null terminator
    1488: 56 02 00 MOV   [X+2],0x0
(0388) 		gps_datetime->hour = atoi(buf);
    148B: 62 D0 00 MOV   REG[0xD0],0x0
    148E: 50 03    MOV   A,0x3
    1490: 08       PUSH  A
    1491: 10       PUSH  X
    1492: 7C 18 87 LCALL _atoi
    1495: 38 F8    ADD   SP,0xF8
    1497: 62 D0 00 MOV   REG[0xD0],0x0
    149A: 51 D6    MOV   A,[__r1]
    149C: 53 D7    MOV   [__r0],A
    149E: 52 FA    MOV   A,[X-6]
    14A0: 01 02    ADD   A,0x2
    14A2: 53 D4    MOV   [__r3],A
    14A4: 52 F9    MOV   A,[X-7]
    14A6: 09 00    ADC   A,0x0
    14A8: 60 D5    MOV   REG[0xD5],A
    14AA: 51 D7    MOV   A,[__r0]
    14AC: 3F D4    MVI   [__r3],A
(0389) 		
(0390) 		// Minutes
(0391) 		strncpy(buf, field + POS_MIN, POS_SIZE);
    14AE: 50 00    MOV   A,0x0
    14B0: 08       PUSH  A
    14B1: 50 02    MOV   A,0x2
    14B3: 08       PUSH  A
    14B4: 5A D6    MOV   [__r1],X
    14B6: 06 D6 54 ADD   [__r1],0x54
    14B9: 50 03    MOV   A,0x3
    14BB: 08       PUSH  A
    14BC: 51 D6    MOV   A,[__r1]
    14BE: 08       PUSH  A
    14BF: 50 03    MOV   A,0x3
    14C1: 08       PUSH  A
    14C2: 10       PUSH  X
    14C3: 7C 1A B7 LCALL _strncpy
(0392) 		buf[POS_SIZE] = 0;	// Add null terminator
    14C6: 56 02 00 MOV   [X+2],0x0
(0393) 		gps_datetime->min = atoi(buf);
    14C9: 62 D0 00 MOV   REG[0xD0],0x0
    14CC: 50 03    MOV   A,0x3
    14CE: 08       PUSH  A
    14CF: 10       PUSH  X
    14D0: 7C 18 87 LCALL _atoi
    14D3: 38 F8    ADD   SP,0xF8
    14D5: 62 D0 00 MOV   REG[0xD0],0x0
    14D8: 51 D6    MOV   A,[__r1]
    14DA: 53 D7    MOV   [__r0],A
    14DC: 52 FA    MOV   A,[X-6]
    14DE: 01 01    ADD   A,0x1
    14E0: 53 D4    MOV   [__r3],A
    14E2: 52 F9    MOV   A,[X-7]
    14E4: 09 00    ADC   A,0x0
    14E6: 60 D5    MOV   REG[0xD5],A
    14E8: 51 D7    MOV   A,[__r0]
    14EA: 3F D4    MVI   [__r3],A
(0394) 		
(0395) 		// Seconds
(0396) 		strncpy(buf, field + POS_SEC, POS_SIZE);
    14EC: 50 00    MOV   A,0x0
    14EE: 08       PUSH  A
    14EF: 50 02    MOV   A,0x2
    14F1: 08       PUSH  A
    14F2: 5A D6    MOV   [__r1],X
    14F4: 06 D6 56 ADD   [__r1],0x56
    14F7: 50 03    MOV   A,0x3
    14F9: 08       PUSH  A
    14FA: 51 D6    MOV   A,[__r1]
    14FC: 08       PUSH  A
    14FD: 50 03    MOV   A,0x3
    14FF: 08       PUSH  A
    1500: 10       PUSH  X
    1501: 7C 1A B7 LCALL _strncpy
(0397) 		buf[POS_SIZE] = 0;	// Add null terminator
    1504: 56 02 00 MOV   [X+2],0x0
(0398) 		gps_datetime->sec = atoi(buf);
    1507: 62 D0 00 MOV   REG[0xD0],0x0
    150A: 50 03    MOV   A,0x3
    150C: 08       PUSH  A
    150D: 10       PUSH  X
    150E: 7C 18 87 LCALL _atoi
    1511: 38 F8    ADD   SP,0xF8
    1513: 62 D0 00 MOV   REG[0xD0],0x0
    1516: 51 D6    MOV   A,[__r1]
    1518: 53 D7    MOV   [__r0],A
    151A: 52 FA    MOV   A,[X-6]
    151C: 53 D4    MOV   [__r3],A
    151E: 52 F9    MOV   A,[X-7]
    1520: 60 D5    MOV   REG[0xD5],A
    1522: 51 D7    MOV   A,[__r0]
    1524: 3F D4    MVI   [__r3],A
(0399) 		
(0400) 		gps_datetime->valid = true;
    1526: 52 FA    MOV   A,[X-6]
    1528: 01 06    ADD   A,0x6
    152A: 53 D6    MOV   [__r1],A
    152C: 52 F9    MOV   A,[X-7]
    152E: 09 00    ADC   A,0x0
    1530: 60 D5    MOV   REG[0xD5],A
    1532: 50 00    MOV   A,0x0
    1534: 3F D6    MVI   [__r1],A
    1536: 50 01    MOV   A,0x1
    1538: 3F D6    MVI   [__r1],A
(0401) 	}
    153A: 80 16    JMP   0x1551
(0402) 	else gps_datetime->valid = false;
    153C: 62 D0 00 MOV   REG[0xD0],0x0
    153F: 52 FA    MOV   A,[X-6]
    1541: 01 06    ADD   A,0x6
    1543: 53 D6    MOV   [__r1],A
    1545: 52 F9    MOV   A,[X-7]
    1547: 09 00    ADC   A,0x0
    1549: 60 D5    MOV   REG[0xD5],A
    154B: 50 00    MOV   A,0x0
    154D: 3F D6    MVI   [__r1],A
    154F: 3F D6    MVI   [__r1],A
(0403) 	
(0404) 	NMEA_GetField(gprmc, NMEA_GPRMC_DATE, field);
    1551: 62 D0 00 MOV   REG[0xD0],0x0
    1554: 5A D6    MOV   [__r1],X
    1556: 06 D6 52 ADD   [__r1],0x52
    1559: 50 03    MOV   A,0x3
    155B: 08       PUSH  A
    155C: 51 D6    MOV   A,[__r1]
    155E: 08       PUSH  A
    155F: 50 07    MOV   A,0x7
    1561: 08       PUSH  A
    1562: 52 FB    MOV   A,[X-5]
    1564: 08       PUSH  A
    1565: 52 FC    MOV   A,[X-4]
    1567: 08       PUSH  A
    1568: 9C 7C    CALL  _NMEA_GetField
    156A: 38 FB    ADD   SP,0xFB
(0405) 	if (field[0] != 0)
    156C: 3D 52 00 CMP   [X+82],0x0
    156F: A0 D4    JZ    0x1644
(0406) 	{
(0407) 		// Day
(0408) 		strncpy(buf, field + POS_DAY, POS_SIZE);
    1571: 50 00    MOV   A,0x0
    1573: 08       PUSH  A
    1574: 50 02    MOV   A,0x2
    1576: 08       PUSH  A
    1577: 62 D0 00 MOV   REG[0xD0],0x0
    157A: 5A D6    MOV   [__r1],X
    157C: 06 D6 52 ADD   [__r1],0x52
    157F: 50 03    MOV   A,0x3
    1581: 08       PUSH  A
    1582: 51 D6    MOV   A,[__r1]
    1584: 08       PUSH  A
    1585: 50 03    MOV   A,0x3
    1587: 08       PUSH  A
    1588: 10       PUSH  X
    1589: 7C 1A B7 LCALL _strncpy
(0409) 		buf[POS_SIZE] = 0;	// Add null terminator
    158C: 56 02 00 MOV   [X+2],0x0
(0410) 		gps_datetime->day = atoi(buf);
    158F: 62 D0 00 MOV   REG[0xD0],0x0
    1592: 50 03    MOV   A,0x3
    1594: 08       PUSH  A
    1595: 10       PUSH  X
    1596: 7C 18 87 LCALL _atoi
    1599: 38 F8    ADD   SP,0xF8
    159B: 62 D0 00 MOV   REG[0xD0],0x0
    159E: 51 D6    MOV   A,[__r1]
    15A0: 53 D7    MOV   [__r0],A
    15A2: 52 FA    MOV   A,[X-6]
    15A4: 01 03    ADD   A,0x3
    15A6: 53 D4    MOV   [__r3],A
    15A8: 52 F9    MOV   A,[X-7]
    15AA: 09 00    ADC   A,0x0
    15AC: 60 D5    MOV   REG[0xD5],A
    15AE: 51 D7    MOV   A,[__r0]
    15B0: 3F D4    MVI   [__r3],A
(0411) 		
(0412) 		// Month
(0413) 		strncpy(buf, field + POS_MON, POS_SIZE);
    15B2: 50 00    MOV   A,0x0
    15B4: 08       PUSH  A
    15B5: 50 02    MOV   A,0x2
    15B7: 08       PUSH  A
    15B8: 5A D6    MOV   [__r1],X
    15BA: 06 D6 54 ADD   [__r1],0x54
    15BD: 50 03    MOV   A,0x3
    15BF: 08       PUSH  A
    15C0: 51 D6    MOV   A,[__r1]
    15C2: 08       PUSH  A
    15C3: 50 03    MOV   A,0x3
    15C5: 08       PUSH  A
    15C6: 10       PUSH  X
    15C7: 7C 1A B7 LCALL _strncpy
(0414) 		buf[POS_SIZE] = 0;	// Add null terminator
    15CA: 56 02 00 MOV   [X+2],0x0
(0415) 		gps_datetime->month = atoi(buf);
    15CD: 62 D0 00 MOV   REG[0xD0],0x0
    15D0: 50 03    MOV   A,0x3
    15D2: 08       PUSH  A
    15D3: 10       PUSH  X
    15D4: 7C 18 87 LCALL _atoi
    15D7: 38 F8    ADD   SP,0xF8
    15D9: 62 D0 00 MOV   REG[0xD0],0x0
    15DC: 51 D6    MOV   A,[__r1]
    15DE: 53 D7    MOV   [__r0],A
    15E0: 52 FA    MOV   A,[X-6]
    15E2: 01 04    ADD   A,0x4
    15E4: 53 D4    MOV   [__r3],A
    15E6: 52 F9    MOV   A,[X-7]
    15E8: 09 00    ADC   A,0x0
    15EA: 60 D5    MOV   REG[0xD5],A
    15EC: 51 D7    MOV   A,[__r0]
    15EE: 3F D4    MVI   [__r3],A
(0416) 		
(0417) 		// Year
(0418) 		strncpy(buf, field + POS_YEAR, POS_SIZE);
    15F0: 50 00    MOV   A,0x0
    15F2: 08       PUSH  A
    15F3: 50 02    MOV   A,0x2
    15F5: 08       PUSH  A
    15F6: 5A D6    MOV   [__r1],X
    15F8: 06 D6 56 ADD   [__r1],0x56
    15FB: 50 03    MOV   A,0x3
    15FD: 08       PUSH  A
    15FE: 51 D6    MOV   A,[__r1]
    1600: 08       PUSH  A
    1601: 50 03    MOV   A,0x3
    1603: 08       PUSH  A
    1604: 10       PUSH  X
    1605: 7C 1A B7 LCALL _strncpy
(0419) 		buf[POS_SIZE] = 0;	// Add null terminator
    1608: 56 02 00 MOV   [X+2],0x0
(0420) 		gps_datetime->year = atoi(buf);
    160B: 62 D0 00 MOV   REG[0xD0],0x0
    160E: 50 03    MOV   A,0x3
    1610: 08       PUSH  A
    1611: 10       PUSH  X
    1612: 7C 18 87 LCALL _atoi
    1615: 38 F8    ADD   SP,0xF8
    1617: 62 D0 00 MOV   REG[0xD0],0x0
    161A: 51 D6    MOV   A,[__r1]
    161C: 53 D7    MOV   [__r0],A
    161E: 52 FA    MOV   A,[X-6]
    1620: 01 05    ADD   A,0x5
    1622: 53 D4    MOV   [__r3],A
    1624: 52 F9    MOV   A,[X-7]
    1626: 09 00    ADC   A,0x0
    1628: 60 D5    MOV   REG[0xD5],A
    162A: 51 D7    MOV   A,[__r0]
    162C: 3F D4    MVI   [__r3],A
(0421) 		
(0422) 		gps_datetime->valid = true;
    162E: 52 FA    MOV   A,[X-6]
    1630: 01 06    ADD   A,0x6
    1632: 53 D6    MOV   [__r1],A
    1634: 52 F9    MOV   A,[X-7]
    1636: 09 00    ADC   A,0x0
    1638: 60 D5    MOV   REG[0xD5],A
    163A: 50 00    MOV   A,0x0
    163C: 3F D6    MVI   [__r1],A
    163E: 50 01    MOV   A,0x1
    1640: 3F D6    MVI   [__r1],A
(0423) 	}
    1642: 80 16    JMP   0x1659
(0424) 	else gps_datetime->valid = false;
    1644: 62 D0 00 MOV   REG[0xD0],0x0
    1647: 52 FA    MOV   A,[X-6]
    1649: 01 06    ADD   A,0x6
    164B: 53 D6    MOV   [__r1],A
    164D: 52 F9    MOV   A,[X-7]
    164F: 09 00    ADC   A,0x0
    1651: 60 D5    MOV   REG[0xD5],A
    1653: 50 00    MOV   A,0x0
    1655: 3F D6    MVI   [__r1],A
    1657: 3F D6    MVI   [__r1],A
    1659: 38 5C    ADD   SP,0x5C
    165B: 20       POP   X
    165C: 7F       RET   
(0425) }
(0426) 
(0427) unsigned char str_cmp(char *str1, char *str2, unsigned char stop)
(0428) {
_str_cmp:
  i                    --> X+0
  stop                 --> X-8
  str2                 --> X-7
  str1                 --> X-5
    165D: 10       PUSH  X
    165E: 4F       MOV   X,SP
    165F: 38 01    ADD   SP,0x1
(0429)     unsigned char i;
(0430)     for(i = 0u; i <= stop; i++)
    1661: 56 00 00 MOV   [X+0],0x0
    1664: 80 3A    JMP   0x169F
(0431)     {
(0432)         if (str1[i] != str2[i]) return 1u;
    1666: 62 D0 00 MOV   REG[0xD0],0x0
    1669: 52 00    MOV   A,[X+0]
    166B: 53 D6    MOV   [__r1],A
    166D: 55 D7 00 MOV   [__r0],0x0
    1670: 52 FA    MOV   A,[X-6]
    1672: 04 D6    ADD   [__r1],A
    1674: 52 F9    MOV   A,[X-7]
    1676: 0C D7    ADC   [__r0],A
    1678: 51 D7    MOV   A,[__r0]
    167A: 60 D4    MOV   REG[0xD4],A
    167C: 3E D6    MVI   A,[__r1]
    167E: 53 D7    MOV   [__r0],A
    1680: 52 00    MOV   A,[X+0]
    1682: 53 D4    MOV   [__r3],A
    1684: 55 D5 00 MOV   [__r2],0x0
    1687: 52 FC    MOV   A,[X-4]
    1689: 04 D4    ADD   [__r3],A
    168B: 52 FB    MOV   A,[X-5]
    168D: 0C D5    ADC   [__r2],A
    168F: 51 D5    MOV   A,[__r2]
    1691: 60 D4    MOV   REG[0xD4],A
    1693: 3E D4    MVI   A,[__r3]
    1695: 3A D7    CMP   A,[__r0]
    1697: A0 05    JZ    0x169D
    1699: 50 01    MOV   A,0x1
    169B: 80 0E    JMP   0x16AA
(0433)     }
    169D: 77 00    INC   [X+0]
    169F: 52 F8    MOV   A,[X-8]
    16A1: 3B 00    CMP   A,[X+0]
    16A3: DF C2    JNC   0x1666
(0434)     return 0u;
    16A5: 62 D0 00 MOV   REG[0xD0],0x0
    16A8: 50 00    MOV   A,0x0
    16AA: 38 FF    ADD   SP,0xFF
    16AC: 20       POP   X
    16AD: 7F       RET   
(0435) }
(0436) 
(0437) unsigned char str_cmp_const(char *str1, const char *str2, unsigned char stop)
(0438) {
_str_cmp_const:
  i                    --> X+0
  stop                 --> X-8
  str2                 --> X-7
  str1                 --> X-5
    16AE: 10       PUSH  X
    16AF: 4F       MOV   X,SP
    16B0: 38 01    ADD   SP,0x1
(0439)     unsigned char i;
(0440)     for(i = 0u; i <= stop; i++)
    16B2: 56 00 00 MOV   [X+0],0x0
    16B5: 80 3B    JMP   0x16F1
(0441)     {
(0442)         if (str1[i] != str2[i]) return 1u;
    16B7: 62 D0 00 MOV   REG[0xD0],0x0
    16BA: 52 00    MOV   A,[X+0]
    16BC: 53 D6    MOV   [__r1],A
    16BE: 55 D7 00 MOV   [__r0],0x0
    16C1: 52 FA    MOV   A,[X-6]
    16C3: 04 D6    ADD   [__r1],A
    16C5: 52 F9    MOV   A,[X-7]
    16C7: 0C D7    ADC   [__r0],A
    16C9: 51 D7    MOV   A,[__r0]
    16CB: 10       PUSH  X
    16CC: 58 D6    MOV   X,[__r1]
    16CE: 28       ROMX  
    16CF: 20       POP   X
    16D0: 53 D7    MOV   [__r0],A
    16D2: 52 00    MOV   A,[X+0]
    16D4: 53 D4    MOV   [__r3],A
    16D6: 55 D5 00 MOV   [__r2],0x0
    16D9: 52 FC    MOV   A,[X-4]
    16DB: 04 D4    ADD   [__r3],A
    16DD: 52 FB    MOV   A,[X-5]
    16DF: 0C D5    ADC   [__r2],A
    16E1: 51 D5    MOV   A,[__r2]
    16E3: 60 D4    MOV   REG[0xD4],A
    16E5: 3E D4    MVI   A,[__r3]
    16E7: 3A D7    CMP   A,[__r0]
    16E9: A0 05    JZ    0x16EF
    16EB: 50 01    MOV   A,0x1
    16ED: 80 0E    JMP   0x16FC
(0443)     }
    16EF: 77 00    INC   [X+0]
    16F1: 52 F8    MOV   A,[X-8]
    16F3: 3B 00    CMP   A,[X+0]
    16F5: DF C1    JNC   0x16B7
(0444)     return 0u;
    16F7: 62 D0 00 MOV   REG[0xD0],0x0
    16FA: 50 00    MOV   A,0x0
    16FC: 38 FF    ADD   SP,0xFF
    16FE: 20       POP   X
    16FF: 7F       RET   
(0445) }
(0446) 
(0447) unsigned char byte_to_bcd(unsigned char byte)
(0448) {
_byte_to_bcd:
  reg                  --> X+2
  low                  --> X+1
  high                 --> X+0
  byte                 --> X-4
    1700: 10       PUSH  X
    1701: 4F       MOV   X,SP
    1702: 38 03    ADD   SP,0x3
(0449)     unsigned char high, low, reg;
(0450)     
(0451)     high = byte / DECIMAL_COUNT_SYSTEM_BASIS;
    1704: 50 0A    MOV   A,0xA
    1706: 08       PUSH  A
    1707: 52 FC    MOV   A,[X-4]
    1709: 08       PUSH  A
    170A: 62 D0 00 MOV   REG[0xD0],0x0
    170D: 7C 18 30 LCALL 0x1830
    1710: 18       POP   A
    1711: 54 00    MOV   [X+0],A
    1713: 38 FF    ADD   SP,0xFF
(0452)     low = byte - high * DECIMAL_COUNT_SYSTEM_BASIS;
    1715: 52 00    MOV   A,[X+0]
    1717: 60 E8    MOV   REG[0xE8],A
    1719: 62 E9 0A MOV   REG[0xE9],0xA
    171C: 40       NOP   
    171D: 5D EB    MOV   A,REG[0xEB]
    171F: 53 D7    MOV   [__r0],A
    1721: 52 FC    MOV   A,[X-4]
    1723: 12 D7    SUB   A,[__r0]
    1725: 54 01    MOV   [X+1],A
(0453)     reg = (high << DECIMAL_NUMBER_SIZE) + low;
    1727: 52 00    MOV   A,[X+0]
    1729: 64       ASL   A
    172A: 64       ASL   A
    172B: 64       ASL   A
    172C: 64       ASL   A
    172D: 03 01    ADD   A,[X+1]
    172F: 54 02    MOV   [X+2],A
(0454)     
(0455)     return reg;
    1731: 52 02    MOV   A,[X+2]
    1733: 38 FD    ADD   SP,0xFD
    1735: 20       POP   X
    1736: 7F       RET   
(0456) }
(0457) 
(0458) unsigned char bcd_to_byte(unsigned char reg)
(0459) {
_bcd_to_byte:
  byte                 --> X+2
  low                  --> X+1
  high                 --> X+0
  reg                  --> X-4
    1737: 10       PUSH  X
    1738: 4F       MOV   X,SP
    1739: 38 03    ADD   SP,0x3
(0460)     unsigned char high, low, byte;
(0461)     
(0462)     high = (reg >> DECIMAL_NUMBER_SIZE);
    173B: 52 FC    MOV   A,[X-4]
    173D: 62 D0 00 MOV   REG[0xD0],0x0
    1740: 67       ASR   A
    1741: 67       ASR   A
    1742: 67       ASR   A
    1743: 67       ASR   A
    1744: 21 0F    AND   A,0xF
    1746: 54 00    MOV   [X+0],A
(0463)     low = reg - (high << DECIMAL_NUMBER_SIZE);
    1748: 52 00    MOV   A,[X+0]
    174A: 64       ASL   A
    174B: 64       ASL   A
    174C: 64       ASL   A
    174D: 64       ASL   A
    174E: 53 D7    MOV   [__r0],A
    1750: 52 FC    MOV   A,[X-4]
    1752: 12 D7    SUB   A,[__r0]
    1754: 54 01    MOV   [X+1],A
(0464)     byte = low + high * DECIMAL_COUNT_SYSTEM_BASIS;
    1756: 52 00    MOV   A,[X+0]
    1758: 60 E8    MOV   REG[0xE8],A
    175A: 62 E9 0A MOV   REG[0xE9],0xA
    175D: 40       NOP   
    175E: 5D EB    MOV   A,REG[0xEB]
    1760: 53 D7    MOV   [__r0],A
    1762: 52 01    MOV   A,[X+1]
    1764: 02 D7    ADD   A,[__r0]
    1766: 54 02    MOV   [X+2],A
(0465) 
(0466)     return byte;
    1768: 52 02    MOV   A,[X+2]
    176A: 38 FD    ADD   SP,0xFD
    176C: 20       POP   X
    176D: 7F       RET   
(0467) }
(0468) 
(0469) void utc_to_local(struct datetime *utc_datetime, struct datetime *local_datetime)
(0470) {
_utc_to_local:
  local_datetime       --> X-7
  utc_datetime         --> X-5
    176E: 10       PUSH  X
    176F: 4F       MOV   X,SP
(0471) 	local_datetime->valid = utc_datetime->valid;
    1770: 62 D0 00 MOV   REG[0xD0],0x0
    1773: 52 FC    MOV   A,[X-4]
    1775: 01 06    ADD   A,0x6
    1777: 53 D6    MOV   [__r1],A
    1779: 52 FB    MOV   A,[X-5]
    177B: 09 00    ADC   A,0x0
    177D: 60 D4    MOV   REG[0xD4],A
    177F: 3E D6    MVI   A,[__r1]
    1781: 53 D7    MOV   [__r0],A
    1783: 3E D6    MVI   A,[__r1]
    1785: 53 D6    MOV   [__r1],A
    1787: 52 FA    MOV   A,[X-6]
    1789: 01 06    ADD   A,0x6
    178B: 53 D4    MOV   [__r3],A
    178D: 52 F9    MOV   A,[X-7]
    178F: 09 00    ADC   A,0x0
    1791: 60 D5    MOV   REG[0xD5],A
    1793: 51 D7    MOV   A,[__r0]
    1795: 3F D4    MVI   [__r3],A
    1797: 51 D6    MOV   A,[__r1]
    1799: 3F D4    MVI   [__r3],A
(0472) 	local_datetime->sec = utc_datetime->sec;
    179B: 52 FC    MOV   A,[X-4]
    179D: 53 D6    MOV   [__r1],A
    179F: 52 FB    MOV   A,[X-5]
    17A1: 60 D4    MOV   REG[0xD4],A
    17A3: 3E D6    MVI   A,[__r1]
    17A5: 53 D7    MOV   [__r0],A
    17A7: 52 FA    MOV   A,[X-6]
    17A9: 53 D4    MOV   [__r3],A
    17AB: 52 F9    MOV   A,[X-7]
    17AD: 60 D5    MOV   REG[0xD5],A
    17AF: 51 D7    MOV   A,[__r0]
    17B1: 3F D4    MVI   [__r3],A
(0473) 	local_datetime->min = utc_datetime->min;
    17B3: 52 FC    MOV   A,[X-4]
    17B5: 01 01    ADD   A,0x1
    17B7: 53 D6    MOV   [__r1],A
    17B9: 52 FB    MOV   A,[X-5]
    17BB: 09 00    ADC   A,0x0
    17BD: 60 D4    MOV   REG[0xD4],A
    17BF: 3E D6    MVI   A,[__r1]
    17C1: 53 D7    MOV   [__r0],A
    17C3: 52 FA    MOV   A,[X-6]
    17C5: 01 01    ADD   A,0x1
    17C7: 53 D4    MOV   [__r3],A
    17C9: 52 F9    MOV   A,[X-7]
    17CB: 09 00    ADC   A,0x0
    17CD: 60 D5    MOV   REG[0xD5],A
    17CF: 51 D7    MOV   A,[__r0]
    17D1: 3F D4    MVI   [__r3],A
(0474) 	local_datetime->hour = utc_datetime->hour + GMT_OFFSET;
    17D3: 52 FC    MOV   A,[X-4]
    17D5: 01 02    ADD   A,0x2
    17D7: 53 D6    MOV   [__r1],A
    17D9: 52 FB    MOV   A,[X-5]
    17DB: 09 00    ADC   A,0x0
    17DD: 60 D4    MOV   REG[0xD4],A
    17DF: 3E D6    MVI   A,[__r1]
    17E1: 53 D7    MOV   [__r0],A
    17E3: 06 D7 03 ADD   [__r0],0x3
    17E6: 52 FA    MOV   A,[X-6]
    17E8: 01 02    ADD   A,0x2
    17EA: 53 D4    MOV   [__r3],A
    17EC: 52 F9    MOV   A,[X-7]
    17EE: 09 00    ADC   A,0x0
    17F0: 60 D5    MOV   REG[0xD5],A
    17F2: 51 D7    MOV   A,[__r0]
    17F4: 3F D4    MVI   [__r3],A
(0475) 	if (local_datetime->hour > HOUR_MAX) local_datetime->hour -= (HOUR_MAX + 1);
    17F6: 52 FA    MOV   A,[X-6]
    17F8: 01 02    ADD   A,0x2
    17FA: 53 D6    MOV   [__r1],A
    17FC: 52 F9    MOV   A,[X-7]
    17FE: 09 00    ADC   A,0x0
    1800: 60 D4    MOV   REG[0xD4],A
    1802: 3E D6    MVI   A,[__r1]
    1804: 53 D7    MOV   [__r0],A
    1806: 50 17    MOV   A,0x17
    1808: 3A D7    CMP   A,[__r0]
    180A: D0 23    JNC   0x182E
    180C: 62 D0 00 MOV   REG[0xD0],0x0
    180F: 52 FA    MOV   A,[X-6]
    1811: 01 02    ADD   A,0x2
    1813: 53 D6    MOV   [__r1],A
    1815: 52 F9    MOV   A,[X-7]
    1817: 09 00    ADC   A,0x0
    1819: 53 D7    MOV   [__r0],A
    181B: 60 D4    MOV   REG[0xD4],A
    181D: 3E D6    MVI   A,[__r1]
    181F: 7A D6    DEC   [__r1]
    1821: 53 D5    MOV   [__r2],A
    1823: 16 D5 18 SUB   [__r2],0x18
    1826: 51 D7    MOV   A,[__r0]
    1828: 60 D5    MOV   REG[0xD5],A
    182A: 51 D5    MOV   A,[__r2]
    182C: 3F D6    MVI   [__r1],A
    182E: 20       POP   X
    182F: 7F       RET   
