FILE: .\boot.asm                        (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;@Id: boot.tpl#903 @
                                        (0004) ;=============================================================================
                                        (0005) ;  FILENAME:   boot.asm
                                        (0006) ;  Version:    1.30
                                        (0007) ;
                                        (0008) ;  DESCRIPTION:
                                        (0009) ;  M8C Boot Code for CY8C28xxx microcontroller devices.
                                        (0010) ;
                                        (0011) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0012) ;
                                        (0013) ; NOTES:
                                        (0014) ; PSoC Designer's Device Editor uses a template file, BOOT.TPL, located in
                                        (0015) ; the project's root directory to create BOOT.ASM. Any changes made to
                                        (0016) ; BOOT.ASM will be  overwritten every time the project is generated; therefore
                                        (0017) ; changes should be made to BOOT.TPL not BOOT.ASM. Care must be taken when
                                        (0018) ; modifying BOOT.TPL so that replacement strings (such as @PROJECT_NAME)
                                        (0019) ; are not accidentally modified.
                                        (0020) ;
                                        (0021) ;=============================================================================
                                        (0022) 
                                        (0023) include ".\lib\GlobalParams.inc"	;File generated by PSoC Designer (Project dependent)
                                        (0024) include "m8c.inc"			;Part specific file
                                        (0025) include "m8ssc.inc"			;Part specific file
                                        (0026) include "memory.inc"			;File generated by PSoC Designer (Project dependent)
                                        (0027) 
                                        (0028) ;--------------------------------------
                                        (0029) ; Export Declarations
                                        (0030) ;--------------------------------------
                                        (0031) 
                                        (0032) export __Start
                                        (0033) IF	(TOOLCHAIN & HITECH)
                                        (0034) ELSE
                                        (0035) export __bss_start
                                        (0036) export __data_start
                                        (0037) export __idata_start
                                        (0038) export __func_lit_start
                                        (0039) export __text_start
                                        (0040) ENDIF
                                        (0041) export  _bGetPowerSetting
                                        (0042) export   bGetPowerSetting	
                                        (0043) 
                                        (0044) 
                                        (0045) ;--------------------------------------
                                        (0046) ; Optimization flags
                                        (0047) ;--------------------------------------
                                        (0048) ;
                                        (0049) ; To change the value of these flags, modify the file boot.tpl, not
                                        (0050) ; boot.asm. See the notes in the banner comment at the beginning of
                                        (0051) ; this file.
                                        (0052) 
                                        (0053) ; Optimization for Assembly language (only) projects and C-language projects
                                        (0054) ; that do not depend on the C compiler to initialize the values of RAM variables.
                                        (0055) ;   Set to 1: Support for C Run-time Environment initialization
                                        (0056) ;   Set to 0: Support for C not included. Faster start up, smaller code space.
                                        (0057) ;
                                        (0058) IF	(TOOLCHAIN & HITECH)
                                        (0059) ; The C compiler will customize the startup code - it's not required here
                                        (0060) 
                                        (0061) C_LANGUAGE_SUPPORT:              equ 0
                                        (0062) ELSE
                                        (0063) C_LANGUAGE_SUPPORT:              equ 1
                                        (0064) ENDIF
                                        (0065) 
                                        (0066) 
                                        (0067) ; The following equate is required for proper operation. Reseting its value
                                        (0068) ; is discouraged.  WAIT_FOR_32K is effective only if the crystal oscillator is
                                        (0069) ; selected.  If the designer chooses to not wait then stabilization of the ECO
                                        (0070) ; and PLL_Lock must take place within user code. See the family data sheet for
                                        (0071) ; the requirements of starting the ECO and PLL lock mode.
                                        (0072) ;
                                        (0073) ;   Set to 1: Wait for XTAL (& PLL if selected) to stabilize before
                                        (0074) ;                invoking main
                                        (0075) ;   Set to 0: Boot code does not wait; clock may not have stabilized by
                                        (0076) ;               the time code in main starts executing.
                                        (0077) ;
                                        (0078) WAIT_FOR_32K:                    equ 1
                                        (0079) 
                                        (0080) 
                                        (0081) 
                                        (0082) ; For historical reasons, by default the boot code uses an lcall instruction
                                        (0083) ; to invoke the user's _main code. If _main executes a return instruction,
                                        (0084) ; boot provides an infinite loop. By changing the following equate from zero
                                        (0085) ; to 1, boot's lcall will be replaced by a ljmp instruction, saving two
                                        (0086) ; bytes on the stack which are otherwise required for the return address. If
                                        (0087) ; this option is enabled, _main must not return. (Beginning with the 4.2
                                        (0088) ; release, the C compiler automatically places an infinite loop at the end
                                        (0089) ; of main, rather than a return instruction.)
                                        (0090) ;
                                        (0091) ENABLE_LJMP_TO_MAIN:             equ 0
                                        (0092) 
                                        (0093) 
                                        (0094) ;-----------------------------------------------------------------------------
                                        (0095) ; Interrupt Vector Table
                                        (0096) ;-----------------------------------------------------------------------------
                                        (0097) ;
                                        (0098) ; Interrupt vector table entries are 4 bytes long.  Each one contains
                                        (0099) ; a jump instruction to an ISR (Interrupt Service Routine), although
                                        (0100) ; very short ISRs could be encoded within the table itself. Normally,
                                        (0101) ; vector jump targets are modified automatically according to the user
                                        (0102) ; modules selected. This occurs when the 'Generate Application' opera-
                                        (0103) ; tion is run causing PSoC Designer to create boot.asm and the other
                                        (0104) ; configuration files. If you need to hard code a vector, update the
                                        (0105) ; file boot.tpl, not boot.asm. See the banner comment at the beginning
                                        (0106) ; of this file.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) 
                                        (0109)     AREA TOP (ROM, ABS, CON)
                                        (0110) 
                                        (0111)     org   0                        ;Reset Interrupt Vector
                                        (0112) IF	(TOOLCHAIN & HITECH)
                                        (0113) ;   jmp   __Start                  ;C compiler fills in this vector
                                        (0114) ELSE
0000: 80 7F    JMP   0x0080             (0115)     jmp   __Start                  ;First instruction executed following a Reset
                                        (0116) ENDIF
                                        (0117)     ;@PSoC_BOOT_ISR_UserCode_START@
                                        (0118)     ;---------------------------------------------------
                                        (0119)     ; Insert your custom code below this banner
                                        (0120)     ;---------------------------------------------------
                                        (0121) 
                                        (0122)     org   04h                      ;Low Voltage Detect (LVD) Interrupt Vector
0004: 30       HALT                     (0123)     halt                           ;Stop execution if power falls too low
                                        (0124) 
                                        (0125)     org   08h                      ;Analog Column 0 / Decimator 0 Interrupt Vector
                                        (0126)     // call	void_handler
0008: 7E       RETI                     (0127)     reti
                                        (0128) 
                                        (0129)     org   0Ch                      ;Analog Column 1 / Decimator 1 Interrupt Vector
                                        (0130)     // call	void_handler
000C: 7E       RETI                     (0131)     reti
                                        (0132) 
                                        (0133)     org   10h                      ;Analog Column 2 / Decimator 2 Interrupt Vector
                                        (0134)     // call	void_handler
0010: 7E       RETI                     (0135)     reti
                                        (0136) 
                                        (0137)     org   14h                      ;Analog Column 3 / Decimator 3 Interrupt Vector
                                        (0138)     // call	void_handler
0014: 7E       RETI                     (0139)     reti
                                        (0140)     
                                        (0141)     org   18h                      ;VC3 Interrupt Vector
                                        (0142)     // call	void_handler
0018: 7E       RETI                     (0143)     reti
                                        (0144) 
                                        (0145)     org   1Ch                      ;GPIO Interrupt Vector
                                        (0146)     // call	void_handler
001C: 7E       RETI                     (0147)     reti
                                        (0148) 
                                        (0149)     org   20h                      ;PSoC Block DBC00 Interrupt Vector
                                        (0150)     // call	void_handler
0020: 7E       RETI                     (0151)     reti
                                        (0152) 
                                        (0153)     org   24h                      ;PSoC Block DBC01 Interrupt Vector
0024: 7D 04 F4 LJMP  _PWM16_CH0_ISR     (0154)     ljmp	_PWM16_CH0_ISR
0027: 7E       RETI                     (0155)     reti
                                        (0156) 
                                        (0157)     org   28h                      ;PSoC Block DCC02 Interrupt Vector
                                        (0158)     // call	void_handler
0028: 7E       RETI                     (0159)     reti
                                        (0160) 
                                        (0161)     org   2Ch                      ;PSoC Block DCC03 Interrupt Vector
002C: 7D 04 97 LJMP  _PWM16_CH1_ISR     (0162)     ljmp	_PWM16_CH1_ISR
002F: 7E       RETI                     (0163)     reti
                                        (0164)     
                                        (0165)     org   30h                      ;PSoC Block DBC10 Interrupt Vector
                                        (0166)     // call	void_handler
0030: 7E       RETI                     (0167)     reti
                                        (0168) 
                                        (0169)     org   34h                      ;PSoC Block DBC11 Interrupt Vector
                                        (0170)     // call	void_handler
0034: 7E       RETI                     (0171)     reti
                                        (0172) 
                                        (0173)     org   38h                      ;PSoC Block DCC12 Interrupt Vector
                                        (0174)     // call	void_handler
0038: 7E       RETI                     (0175)     reti
                                        (0176) 
                                        (0177)     org   3Ch                      ;PSoC Block DCC13 Interrupt Vector
                                        (0178)     // call	void_handler
003C: 7E       RETI                     (0179)     reti
                                        (0180) 
                                        (0181) 	org   40h                      ;PSoC Block DBC20 Interrupt Vector
                                        (0182)     // call	void_handler
0040: 7E       RETI                     (0183)     reti
                                        (0184) 	
                                        (0185) 	org   44h                      ;PSoC Block DBC21 Interrupt Vector
                                        (0186)     // call	void_handler
0044: 7E       RETI                     (0187)     reti
                                        (0188) 	
                                        (0189) 	org   48h                      ;PSoC Block DCC22 Interrupt Vector
                                        (0190)     // call	void_handler
0048: 7E       RETI                     (0191)     reti
                                        (0192) 	
                                        (0193) 	org   4Ch                      ;PSoC Block DCC23 Interrupt Vector
                                        (0194)     // call	void_handler
004C: 7E       RETI                     (0195)     reti
                                        (0196) 	 
                                        (0197)     org   60h                      ;PSoC I2C0 Interrupt Vector
                                        (0198)     // call	void_handler
0060: 7E       RETI                     (0199)     reti
                                        (0200) 
                                        (0201) 	org   64h                      ;PSoC I2C1 Interrupt Vector
                                        (0202)     // call	void_handler
0064: 7E       RETI                     (0203)     reti
                                        (0204) 	
                                        (0205) 	org   68h                      ;PSoC SARADC Interrupt Vector
                                        (0206)     // call	void_handler
0068: 7E       RETI                     (0207)     reti
                                        (0208) 	
                                        (0209) 	org   6Ch                      ;PSoC RTC Interrupt Vector
006C: 7D 03 F9 LJMP  _RTC_ISR           (0210)     ljmp	_RTC_ISR
006F: 7E       RETI                     (0211)     reti
                                        (0212) 	
                                        (0213) 	org   70h                      ;Analog Column 4 Interrupt Vector
                                        (0214)     // call	void_handler
0070: 7E       RETI                     (0215)     reti
                                        (0216) 	
                                        (0217) 	org   74h                      ;Analog Column 5 Interrupt Vector
                                        (0218)     // call	void_handler
0074: 7E       RETI                     (0219)     reti
                                        (0220) 	
                                        (0221)     org   7Ch                      ;Sleep Timer Interrupt Vector
                                        (0222)     // call	void_handler
007C: 7E       RETI                     (0223)     reti
0080: 71 10    OR    F,0x10             
                                        (0224)     ;---------------------------------------------------
                                        (0225)     ; Insert your custom code above this banner
                                        (0226)     ;---------------------------------------------------
                                        (0227)     ;@PSoC_BOOT_ISR_UserCode_END@
                                        (0228) 
                                        (0229) ;-----------------------------------------------------------------------------
                                        (0230) ;  Start of Execution.
                                        (0231) ;-----------------------------------------------------------------------------
                                        (0232) ;  The Supervisory ROM SWBootReset function has already completed the
                                        (0233) ;  calibrate1 process, loading trim values for 5 volt operation.
                                        (0234) ;
                                        (0235) 
                                        (0236) IF	(TOOLCHAIN & HITECH)
                                        (0237)  	AREA PD_startup(CODE, REL, CON)
                                        (0238) ELSE
                                        (0239)     org 80h
                                        (0240) ENDIF
                                        (0241) __Start:
                                        (0242) 
                                        (0243)     ; initialize SMP values for voltage stabilization, if required,
                                        (0244)     ; leaving power-on reset (POR) level at the default (low) level, at
                                        (0245)     ; least for now. 
                                        (0246)     ;
                                        (0247)     M8C_SetBank1
0082: 62 E3 87 MOV   REG[0xE3],0x87     (0248)     mov   reg[VLT_CR], SWITCH_MODE_PUMP_JUST | LVD_TBEN_JUST | TRIP_VOLTAGE_JUST
0085: 70 EF    AND   F,0xEF             
0087: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0249)     M8C_SetBank0
                                        (0250) 
                                        (0251) M8C_ClearWDTAndSleep			   ; Clear WDT before enabling it.
                                        (0252) IF ( WATCHDOG_ENABLE )             ; WDT selected in Global Params
                                        (0253)     M8C_EnableWatchDog
                                        (0254) ENDIF
                                        (0255) 
                                        (0256) IF ( SELECT_32K )
                                        (0257)     or   reg[CPU_SCR1],  CPU_SCR1_ECO_ALLOWED  ; ECO will be used in this project
                                        (0258) ELSE
008A: 41 FE FB AND   REG[0xFE],0xFB     (0259)     and  reg[CPU_SCR1], ~CPU_SCR1_ECO_ALLOWED  ; Prevent ECO from being enabled
                                        (0260) ENDIF
                                        (0261) 
                                        (0262)     ;---------------------------
                                        (0263)     ; Set up the Temporary stack
                                        (0264)     ;---------------------------
                                        (0265)     ; A temporary stack is set up for the SSC instructions.
                                        (0266)     ; The real stack start will be assigned later.
                                        (0267)     ;
                                        (0268) _stack_start:          equ 80h
008D: 50 80    MOV   A,0x80             (0269)     mov   A, _stack_start          ; Set top of stack to end of used RAM
008F: 4E       SWAP  SP,A               (0270)     swap  SP, A                    ; This is only temporary if going to LMM
0090: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0271) 
                                        (0272)     ;------------------------
                                        (0273)     ; Set Power-related Trim 
                                        (0274)     ;------------------------
                                        (0275) M8C_ClearWDTAndSleep ; Clear WDT before enabling it.
                                        (0276) IF ( POWER_SETTING & POWER_SET_5V0)            ; *** 5.0 Volt operation   ***
                                        (0277)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0278)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0279)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_5V_6MHZ, 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0280) ELSE
                                        (0281) 	IF ( AGND_BYPASS )
                                        (0282)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0283)     ; The 5V trim has already been set, but we need to update the AGNDBYP
                                        (0284)     ; bit in the write-only BDG_TR register. Recalculate the register
                                        (0285)     ; value using the proper trim values.
                                        (0286)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0287)     M8SSC_SetTableVoltageTrim 1, SSCTBL1_TRIM_BGR_5V, AGND_BYPASS_JUST
                                        (0288)   ENDIF
                                        (0289)  ENDIF
                                        (0290) ENDIF ; 5.0 V Operation
                                        (0291) 
                                        (0292) IF ( POWER_SETTING & POWER_SET_3V3)            ; *** 3.3 Volt operation   ***
                                        (0293)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** 6MHZ Main Oscillator ***
                                        (0294)     or  reg[CPU_SCR1], CPU_SCR1_SLIMO
                                        (0295)     M8SSC_Set2TableTrims 2, SSCTBL2_TRIM_IMO_3V_6MHZ, 1, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0296)  ELSE                                          ; *** 12MHZ Main Oscillator ***
                                        (0297)     M8SSC_SetTableTrims  1, SSCTBL1_TRIM_IMO_3V_24MHZ, SSCTBL1_TRIM_BGR_3V, AGND_BYPASS_JUST
                                        (0298)  ENDIF
                                        (0299) ENDIF ; 3.3 Volt Operation
                                        (0300) 
                                        (0301) 
0093: 55 F8 00 MOV   [power_target+242],0x0(0302)     mov  [bSSC_KEY1],  0           ; Lock out Flash and Supervisiory operations
0096: 55 F9 00 MOV   [power_target+243],0x0(0303)     mov  [bSSC_KEYSP], 0
0099: 71 10    OR    F,0x10             
                                        (0304) 
                                        (0305)     ;---------------------------------------
                                        (0306)     ; Initialize Crystal Oscillator and PLL
                                        (0307)     ;---------------------------------------
                                        (0308) IF ( SELECT_32K & WAIT_FOR_32K )
                                        (0309)     ; If the user has requested the External Crystal Oscillator (ECO) then turn it
                                        (0310)     ; on and wait for it to stabilize and the system to switch over to it. The PLL
                                        (0311)     ; is left off.  The SleepTimer period is set to 1 sec to time the wait for
                                        (0312)     ; the ECO to stabilize.
                                        (0313)     ;
                                        (0314)     M8C_SetBank1
                                        (0315)     mov   reg[OSC_CR0], (SELECT_32K_JUST | OSC_CR0_SLEEP_1Hz | OSC_CR0_CPU_12MHz)
                                        (0316)     M8C_SetBank0
                                        (0317)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get a full second
                                        (0318)     or    reg[INT_MSK0], INT_MSK0_SLEEP   ; Enable latching of SleepTimer interrupt
                                        (0319)     mov   reg[INT_VC],   0                ; Clear all pending interrupts
                                        (0320) .WaitFor1s:
                                        (0321)     tst   reg[INT_CLR0], INT_MSK0_SLEEP   ; Test the SleepTimer Interrupt Status
                                        (0322)     jz   .WaitFor1s                       ; Interrupt will latch but will not dispatch
                                        (0323)                                           ;  since interrupts are not globally enabled
                                        (0324) ELSE ; !( SELECT_32K & WAIT_FOR_32K )
                                        (0325)     ; Either no ECO, or waiting for stable clock is to be done in main
                                        (0326)     M8C_SetBank1
009B: 62 E0 02 MOV   REG[0xE0],0x2      (0327)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | OSC_CR0_CPU_12MHz)
009E: 70 EF    AND   F,0xEF             
00A0: 62 E3 38 MOV   REG[0xE3],0x38     
                                        (0328)     M8C_SetBank0
                                        (0329)     M8C_ClearWDTAndSleep           ; Reset the watch dog
                                        (0330) 
                                        (0331) ENDIF ;( SELECT_32K & WAIT_FOR_32K )
                                        (0332) 
                                        (0333) IF ( PLL_MODE )
                                        (0334)     ; Crystal is now fully operational (assuming WAIT_FOR_32K was enabled).
                                        (0335)     ; Now start up PLL if selected, and wait 16 msec for it to stabilize.
                                        (0336)     ;
                                        (0337)     M8C_SetBank1
                                        (0338)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_3MHz)
                                        (0339)     M8C_SetBank0
                                        (0340)     M8C_ClearWDTAndSleep                  ; Reset the sleep timer to get full period
                                        (0341)     mov   reg[INT_VC], 0                  ; Clear all pending interrupts
                                        (0342) 
                                        (0343) .WaitFor16ms:
                                        (0344)     tst   reg[INT_CLR0],INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0345)     jz   .WaitFor16ms
                                        (0346)     M8C_SetBank1                          ; continue boot at CPU Speed of SYSCLK/2
                                        (0347)     mov   reg[OSC_CR0], (SELECT_32K_JUST | PLL_MODE_JUST | OSC_CR0_SLEEP_64Hz | OSC_CR0_CPU_12MHz)
                                        (0348)     M8C_SetBank0
                                        (0349) 
                                        (0350) IF      ( WAIT_FOR_32K )
                                        (0351) ELSE ; !( WAIT_FOR_32K )
                                        (0352)     ; Option settings (PLL-Yes, ECO-No) are incompatible - force a syntax error
                                        (0353)     ERROR_PSoC Disabling WAIT_FOR_32K requires that the PLL_Lock must be enabled in user code.
                                        (0354) ENDIF ;(WAIT_FOR_32K)
                                        (0355) ENDIF ;(PLL_MODE)
                                        (0356) 
                                        (0357) 	;-------------------------------------------------------
                                        (0358)     ; Initialize Proper Drive Mode for External Clock Pin
                                        (0359)     ;-------------------------------------------------------
                                        (0360) 
                                        (0361)     ; Change EXTCLK pin from Hi-Z Analog (110b) drive mode to Hi-Z (010b) drive mode
                                        (0362) 
                                        (0363) IF (SYSCLK_SOURCE)
                                        (0364)     and reg[PRT1DM2],  ~0x10        ; Clear bit 4 of EXTCLK pin's DM2 register 
                                        (0365) ENDIF
                                        (0366)     ; EXTCLK pin is now in proper drive mode to input the external clock signal
                                        (0367) 
                                        (0368) 	;------------------------
                                        (0369) 	; Close CT leakage path.
                                        (0370) 	;------------------------
00A3: 62 71 05 MOV   REG[0x71],0x5      (0371) 	mov reg[ACC00CR0], 05h
00A6: 62 75 05 MOV   REG[0x75],0x5      (0372) 	mov reg[ACC01CR0], 05h
00A9: 62 79 05 MOV   REG[0x79],0x5      (0373) 	mov reg[ACC02CR0], 05h
00AC: 62 7D 05 MOV   REG[0x7D],0x5      (0374) 	mov reg[ACC03CR0], 05h
00AF: 62 D1 03 MOV   REG[0xD1],0x3      
                                        (0375) 
                                        (0376) 
                                        (0377) 
                                        (0378) IF	(TOOLCHAIN & HITECH)
                                        (0379)     ;---------------------------------------------
                                        (0380)     ; HI-TECH initialization: Enter the Large Memory Model, if applicable
                                        (0381)     ;---------------------------------------------
                                        (0382) 	global		__Lstackps
                                        (0383) 	mov     a,low __Lstackps
                                        (0384) 	swap    a,sp
                                        (0385) 
                                        (0386) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0387)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
                                        (0388)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0389)     RAM_SETPAGE_CUR 0
                                        (0390)     RAM_SETPAGE_MVW 0
                                        (0391)     RAM_SETPAGE_MVR 0
                                        (0392)     IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
                                        (0393)       or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0394)     ELSE
                                        (0395)       or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0396)     ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0397) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0398) ELSE
                                        (0399)     ;---------------------------------------------
                                        (0400)     ; ImageCraft Enter the Large Memory Model, if applicable
                                        (0401)     ;---------------------------------------------
                                        (0402) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0403)     RAM_SETPAGE_STK SYSTEM_STACK_PAGE      ; relocate stack page ...
00B2: 50 00    MOV   A,0x0              (0404)     mov   A, SYSTEM_STACK_BASE_ADDR        ;   and offset, if any
00B4: 4E       SWAP  SP,A               (0405)     swap  A, SP
00B5: 62 D3 03 MOV   REG[0xD3],0x3      
00B8: 62 D0 00 MOV   REG[0xD0],0x0      
00BB: 62 D5 00 MOV   REG[0xD5],0x0      
00BE: 62 D4 00 MOV   REG[0xD4],0x0      
                                        (0406)     RAM_SETPAGE_IDX2STK            ; initialize other page pointers
                                        (0407)     RAM_SETPAGE_CUR 0
                                        (0408)     RAM_SETPAGE_MVW 0
                                        (0409)     RAM_SETPAGE_MVR 0
                                        (0410) 
                                        (0411)   IF ( SYSTEM_IDXPG_TRACKS_STK_PP ); Now enable paging:
00C1: 71 C0    OR    F,0xC0             (0412)     or    F, FLAG_PGMODE_11b       ; LMM w/ IndexPage<==>StackPage
                                        (0413)   ELSE
                                        (0414)     or    F, FLAG_PGMODE_10b       ; LMM w/ independent IndexPage
                                        (0415)   ENDIF ;  SYSTEM_IDXPG_TRACKS_STK_PP
                                        (0416) ELSE
                                        (0417)     mov   A, __ramareas_end        ; Set top of stack to end of used RAM
                                        (0418)     swap  SP, A
                                        (0419) ENDIF ;  SYSTEM_LARGE_MEMORY_MODEL
                                        (0420) ENDIF ;	TOOLCHAIN
                                        (0421) 
                                        (0422)     ;@PSoC_BOOT_LOADCFG_UserCode_START@
                                        (0423)     ;---------------------------------------------------
                                        (0424)     ; Insert your custom code below this banner
                                        (0425)     ;---------------------------------------------------
                                        (0426) 
                                        (0427)     ;---------------------------------------------------
                                        (0428)     ; Insert your custom code above this banner
                                        (0429)     ;---------------------------------------------------
                                        (0430)     ;@PSoC_BOOT_LOADCFG_UserCode_END@ 
                                        (0431) 
                                        (0432)     ;-------------------------
                                        (0433)     ; Load Base Configuration
                                        (0434)     ;-------------------------
                                        (0435)     ; Load global parameter settings and load the user modules in the
                                        (0436)     ; base configuration. Exceptions: (1) Leave CPU Speed fast as possible
                                        (0437)     ; to minimize start up time; (2) We may still need to play with the
                                        (0438)     ; Sleep Timer.
                                        (0439)     ;
00C3: 7C 03 8E LCALL 0x038E             (0440)     lcall LoadConfigInit
00C6: 70 EF    AND   F,0xEF             
                                        (0441)     M8C_SetBank0
                                        (0442) 
                                        (0443)     ;-----------------------------------
                                        (0444)     ; Initialize C Run-Time Environment
                                        (0445)     ;-----------------------------------
                                        (0446) IF ( C_LANGUAGE_SUPPORT )
                                        (0447) IF ( SYSTEM_SMALL_MEMORY_MODEL )
                                        (0448)     mov  A,0                           ; clear the 'bss' segment to zero
                                        (0449)     mov  [__r0],<__bss_start
                                        (0450) BssLoop:
                                        (0451)     cmp  [__r0],<__bss_end
                                        (0452)     jz   BssDone
                                        (0453)     mvi  [__r0],A
                                        (0454)     jmp  BssLoop
                                        (0455) BssDone:
                                        (0456)     mov  A,>__idata_start              ; copy idata to data segment
                                        (0457)     mov  X,<__idata_start
                                        (0458)     mov  [__r0],<__data_start
                                        (0459) IDataLoop:
                                        (0460)     cmp  [__r0],<__data_end
                                        (0461)     jz   C_RTE_Done
                                        (0462)     push A
                                        (0463)     romx
                                        (0464)     mvi  [__r0],A
                                        (0465)     pop  A
                                        (0466)     inc  X
                                        (0467)     adc  A,0
                                        (0468)     jmp  IDataLoop
                                        (0469) 
                                        (0470) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0471) 
                                        (0472) IF ( SYSTEM_LARGE_MEMORY_MODEL )
00C8: 62 D0 00 MOV   REG[0xD0],0x0      (0473)     mov   reg[CUR_PP], >__r0           ; force direct addr mode instructions
                                        (0474)                                        ; to use the Virtual Register page.
                                        (0475) 
                                        (0476)     ; Dereference the constant (flash) pointer pXIData to access the start
                                        (0477)     ; of the extended idata area, "xidata." Xidata follows the end of the
                                        (0478)     ; text segment and may have been relocated by the Code Compressor.
                                        (0479)     ;
00CB: 50 02    MOV   A,0x2              (0480)     mov   A, >__pXIData                ; Get the address of the flash
00CD: 57 C7    MOV   X,0xC7             (0481)     mov   X, <__pXIData                ;   pointer to the xidata area.
00CF: 08       PUSH  A                  (0482)     push  A
00D0: 28       ROMX                     (0483)     romx                               ; get the MSB of xidata's address
00D1: 53 05    MOV   [__r0],A           (0484)     mov   [__r0], A
00D3: 18       POP   A                  (0485)     pop   A
00D4: 75       INC   X                  (0486)     inc   X
00D5: 09 00    ADC   A,0x0              (0487)     adc   A, 0
00D7: 28       ROMX                     (0488)     romx                               ; get the LSB of xidata's address
00D8: 4B       SWAP  A,X                (0489)     swap  A, X
00D9: 51 05    MOV   A,[__r0]           (0490)     mov   A, [__r0]                    ; pXIData (in [A,X]) points to the
                                        (0491)                                        ;   XIData structure list in flash
00DB: 80 04    JMP   0x00E0             (0492)     jmp   .AccessStruct
                                        (0493) 
                                        (0494)     ; Unpack one element in the xidata "structure list" that specifies the
                                        (0495)     ; values of C variables. Each structure contains 3 member elements.
                                        (0496)     ; The first is a pointer to a contiguous block of RAM to be initial-
                                        (0497)     ; ized. Blocks are always 255 bytes or less in length and never cross
                                        (0498)     ; RAM page boundaries. The list terminates when the MSB of the pointer
                                        (0499)     ; contains 0xFF. There are two formats for the struct depending on the
                                        (0500)     ; value in the second member element, an unsigned byte:
                                        (0501)     ; (1) If the value of the second element is non-zero, it represents
                                        (0502)     ; the 'size' of the block of RAM to be initialized. In this case, the
                                        (0503)     ; third member of the struct is an array of bytes of length 'size' and
                                        (0504)     ; the bytes are copied to the block of RAM.
                                        (0505)     ; (2) If the value of the second element is zero, the block of RAM is
                                        (0506)     ; to be cleared to zero. In this case, the third member of the struct
                                        (0507)     ; is an unsigned byte containing the number of bytes to clear.
                                        (0508) 
                                        (0509) .AccessNextStructLoop:
00DD: 75       INC   X                  (0510)     inc   X                            ; pXIData++
00DE: 09 00    ADC   A,0x0              (0511)     adc   A, 0
00E0: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0512) .AccessStruct:                         ; Entry point for first block
                                        (0513)     ;
                                        (0514)     ; Assert: pXIData in [A,X] points to the beginning of an XIData struct.
                                        (0515)     ;
                                        (0516)     M8C_ClearWDT                       ; Clear the watchdog for long inits
00E3: 08       PUSH  A                  (0517)     push  A
00E4: 28       ROMX                     (0518)     romx                               ; MSB of RAM addr (CPU.A <- *pXIData)
00E5: 60 D5    MOV   REG[0xD5],A        (0519)     mov   reg[MVW_PP], A               ;   for use with MVI write operations
00E7: 74       INC   A                  (0520)     inc   A                            ; End of Struct List? (MSB==0xFF?)
00E8: A0 4B    JZ    0x0134             (0521)     jz    .C_RTE_WrapUp                ;   Yes, C runtime environment complete
00EA: 18       POP   A                  (0522)     pop   A                            ; restore pXIData to [A,X]
00EB: 75       INC   X                  (0523)     inc   X                            ; pXIData++
00EC: 09 00    ADC   A,0x0              (0524)     adc   A, 0
00EE: 08       PUSH  A                  (0525)     push  A
00EF: 28       ROMX                     (0526)     romx                               ; LSB of RAM addr (CPU.A <- *pXIData)
00F0: 53 05    MOV   [__r0],A           (0527)     mov   [__r0], A                    ; RAM Addr now in [reg[MVW_PP],[__r0]]
00F2: 18       POP   A                  (0528)     pop   A                            ; restore pXIData to [A,X]
00F3: 75       INC   X                  (0529)     inc   X                            ; pXIData++ (point to size)
00F4: 09 00    ADC   A,0x0              (0530)     adc   A, 0
00F6: 08       PUSH  A                  (0531)     push  A
00F7: 28       ROMX                     (0532)     romx                               ; Get the size (CPU.A <- *pXIData)
00F8: A0 1C    JZ    0x0115             (0533)     jz    .ClearRAMBlockToZero         ; If Size==0, then go clear RAM
00FA: 53 04    MOV   [__r1],A           (0534)     mov   [__r1], A                    ;             else downcount in __r1
00FC: 18       POP   A                  (0535)     pop   A                            ; restore pXIData to [A,X]
                                        (0536) 
                                        (0537) .CopyNextByteLoop:
                                        (0538)     ; For each byte in the structure's array member, copy from flash to RAM.
                                        (0539)     ; Assert: pXIData in [A,X] points to previous byte of flash source;
                                        (0540)     ;         [reg[MVW_PP],[__r0]] points to next RAM destination;
                                        (0541)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0542)     ;
00FD: 75       INC   X                  (0543)     inc   X                            ; pXIData++ (point to next data byte)
00FE: 09 00    ADC   A,0x0              (0544)     adc   A, 0
0100: 08       PUSH  A                  (0545)     push  A
0101: 28       ROMX                     (0546)     romx                               ; Get the data value (CPU.A <- *pXIData)
0102: 3F 05    MVI   [__r0],A           (0547)     mvi   [__r0], A                    ; Transfer the data to RAM
0104: 47 05 FF TST   [__r0],0xFF        (0548)     tst   [__r0], 0xff                 ; Check for page crossing
0107: B0 06    JNZ   0x010E             (0549)     jnz   .CopyLoopTail                ;   No crossing, keep going
0109: 5D D5    MOV   A,REG[0xD5]        (0550)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
010B: 74       INC   A                  (0551)     inc   A
010C: 60 D5    MOV   REG[0xD5],A        (0552)     mov   reg[ MVW_PP], A
                                        (0553) .CopyLoopTail:
010E: 18       POP   A                  (0554)     pop   A                            ; restore pXIData to [A,X]
010F: 7A 04    DEC   [__r1]             (0555)     dec   [__r1]                       ; End of this array in flash?
0111: BF EB    JNZ   0x00FD             (0556)     jnz   .CopyNextByteLoop            ;   No,  more bytes to copy
0113: 8F C9    JMP   0x00DD             (0557)     jmp   .AccessNextStructLoop        ;   Yes, initialize another RAM block
                                        (0558) 
                                        (0559) .ClearRAMBlockToZero:
0115: 18       POP   A                  (0560)     pop   A                            ; restore pXIData to [A,X]
0116: 75       INC   X                  (0561)     inc   X                            ; pXIData++ (point to next data byte)
0117: 09 00    ADC   A,0x0              (0562)     adc   A, 0
0119: 08       PUSH  A                  (0563)     push  A
011A: 28       ROMX                     (0564)     romx                               ; Get the run length (CPU.A <- *pXIData)
011B: 53 04    MOV   [__r1],A           (0565)     mov   [__r1], A                    ; Initialize downcounter
011D: 50 00    MOV   A,0x0              (0566)     mov   A, 0                         ; Initialize source data
                                        (0567) 
                                        (0568) .ClearRAMBlockLoop:
                                        (0569)     ; Assert: [reg[MVW_PP],[__r0]] points to next RAM destination and
                                        (0570)     ;         __r1 holds a non-zero count of the number of bytes remaining.
                                        (0571)     ;
011F: 3F 05    MVI   [__r0],A           (0572)     mvi   [__r0], A                    ; Clear a byte
0121: 47 05 FF TST   [__r0],0xFF        (0573)     tst   [__r0], 0xff                 ; Check for page crossing
0124: B0 08    JNZ   0x012D             (0574)     jnz   .ClearLoopTail               ;   No crossing, keep going
0126: 5D D5    MOV   A,REG[0xD5]        (0575)     mov   A, reg[ MVW_PP]              ;   If crossing, bump MVW page reg
0128: 74       INC   A                  (0576)     inc   A
0129: 60 D5    MOV   REG[0xD5],A        (0577)     mov   reg[ MVW_PP], A
012B: 50 00    MOV   A,0x0              (0578)     mov   A, 0                         ; Restore the zero used for clearing
                                        (0579) .ClearLoopTail:
012D: 7A 04    DEC   [__r1]             (0580)     dec   [__r1]                       ; Was this the last byte?
012F: BF EF    JNZ   0x011F             (0581)     jnz   .ClearRAMBlockLoop           ;   No,  continue
0131: 18       POP   A                  (0582)     pop   A                            ;   Yes, restore pXIData to [A,X] and
0132: 8F AA    JMP   0x00DD             (0583)     jmp   .AccessNextStructLoop        ;        initialize another RAM block
                                        (0584) 
                                        (0585) .C_RTE_WrapUp:
0134: 18       POP   A                  (0586)     pop   A                            ; balance stack
0135: 71 10    OR    F,0x10             
0137: 70 EF    AND   F,0xEF             
                                        (0587) 
                                        (0588) ENDIF ; SYSTEM_LARGE_MEMORY_MODEL
                                        (0589) 
                                        (0590) C_RTE_Done:
                                        (0591) 
                                        (0592) ENDIF ; C_LANGUAGE_SUPPORT
                                        (0593) 
                                        (0594)     ;-------------------------------
                                        (0595)     ; Voltage Stabilization for SMP
                                        (0596)     ;-------------------------------
                                        (0597) 
                                        (0598) IF ( POWER_SETTING & POWER_SET_5V0)    ; 5.0V Operation
                                        (0599) IF ( SWITCH_MODE_PUMP ^ 1 )            ; SMP is operational
                                        (0600)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0601)     ; When using the SMP at 5V, we must wait for Vdd to slew from 3.1V to
                                        (0602)     ; 5V before enabling the Precision Power-On Reset (PPOR).
                                        (0603)     ;- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                                        (0604)     or   reg[INT_MSK0],INT_MSK0_SLEEP
                                        (0605)     M8C_SetBank1
                                        (0606)     and   reg[OSC_CR0], ~OSC_CR0_SLEEP
                                        (0607)     or    reg[OSC_CR0],  OSC_CR0_SLEEP_512Hz
                                        (0608)     M8C_SetBank0
                                        (0609)     M8C_ClearWDTAndSleep                   ; Restart the sleep timer
                                        (0610)     mov   reg[INT_VC], 0                   ; Clear all pending interrupts
                                        (0611) .WaitFor2ms:
                                        (0612)     tst   reg[INT_CLR0], INT_MSK0_SLEEP    ; Test the SleepTimer Interrupt Status
                                        (0613)     jz   .WaitFor2ms                       ; Branch fails when 2 msec has passed
                                        (0614) ENDIF ; SMP is operational
                                        (0615) ENDIF ; 5.0V Operation
                                        (0616) 
                                        (0617)     ;-------------------------------
                                        (0618)     ; Set Power-On Reset (POR) Level
                                        (0619)     ;-------------------------------
                                        (0620) 
                                        (0621)     ; This checks for improper selection of CPU voltage and processer speed ratings. If an improper selection 
                                        (0622)     ; is made (in the global resources section of the device editor), a compilation error is created, disallowing
                                        (0623)     ; this selection. If the selection is valid, the POR level is then set.
                                        (0624)     ; Invalid cases checked: 
                                        (0625)     ;   -At 3.3 volt operation, the cpu rate must be at or below 12 MHz
                                        (0626) 
                                        (0627) 
                                        (0628) IF (POWER_SETTING & POWER_SET_3V3)		; 3.3V Operation?
                                        (0629)  IF ( POWER_SETTING & POWER_SET_SLOW_IMO)      ; *** SLIMO = 6MHZ, Do Nothing ***
                                        (0630)  ELSE
                                        (0631)    IF (CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz)	; Not 24 MHz, Do Nothing...
                                        (0632)    ELSE						; Otherwise, 24 MHz is selected... raise error
                                        (0633) 	ERROR_PSoC SEE COMMENTS			; Error - cannot use 24 MHz w/ 3.3V operation (Clock <= 12 MHz)
                                        (0634)    ENDIF
                                        (0635)  ENDIF
                                        (0636) ENDIF
                                        (0637)     ;  The writes to the VLT_CR register below include setting the POR to VLT_CR_POR_HIGH, 
                                        (0638)     ;  VLT_CR_POR_MID or VLT_CR_POR_LOW. Correctly setting this value is critical to the proper 
                                        (0639)     ;  operation of the PSoC. The POR protects the M8C from mis-executing when Vdd falls low. 
                                        (0640)     ;  These values should not be changed from the settings here. See Section "POR and LVD" of 
                                        (0641)     ;  Technical Reference Manual #001-52594 for more information.
                                        (0642) 
                                        (0643)     M8C_SetBank1
                                        (0644) 
                                        (0645) IF (POWER_SETTING & POWER_SET_5V0)          ; 5.0V Operation?
                                        (0646)  IF (POWER_SETTING & POWER_SET_SLOW_IMO)    ; and Slow Mode?
                                        (0647)  ELSE                                       ;    No, fast mode
                                        (0648)   IF ( CPU_CLOCK_JUST ^ OSC_CR0_CPU_24MHz ) ;    As fast as 24MHz?
                                        (0649)                                             ;       no, set midpoint POR in user code, if desired
                                        (0650)   ELSE ; 24HMz                              ;
                                        (0651)     or    reg[VLT_CR],  VLT_CR_POR_HIGH     ;      yes, highest POR trip point required
                                        (0652)   ENDIF ; 24MHz
                                        (0653)  ENDIF ; Slow Mode
                                        (0654) ENDIF ; 5.0V Operation
                                        (0655) 
                                        (0656)     M8C_SetBank0
                                        (0657) 
                                        (0658)     ;----------------------------
                                        (0659)     ; Wrap up and invoke "main"
                                        (0660)     ;----------------------------
                                        (0661) 
                                        (0662)     ; Disable the Sleep interrupt that was used for timing above.  In fact,
                                        (0663)     ; no interrupts should be enabled now, so may as well clear the register.
                                        (0664)     ;
0139: 62 E0 00 MOV   REG[0xE0],0x0      (0665)     mov  reg[INT_MSK0],0
013C: 71 10    OR    F,0x10             
                                        (0666) 
                                        (0667)     ; Everything has started OK. Now select requested CPU & sleep frequency.
                                        (0668)     ;
                                        (0669)     M8C_SetBank1
013E: 62 E0 00 MOV   REG[0xE0],0x0      (0670)     mov  reg[OSC_CR0],(SELECT_32K_JUST | PLL_MODE_JUST | SLEEP_TIMER_JUST | CPU_CLOCK_JUST)
0141: 43 E2 00 OR    REG[0xE2],0x0      (0671) 	or  reg[OSC_CR2], (SLEEP_TIMER_JUST2)
0144: 70 EF    AND   F,0xEF             
                                        (0672)     M8C_SetBank0
                                        (0673) 
                                        (0674)     ; Global Interrupt are NOT enabled, this should be done in main().
                                        (0675)     ; LVD is set but will not occur unless Global Interrupts are enabled.
                                        (0676)     ; Global Interrupts should be enabled as soon as possible in main().
                                        (0677)     ;
0146: 62 E2 00 MOV   REG[0xE2],0x0      (0678)     mov  reg[INT_VC],0             ; Clear any pending interrupts which may
                                        (0679)                                    ; have been set during the boot process.
                                        (0680) IF	(TOOLCHAIN & HITECH)
                                        (0681) 	ljmp  startup                  ; Jump to C compiler startup code
                                        (0682) ELSE
                                        (0683) IF ENABLE_LJMP_TO_MAIN
                                        (0684)     ljmp  _main                    ; goto main (no return)
                                        (0685) ELSE
0149: 7C 08 0F LCALL _main              (0686)     lcall _main                    ; call main
                                        (0687) .Exit:
014C: 8F FF    JMP   0x014C             (0688)     jmp  .Exit                     ; Wait here after return till power-off or reset
                                        (0689) ENDIF
                                        (0690) ENDIF ; TOOLCHAIN
                                        (0691) 
                                        (0692)     ;---------------------------------
                                        (0693)     ; Library Access to Global Parms
                                        (0694)     ;---------------------------------
                                        (0695)     ;
                                        (0696)  bGetPowerSetting:
                                        (0697) _bGetPowerSetting:
                                        (0698)     ; Returns value of POWER_SETTING in the A register.
                                        (0699)     ; No inputs. No Side Effects.
                                        (0700)     ;
                                        (0701) IF (POWER_SETTING & POWER_SET_2V7)
                                        (0702)     mov   A, POWER_SETTING | POWER_SET_SLOW_IMO
                                        (0703) ELSE
014E: 50 10    MOV   A,0x10             (0704)     mov   A, POWER_SETTING          ; Supply voltage and internal main osc
                                        (0705) ENDIF
0150: 7F       RET                      (0706)     ret
                                        (0707) 
                                        (0708) IF	(TOOLCHAIN & HITECH)
                                        (0709) ELSE
                                        (0710)     ;---------------------------------
                                        (0711)     ; Order Critical RAM & ROM AREAs
                                        (0712)     ;---------------------------------
                                        (0713)     ;  'TOP' is all that has been defined so far...
                                        (0714) 
                                        (0715)     ;  ROM AREAs for C CONST, static & global items
                                        (0716)     ;
                                        (0717)     AREA lit               (ROM, REL, CON, LIT)   ; 'const' definitions
                                        (0718)     AREA idata             (ROM, REL, CON, LIT)   ; Constants for initializing RAM
                                        (0719) __idata_start:
                                        (0720) 
                                        (0721)     AREA func_lit          (ROM, REL, CON, proclab)   ; Function Pointers
                                        (0722) __func_lit_start:
                                        (0723) 
                                        (0724) IF ( SYSTEM_LARGE_MEMORY_MODEL )
                                        (0725)     ; We use the func_lit area to store a pointer to extended initialized
                                        (0726)     ; data (xidata) area that follows the text area. Func_lit isn't
                                        (0727)     ; relocated by the code compressor, but the text area may shrink and
                                        (0728)     ; that moves xidata around.
                                        (0729)     ;
                                        (0730) __pXIData:         word __text_end           ; ptr to extended idata
                                        (0731) ENDIF
                                        (0732) 
                                        (0733)     AREA psoc_config       (ROM, REL, CON)   ; Configuration Load & Unload
                                        (0734)     AREA UserModules       (ROM, REL, CON)   ; User Module APIs
                                        (0735) 
                                        (0736)     ; CODE segment for general use
                                        (0737)     ;
                                        (0738)     AREA text (ROM, REL, CON)
                                        (0739) __text_start:
                                        (0740) 
                                        (0741)     ; RAM area usage
                                        (0742)     ;
                                        (0743)     AREA data              (RAM, REL, CON)   ; initialized RAM
                                        (0744) __data_start:
                                        (0745) 
                                        (0746)     AREA virtual_registers (RAM, REL, CON)   ; Temp vars of C compiler
                                        (0747)     AREA InterruptRAM      (RAM, REL, CON)   ; Interrupts, on Page 0
                                        (0748)     AREA bss               (RAM, REL, CON)   ; general use
                                        (0749) __bss_start:
                                        (0750) ENDIF ; TOOLCHAIN
                                        (0751) ; end of file boot.asm
FILE: lib\psocconfigtbl.asm             (0001) ;  Generated by PSoC Designer 5.4.3191
02C9: 70 EF    AND   F,0xEF             (0002) ;
                                        (0003) ; =============================================================================
                                        (0004) ; FILENAME: PSoCConfigTBL.asm
                                        (0005) ;  
                                        (0006) ; Copyright (c) Cypress Semiconductor 2013. All Rights Reserved.
                                        (0007) ;  
                                        (0008) ; NOTES:
                                        (0009) ; Do not modify this file. It is generated by PSoC Designer each time the
                                        (0010) ; generate application function is run. The values of the parameters in this
                                        (0011) ; file can be modified by changing the values of the global parameters in the
                                        (0012) ; device editor.
                                        (0013) ;  
                                        (0014) ; =============================================================================
                                        (0015)  
                                        (0016) include "m8c.inc"
                                        (0017) ;  Personalization tables 
                                        (0018) export LoadConfigTBL_fitolamp_slave_Bank1
                                        (0019) export LoadConfigTBL_fitolamp_slave_Bank0
                                        (0020) export LoadConfigTBL_fitolamp_slave_Ordered
                                        (0021) AREA lit(rom, rel)
                                        (0022) LoadConfigTBL_fitolamp_slave_Bank0:
                                        (0023) ;  Instance name LCD, User Module LCD
                                        (0024) ;  Instance name PWM16_CH0, User Module PWM16
                                        (0025) ;       Instance name PWM16_CH0, Block Name PWM16_LSB(DBC00)
                                        (0026) 	db		23h, 00h		;PWM16_CH0_CONTROL_LSB_REG(DBC00CR0)
                                        (0027) 	db		21h, 20h		;PWM16_CH0_PERIOD_LSB_REG(DBC00DR1)
                                        (0028) 	db		22h, 00h		;PWM16_CH0_COMPARE_LSB_REG(DBC00DR2)
                                        (0029) ;       Instance name PWM16_CH0, Block Name PWM16_MSB(DBC01)
                                        (0030) 	db		27h, 00h		;PWM16_CH0_CONTROL_MSB_REG(DBC01CR0)
                                        (0031) 	db		25h, 4eh		;PWM16_CH0_PERIOD_MSB_REG(DBC01DR1)
                                        (0032) 	db		26h, 00h		;PWM16_CH0_COMPARE_MSB_REG(DBC01DR2)
                                        (0033) ;  Instance name PWM16_CH1, User Module PWM16
                                        (0034) ;       Instance name PWM16_CH1, Block Name PWM16_LSB(DCC02)
                                        (0035) 	db		2bh, 00h		;PWM16_CH1_CONTROL_LSB_REG(DCC02CR0)
                                        (0036) 	db		29h, 20h		;PWM16_CH1_PERIOD_LSB_REG(DCC02DR1)
                                        (0037) 	db		2ah, 00h		;PWM16_CH1_COMPARE_LSB_REG(DCC02DR2)
                                        (0038) ;       Instance name PWM16_CH1, Block Name PWM16_MSB(DCC03)
                                        (0039) 	db		2fh, 00h		;PWM16_CH1_CONTROL_MSB_REG(DCC03CR0)
                                        (0040) 	db		2dh, 4eh		;PWM16_CH1_PERIOD_MSB_REG(DCC03DR1)
                                        (0041) 	db		2eh, 00h		;PWM16_CH1_COMPARE_MSB_REG(DCC03DR2)
                                        (0042) ;  Instance name RTC, User Module RTC
                                        (0043) ;  Global Register values Bank 0
                                        (0044) 	db		6ah, 00h		; ADCDataHigh register (SADC_DH)
                                        (0045) 	db		6bh, 00h		; ADCDataLow register (SADC_DL)
                                        (0046) 	db		62h, 00h		; AnalogClockSelect3 register (CLK_CR3)
                                        (0047) 	db		60h, 29h		; AnalogColumnInputSelect register (AMX_IN)
                                        (0048) 	db		66h, 00h		; AnalogComparatorControl1 register (CMP_CR1)
                                        (0049) 	db		61h, 00h		; AnalogMuxBusConfig register (AMUX_CFG)
                                        (0050) 	db		fch, 00h		; AnalogMuxDACData:0 register (IDACR_D)
                                        (0051) 	db		fdh, 00h		; AnalogMuxDACData:1 register (IDACL_D)
                                        (0052) 	db		63h, 05h		; AnalogReferenceControl register (ARF_CR)
                                        (0053) 	db		65h, 00h		; AnalogSynchronizationControl register (ASY_CR)
                                        (0054) 	db		e6h, 00h		; DecimatorControl_0 register (DEC_CR0)
                                        (0055) 	db		e7h, 00h		; DecimatorControl_1 register (DEC_CR1)
                                        (0056) 	db		a0h, 00h		; DecimatorDataHigh:0 register (DEC0_DH)
                                        (0057) 	db		a2h, 00h		; DecimatorDataHigh:1 register (DEC1_DH)
                                        (0058) 	db		a4h, 00h		; DecimatorDataHigh:2 register (DEC2_DH)
                                        (0059) 	db		a6h, 00h		; DecimatorDataHigh:3 register (DEC3_DH)
                                        (0060) 	db		a1h, 00h		; DecimatorDataLow:0 register (DEC0_DL)
                                        (0061) 	db		a3h, 00h		; DecimatorDataLow:1 register (DEC1_DL)
                                        (0062) 	db		a5h, 00h		; DecimatorDataLow:2 register (DEC2_DL)
                                        (0063) 	db		a7h, 00h		; DecimatorDataLow:3 register (DEC3_DL)
                                        (0064) 	db		d6h, 00h		; I2CConfig:0 register (I2C0_CFG)
                                        (0065) 	db		e8h, 00h		; Multiply0InputX register (MUL0_X)
                                        (0066) 	db		e9h, 00h		; Multiply0InputY register (MUL0_Y)
                                        (0067) 	db		a8h, 00h		; Multiply1InputX register (MUL1_X)
                                        (0068) 	db		a9h, 00h		; Multiply1InputY register (MUL1_Y)
                                        (0069) 	db		b7h, 00h		; RowDigitalInterconnectInputSelect:0 register (RDI0DSM)
                                        (0070) 	db		bfh, 00h		; RowDigitalInterconnectInputSelect:1 register (RDI1DSM)
                                        (0071) 	db		c7h, 00h		; RowDigitalInterconnectInputSelect:2 register (RDI2DSM)
                                        (0072) 	db		b0h, 00h		; Row_0_InputMux register (RDI0RI)
                                        (0073) 	db		b1h, 00h		; Row_0_InputSync register (RDI0SYN)
                                        (0074) 	db		b2h, 00h		; Row_0_LogicInputAMux register (RDI0IS)
                                        (0075) 	db		b3h, 33h		; Row_0_LogicSelect_0 register (RDI0LT0)
                                        (0076) 	db		b4h, 33h		; Row_0_LogicSelect_1 register (RDI0LT1)
                                        (0077) 	db		b5h, 44h		; Row_0_OutputDrive_0 register (RDI0RO0)
                                        (0078) 	db		b6h, 00h		; Row_0_OutputDrive_1 register (RDI0RO1)
                                        (0079) 	db		b8h, 55h		; Row_1_InputMux register (RDI1RI)
                                        (0080) 	db		b9h, 00h		; Row_1_InputSync register (RDI1SYN)
                                        (0081) 	db		bah, 10h		; Row_1_LogicInputAMux register (RDI1IS)
                                        (0082) 	db		bbh, 33h		; Row_1_LogicSelect_0 register (RDI1LT0)
                                        (0083) 	db		bch, 33h		; Row_1_LogicSelect_1 register (RDI1LT1)
                                        (0084) 	db		bdh, 00h		; Row_1_OutputDrive_0 register (RDI1RO0)
                                        (0085) 	db		beh, 00h		; Row_1_OutputDrive_1 register (RDI1RO1)
                                        (0086) 	db		c0h, aah		; Row_2_InputMux register (RDI2RI)
                                        (0087) 	db		c1h, 00h		; Row_2_InputSync register (RDI2SYN)
                                        (0088) 	db		c2h, 00h		; Row_2_LogicInputAMux register (RDI2IS)
                                        (0089) 	db		c3h, 33h		; Row_2_LogicSelect_0 register (RDI2LT0)
                                        (0090) 	db		c4h, 33h		; Row_2_LogicSelect_1 register (RDI2LT1)
                                        (0091) 	db		c5h, 00h		; Row_2_OutputDrive_0 register (RDI2RO0)
                                        (0092) 	db		c6h, 00h		; Row_2_OutputDrive_1 register (RDI2RO1)
                                        (0093) 	db		ffh
                                        (0094) LoadConfigTBL_fitolamp_slave_Bank1:
                                        (0095) ;  Instance name LCD, User Module LCD
                                        (0096) ;  Instance name PWM16_CH0, User Module PWM16
                                        (0097) ;       Instance name PWM16_CH0, Block Name PWM16_LSB(DBC00)
                                        (0098) 	db		23h, 00h		;PWM16_CH0_(DBC00CR1)
                                        (0099) 	db		20h, 11h		;PWM16_CH0_FUNC_LSB_REG(DBC00FN)
                                        (0100) 	db		21h, 14h		;PWM16_CH0_INPUT_LSB_REG(DBC00IN)
                                        (0101) 	db		22h, 00h		;PWM16_CH0_OUTPUT_LSB_REG(DBC00OU)
                                        (0102) ;       Instance name PWM16_CH0, Block Name PWM16_MSB(DBC01)
                                        (0103) 	db		27h, 00h		;PWM16_CH0_(DBC01CR1)
                                        (0104) 	db		24h, 31h		;PWM16_CH0_FUNC_MSB_REG(DBC01FN)
                                        (0105) 	db		25h, 34h		;PWM16_CH0_INPUT_MSB_REG(DBC01IN)
                                        (0106) 	db		26h, 04h		;PWM16_CH0_OUTPUT_MSB_REG(DBC01OU)
                                        (0107) ;  Instance name PWM16_CH1, User Module PWM16
                                        (0108) ;       Instance name PWM16_CH1, Block Name PWM16_LSB(DCC02)
                                        (0109) 	db		2bh, 00h		;PWM16_CH1_(DCC02CR1)
                                        (0110) 	db		28h, 01h		;PWM16_CH1_FUNC_LSB_REG(DCC02FN)
                                        (0111) 	db		29h, 14h		;PWM16_CH1_INPUT_LSB_REG(DCC02IN)
                                        (0112) 	db		2ah, 00h		;PWM16_CH1_OUTPUT_LSB_REG(DCC02OU)
                                        (0113) ;       Instance name PWM16_CH1, Block Name PWM16_MSB(DCC03)
                                        (0114) 	db		2fh, 00h		;PWM16_CH1_(DCC03CR1)
                                        (0115) 	db		2ch, 21h		;PWM16_CH1_FUNC_MSB_REG(DCC03FN)
                                        (0116) 	db		2dh, 34h		;PWM16_CH1_INPUT_MSB_REG(DCC03IN)
                                        (0117) 	db		2eh, 05h		;PWM16_CH1_OUTPUT_MSB_REG(DCC03OU)
                                        (0118) ;  Instance name RTC, User Module RTC
                                        (0119) ;  Global Register values Bank 1
                                        (0120) 	db		a8h, 00h		; ADCControl0 register (SADC_CR0)
                                        (0121) 	db		a9h, 00h		; ADCControl1 register (SADC_CR1)
                                        (0122) 	db		aah, 00h		; ADCControl2 register (ADC_CR2)
                                        (0123) 	db		abh, 00h		; ADCControl3 register (ADC_CR3TRIM)
                                        (0124) 	db		ach, 00h		; ADCControl4 register (ADC_CR4)
                                        (0125) 	db		61h, 00h		; AnalogClockSelect1 register (CLK_CR1)
                                        (0126) 	db		69h, 00h		; AnalogClockSelect2 register (CLK_CR2)
                                        (0127) 	db		8bh, 00h		; AnalogColumnClockDivide register (ACE_CLK_CR3)
                                        (0128) 	db		60h, 00h		; AnalogColumnClockSelect register (CLK_CR0)
                                        (0129) 	db		8ah, 00h		; AnalogEClockSelect1 register (ACE_CLK_CR1)
                                        (0130) 	db		89h, 00h		; AnalogEColumnClockSelect register (ACE_CLK_CR0)
                                        (0131) 	db		75h, 09h		; AnalogEColumnInputSelect register (ACE_AMX_IN)
                                        (0132) 	db		76h, 00h		; AnalogEComparatorControl0 register (ACE_CMP_CR0)
                                        (0133) 	db		77h, 00h		; AnalogEComparatorControl1 register (ACE_CMP_CR1)
                                        (0134) 	db		7ah, 33h		; AnalogELUTControl0 register (ACE_ALT_CR0)
                                        (0135) 	db		62h, 00h		; AnalogIOControl_0 register (ABF_CR0)
                                        (0136) 	db		67h, 33h		; AnalogLUTControl0 register (ALT_CR0)
                                        (0137) 	db		68h, 33h		; AnalogLUTControl1 register (ALT_CR1)
                                        (0138) 	db		63h, 00h		; AnalogModulatorControl_0 register (AMD_CR0)
                                        (0139) 	db		66h, 00h		; AnalogModulatorControl_1 register (AMD_CR1)
                                        (0140) 	db		6ah, 00h		; AnalogMuxBusConfig1 register (AMUX_CFG1)
                                        (0141) 	db		afh, 00h		; AnalogMuxClock register (AMUX_CLK)
                                        (0142) 	db		7bh, 00h		; AnalogOutBufferControl register (ACE_ABF_CR0)
                                        (0143) 	db		79h, 00h		; ComparatorGlobalInEn register (ACE_CMP_GI_EN)
                                        (0144) 	db		64h, 00h		; ComparatorGlobalOutEn register (CMP_GO_EN)
                                        (0145) 	db		65h, 00h		; ComparatorGlobalOutEn1 register (CMP_GO_EN1)
                                        (0146) 	db		fdh, 00h		; DAC_Control_0 register (IDAC_CR0)
                                        (0147) 	db		dch, 00h		; DAC_Control_1 register (IDAC_CR1)
                                        (0148) 	db		91h, 00h		; DEC_CR0:0 register (DEC0_CR0)
                                        (0149) 	db		95h, 00h		; DEC_CR0:1 register (DEC1_CR0)
                                        (0150) 	db		99h, 00h		; DEC_CR0:2 register (DEC2_CR0)
                                        (0151) 	db		9dh, 00h		; DEC_CR0:3 register (DEC3_CR0)
                                        (0152) 	db		9ah, 00h		; DecimatorControl_5 register (DEC_CR5)
                                        (0153) 	db		92h, 00h		; DecimatorEnable:0 register (DEC_CR3)
                                        (0154) 	db		96h, 00h		; DecimatorEnable:1 register (DEC_CR4)
                                        (0155) 	db		d4h, 00h		; Decimator_Control:0 register (DEC0_CR)
                                        (0156) 	db		d5h, 00h		; Decimator_Control:1 register (DEC1_CR)
                                        (0157) 	db		d6h, 00h		; Decimator_Control:2 register (DEC2_CR)
                                        (0158) 	db		d7h, 00h		; Decimator_Control:3 register (DEC3_CR)
                                        (0159) 	db		d1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input register (GDI_E_IN)
                                        (0160) 	db		a1h, 00h		; GlobalDigitalInterconnect_Drive_Even_Input_Control register (GDI_E_IN_CR)
                                        (0161) 	db		d3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output register (GDI_E_OU)
                                        (0162) 	db		a3h, 00h		; GlobalDigitalInterconnect_Drive_Even_Output_Control register (GDI_E_OU_CR)
                                        (0163) 	db		d0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input register (GDI_O_IN)
                                        (0164) 	db		a0h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Input_Control register (GDI_O_IN_CR)
                                        (0165) 	db		d2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output register (GDI_O_OU)
                                        (0166) 	db		a2h, 00h		; GlobalDigitalInterconnect_Drive_Odd_Output_Control register (GDI_O_OU_CR)
                                        (0167) 	db		adh, 00h		; I2CAddress:0 register (I2C0_ADDR)
                                        (0168) 	db		aeh, 00h		; I2CAddress:1 register (I2C1_ADDR)
                                        (0169) 	db		6bh, 00h		; I2CConfig:1 register (I2C1_CFG)
                                        (0170) 	db		e7h, 00h		; IDACMode register (IDACMODE)
                                        (0171) 	db		e1h, ffh		; OscillatorControl_1 register (OSC_CR1)
                                        (0172) 	db		e2h, 00h		; OscillatorControl_2 register (OSC_CR2)
                                        (0173) 	db		dfh, ffh		; OscillatorControl_3 register (OSC_CR3)
                                        (0174) 	db		deh, 02h		; OscillatorControl_4 register (OSC_CR4)
                                        (0175) 	db		ddh, 00h		; OscillatorGlobalBusEnableControl register (OSC_GO_EN)
                                        (0176) 	db		85h, 00h		; PWM_Control register (ACE_PWM_CR)
                                        (0177) 	db		d8h, 00h		; Port_0_MUXBusCtrl register (MUX_CR0)
                                        (0178) 	db		d9h, 00h		; Port_1_MUXBusCtrl register (MUX_CR1)
                                        (0179) 	db		dah, 00h		; Port_2_MUXBusCtrl register (MUX_CR2)
                                        (0180) 	db		dbh, 00h		; Port_3_MUXBusCtrl register (MUX_CR3)
                                        (0181) 	db		ech, 00h		; Port_4_MUXBusCtrl register (MUX_CR4)
                                        (0182) 	db		edh, 00h		; Port_5_MUXBusCtrl register (MUX_CR5)
                                        (0183) 	db		a7h, 00h		; RTClockControl register (RTCCR)
                                        (0184) 	db		a4h, 00h		; RTCurrentHour register (RTCH)
                                        (0185) 	db		a5h, 00h		; RTCurrentMinute register (RTCM)
                                        (0186) 	db		a6h, 00h		; RTCurrentSecond register (RTCS)
                                        (0187) 	db		82h, 00h		; TSCMPHigh register (SADC_TSCMPH)
                                        (0188) 	db		81h, 00h		; TSCMPLow register (SADC_TSCMPL)
                                        (0189) 	db		71h, 00h		; TSource0 register (SADC_TSCR0)
                                        (0190) 	db		72h, 00h		; TSource1 register (SADC_TSCR1)
                                        (0191) 	db		ffh
                                        (0192) AREA psoc_config(rom, rel)
                                        (0193) LoadConfigTBL_fitolamp_slave_Ordered:
                                        (0194) ;  Ordered Global Register values
                                        (0195) 	M8C_SetBank0
02CB: 62 00 00 MOV   REG[0x0],0x0       (0196) 	mov	reg[00h], 00h		; Port_0_Data register (PRT0DR)
02CE: 71 10    OR    F,0x10             
                                        (0197) 	M8C_SetBank1
02D0: 62 00 00 MOV   REG[0x0],0x0       (0198) 	mov	reg[00h], 00h		; Port_0_DriveMode_0 register (PRT0DM0)
02D3: 62 01 FF MOV   REG[0x1],0xFF      (0199) 	mov	reg[01h], ffh		; Port_0_DriveMode_1 register (PRT0DM1)
02D6: 70 EF    AND   F,0xEF             
                                        (0200) 	M8C_SetBank0
02D8: 62 03 FF MOV   REG[0x3],0xFF      (0201) 	mov	reg[03h], ffh		; Port_0_DriveMode_2 register (PRT0DM2)
02DB: 62 02 00 MOV   REG[0x2],0x0       (0202) 	mov	reg[02h], 00h		; Port_0_GlobalSelect register (PRT0GS)
02DE: 71 10    OR    F,0x10             
                                        (0203) 	M8C_SetBank1
02E0: 62 02 00 MOV   REG[0x2],0x0       (0204) 	mov	reg[02h], 00h		; Port_0_IntCtrl_0 register (PRT0IC0)
02E3: 62 03 00 MOV   REG[0x3],0x0       (0205) 	mov	reg[03h], 00h		; Port_0_IntCtrl_1 register (PRT0IC1)
02E6: 70 EF    AND   F,0xEF             
                                        (0206) 	M8C_SetBank0
02E8: 62 01 00 MOV   REG[0x1],0x0       (0207) 	mov	reg[01h], 00h		; Port_0_IntEn register (PRT0IE)
02EB: 62 04 00 MOV   REG[0x4],0x0       (0208) 	mov	reg[04h], 00h		; Port_1_Data register (PRT1DR)
02EE: 71 10    OR    F,0x10             
                                        (0209) 	M8C_SetBank1
02F0: 62 04 00 MOV   REG[0x4],0x0       (0210) 	mov	reg[04h], 00h		; Port_1_DriveMode_0 register (PRT1DM0)
02F3: 62 05 FF MOV   REG[0x5],0xFF      (0211) 	mov	reg[05h], ffh		; Port_1_DriveMode_1 register (PRT1DM1)
02F6: 70 EF    AND   F,0xEF             
                                        (0212) 	M8C_SetBank0
02F8: 62 07 FF MOV   REG[0x7],0xFF      (0213) 	mov	reg[07h], ffh		; Port_1_DriveMode_2 register (PRT1DM2)
02FB: 62 06 00 MOV   REG[0x6],0x0       (0214) 	mov	reg[06h], 00h		; Port_1_GlobalSelect register (PRT1GS)
02FE: 71 10    OR    F,0x10             
                                        (0215) 	M8C_SetBank1
0300: 62 06 00 MOV   REG[0x6],0x0       (0216) 	mov	reg[06h], 00h		; Port_1_IntCtrl_0 register (PRT1IC0)
0303: 62 07 00 MOV   REG[0x7],0x0       (0217) 	mov	reg[07h], 00h		; Port_1_IntCtrl_1 register (PRT1IC1)
0306: 70 EF    AND   F,0xEF             
                                        (0218) 	M8C_SetBank0
0308: 62 05 00 MOV   REG[0x5],0x0       (0219) 	mov	reg[05h], 00h		; Port_1_IntEn register (PRT1IE)
030B: 62 08 00 MOV   REG[0x8],0x0       (0220) 	mov	reg[08h], 00h		; Port_2_Data register (PRT2DR)
030E: 71 10    OR    F,0x10             
                                        (0221) 	M8C_SetBank1
0310: 62 08 7F MOV   REG[0x8],0x7F      (0222) 	mov	reg[08h], 7fh		; Port_2_DriveMode_0 register (PRT2DM0)
0313: 62 09 80 MOV   REG[0x9],0x80      (0223) 	mov	reg[09h], 80h		; Port_2_DriveMode_1 register (PRT2DM1)
0316: 70 EF    AND   F,0xEF             
                                        (0224) 	M8C_SetBank0
0318: 62 0B 80 MOV   REG[0xB],0x80      (0225) 	mov	reg[0bh], 80h		; Port_2_DriveMode_2 register (PRT2DM2)
031B: 62 0A 00 MOV   REG[0xA],0x0       (0226) 	mov	reg[0ah], 00h		; Port_2_GlobalSelect register (PRT2GS)
031E: 71 10    OR    F,0x10             
                                        (0227) 	M8C_SetBank1
0320: 62 0A 00 MOV   REG[0xA],0x0       (0228) 	mov	reg[0ah], 00h		; Port_2_IntCtrl_0 register (PRT2IC0)
0323: 62 0B 00 MOV   REG[0xB],0x0       (0229) 	mov	reg[0bh], 00h		; Port_2_IntCtrl_1 register (PRT2IC1)
0326: 70 EF    AND   F,0xEF             
                                        (0230) 	M8C_SetBank0
0328: 62 09 00 MOV   REG[0x9],0x0       (0231) 	mov	reg[09h], 00h		; Port_2_IntEn register (PRT2IE)
032B: 62 0C 00 MOV   REG[0xC],0x0       (0232) 	mov	reg[0ch], 00h		; Port_3_Data register (PRT3DR)
032E: 71 10    OR    F,0x10             
                                        (0233) 	M8C_SetBank1
0330: 62 0C 00 MOV   REG[0xC],0x0       (0234) 	mov	reg[0ch], 00h		; Port_3_DriveMode_0 register (PRT3DM0)
0333: 62 0D 00 MOV   REG[0xD],0x0       (0235) 	mov	reg[0dh], 00h		; Port_3_DriveMode_1 register (PRT3DM1)
0336: 70 EF    AND   F,0xEF             
                                        (0236) 	M8C_SetBank0
0338: 62 0F 00 MOV   REG[0xF],0x0       (0237) 	mov	reg[0fh], 00h		; Port_3_DriveMode_2 register (PRT3DM2)
033B: 62 0E 00 MOV   REG[0xE],0x0       (0238) 	mov	reg[0eh], 00h		; Port_3_GlobalSelect register (PRT3GS)
033E: 71 10    OR    F,0x10             
                                        (0239) 	M8C_SetBank1
0340: 62 0E 00 MOV   REG[0xE],0x0       (0240) 	mov	reg[0eh], 00h		; Port_3_IntCtrl_0 register (PRT3IC0)
0343: 62 0F 00 MOV   REG[0xF],0x0       (0241) 	mov	reg[0fh], 00h		; Port_3_IntCtrl_1 register (PRT3IC1)
0346: 70 EF    AND   F,0xEF             
                                        (0242) 	M8C_SetBank0
0348: 62 0D 00 MOV   REG[0xD],0x0       (0243) 	mov	reg[0dh], 00h		; Port_3_IntEn register (PRT3IE)
034B: 62 10 00 MOV   REG[0x10],0x0      (0244) 	mov	reg[10h], 00h		; Port_4_Data register (PRT4DR)
034E: 71 10    OR    F,0x10             
                                        (0245) 	M8C_SetBank1
0350: 62 10 00 MOV   REG[0x10],0x0      (0246) 	mov	reg[10h], 00h		; Port_4_DriveMode_0 register (PRT4DM0)
0353: 62 11 00 MOV   REG[0x11],0x0      (0247) 	mov	reg[11h], 00h		; Port_4_DriveMode_1 register (PRT4DM1)
0356: 70 EF    AND   F,0xEF             
                                        (0248) 	M8C_SetBank0
0358: 62 13 00 MOV   REG[0x13],0x0      (0249) 	mov	reg[13h], 00h		; Port_4_DriveMode_2 register (PRT4DM2)
035B: 62 12 00 MOV   REG[0x12],0x0      (0250) 	mov	reg[12h], 00h		; Port_4_GlobalSelect register (PRT4GS)
035E: 71 10    OR    F,0x10             
                                        (0251) 	M8C_SetBank1
0360: 62 12 00 MOV   REG[0x12],0x0      (0252) 	mov	reg[12h], 00h		; Port_4_IntCtrl_0 register (PRT4IC0)
0363: 62 13 00 MOV   REG[0x13],0x0      (0253) 	mov	reg[13h], 00h		; Port_4_IntCtrl_1 register (PRT4IC1)
0366: 70 EF    AND   F,0xEF             
                                        (0254) 	M8C_SetBank0
0368: 62 11 00 MOV   REG[0x11],0x0      (0255) 	mov	reg[11h], 00h		; Port_4_IntEn register (PRT4IE)
036B: 62 14 00 MOV   REG[0x14],0x0      (0256) 	mov	reg[14h], 00h		; Port_5_Data register (PRT5DR)
036E: 71 10    OR    F,0x10             
                                        (0257) 	M8C_SetBank1
0370: 62 14 00 MOV   REG[0x14],0x0      (0258) 	mov	reg[14h], 00h		; Port_5_DriveMode_0 register (PRT5DM0)
0373: 62 15 00 MOV   REG[0x15],0x0      (0259) 	mov	reg[15h], 00h		; Port_5_DriveMode_1 register (PRT5DM1)
0376: 70 EF    AND   F,0xEF             
                                        (0260) 	M8C_SetBank0
0378: 62 17 00 MOV   REG[0x17],0x0      (0261) 	mov	reg[17h], 00h		; Port_5_DriveMode_2 register (PRT5DM2)
037B: 62 16 00 MOV   REG[0x16],0x0      (0262) 	mov	reg[16h], 00h		; Port_5_GlobalSelect register (PRT5GS)
037E: 71 10    OR    F,0x10             
                                        (0263) 	M8C_SetBank1
0380: 62 16 00 MOV   REG[0x16],0x0      (0264) 	mov	reg[16h], 00h		; Port_5_IntCtrl_0 register (PRT5IC0)
0383: 62 17 00 MOV   REG[0x17],0x0      (0265) 	mov	reg[17h], 00h		; Port_5_IntCtrl_1 register (PRT5IC1)
0386: 70 EF    AND   F,0xEF             
                                        (0266) 	M8C_SetBank0
0388: 62 15 00 MOV   REG[0x15],0x0      (0267) 	mov	reg[15h], 00h		; Port_5_IntEn register (PRT5IE)
038B: 70 EF    AND   F,0xEF             
                                        (0268) 	M8C_SetBank0
038D: 7F       RET                      (0269) 	ret
                                        (0270) 
                                        (0271) 
                                        (0272) ; PSoC Configuration file trailer PsocConfig.asm
FILE: lib\psocconfig.asm                (0001) ;  Generated by PSoC Designer 5.4.3191
                                        (0002) ;
                                        (0003) ;==========================================================================
                                        (0004) ;  PSoCConfig.asm
                                        (0005) ;  @PSOC_VERSION
                                        (0006) ;
                                        (0007) ;  Version: 0.85
                                        (0008) ;  Revised: June 22, 2004
                                        (0009) ;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;
                                        (0011) ;  This file is generated by the Device Editor on Application Generation.
                                        (0012) ;  It contains code which loads the configuration data table generated in
                                        (0013) ;  the file PSoCConfigTBL.asm
                                        (0014) ;
                                        (0015) ;  DO NOT EDIT THIS FILE MANUALLY, AS IT IS OVERWRITTEN!!!
                                        (0016) ;  Edits to this file will not be preserved.
                                        (0017) ;==========================================================================
                                        (0018) ;
                                        (0019) include "m8c.inc"
                                        (0020) include "memory.inc"
                                        (0021) include "GlobalParams.inc"
                                        (0022) 
                                        (0023) export LoadConfigInit
                                        (0024) export _LoadConfigInit
                                        (0025) export LoadConfig_fitolamp_slave
                                        (0026) export _LoadConfig_fitolamp_slave
                                        (0027) export Port_2_Data_SHADE
                                        (0028) export _Port_2_Data_SHADE
                                        (0029) export Port_2_DriveMode_0_SHADE
                                        (0030) export _Port_2_DriveMode_0_SHADE
                                        (0031) export Port_2_DriveMode_1_SHADE
                                        (0032) export _Port_2_DriveMode_1_SHADE
                                        (0033) 
                                        (0034) 
                                        (0035) export NO_SHADOW
                                        (0036) export _NO_SHADOW
                                        (0037) 
                                        (0038) FLAG_CFG_MASK:      equ 10h         ;M8C flag register REG address bit mask
                                        (0039) END_CONFIG_TABLE:   equ ffh         ;end of config table indicator
                                        (0040) 
                                        (0041) AREA psoc_config(rom, rel)
                                        (0042) 
                                        (0043) ;---------------------------------------------------------------------------
                                        (0044) ; LoadConfigInit - Establish the start-up configuration (except for a few
                                        (0045) ;                  parameters handled by boot code, like CPU speed). This
                                        (0046) ;                  function can be called from user code, but typically it
                                        (0047) ;                  is only called from boot.
                                        (0048) ;
                                        (0049) ;       INPUTS: None.
                                        (0050) ;      RETURNS: Nothing.
                                        (0051) ; SIDE EFFECTS: Registers are volatile: the A and X registers can be modified!
                                        (0052) ;               In the large memory model currently only the page
                                        (0053) ;               pointer registers listed below are modified.  This does
                                        (0054) ;               not guarantee that in future implementations of this
                                        (0055) ;               function other page pointer registers will not be
                                        (0056) ;               modified.
                                        (0057) ;          
                                        (0058) ;               Page Pointer Registers Modified: 
                                        (0059) ;               CUR_PP
                                        (0060) ;
                                        (0061) _LoadConfigInit:
                                        (0062)  LoadConfigInit:
                                        (0063)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0064)     
038E: 55 00 00 MOV   [0x0],0x0          (0065) 	mov		[Port_2_Data_SHADE], 0h
0391: 55 01 7F MOV   [0x1],0x7F         (0066) 	mov		[Port_2_DriveMode_0_SHADE], 7fh
0394: 55 02 80 MOV   [0x2],0x80         (0067) 	mov		[Port_2_DriveMode_1_SHADE], 80h
                                        (0068) 
0397: 7C 03 9E LCALL 0x039E             (0069) 	lcall	LoadConfig_fitolamp_slave
039A: 7C 02 C9 LCALL 0x02C9             (0070) 	lcall	LoadConfigTBL_fitolamp_slave_Ordered
                                        (0071) 
                                        (0072) 
                                        (0073)     RAM_EPILOGUE RAM_USE_CLASS_4
039D: 7F       RET                      (0074)     ret
                                        (0075) 
                                        (0076) ;---------------------------------------------------------------------------
                                        (0077) ; Load Configuration fitolamp_slave
                                        (0078) ;
                                        (0079) ;    Load configuration registers for fitolamp_slave.
                                        (0080) ;    IO Bank 0 registers a loaded first,then those in IO Bank 1.
                                        (0081) ;
                                        (0082) ;       INPUTS: None.
                                        (0083) ;      RETURNS: Nothing.
                                        (0084) ; SIDE EFFECTS: Registers are volatile: the CPU A and X registers may be
                                        (0085) ;               modified as may the Page Pointer registers!
                                        (0086) ;               In the large memory model currently only the page
                                        (0087) ;               pointer registers listed below are modified.  This does
                                        (0088) ;               not guarantee that in future implementations of this
                                        (0089) ;               function other page pointer registers will not be
                                        (0090) ;               modified.
                                        (0091) ;          
                                        (0092) ;               Page Pointer Registers Modified: 
                                        (0093) ;               CUR_PP
                                        (0094) ;
                                        (0095) _LoadConfig_fitolamp_slave:
                                        (0096)  LoadConfig_fitolamp_slave:
                                        (0097)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0098) 
039E: 10       PUSH  X                  (0099) 	push	x
039F: 70 EF    AND   F,0xEF             
                                        (0100)     M8C_SetBank0                    ; Force bank 0
03A1: 50 00    MOV   A,0x0              (0101)     mov     a, 0                    ; Specify bank 0
03A3: 67       ASR   A                  (0102)     asr     a                       ; Store in carry flag
                                        (0103)                                     ; Load bank 0 table:
03A4: 50 01    MOV   A,0x1              (0104)     mov     A, >LoadConfigTBL_fitolamp_slave_Bank0
03A6: 57 9D    MOV   X,0x9D             (0105)     mov     X, <LoadConfigTBL_fitolamp_slave_Bank0
03A8: 7C 03 B9 LCALL 0x03B9             (0106)     lcall   LoadConfig              ; Load the bank 0 values
                                        (0107) 
03AB: 50 01    MOV   A,0x1              (0108)     mov     a, 1                    ; Specify bank 1
03AD: 67       ASR   A                  (0109)     asr     a                       ; Store in carry flag
                                        (0110)                                     ; Load bank 1 table:
03AE: 50 02    MOV   A,0x2              (0111)     mov     A, >LoadConfigTBL_fitolamp_slave_Bank1
03B0: 57 18    MOV   X,0x18             (0112)     mov     X, <LoadConfigTBL_fitolamp_slave_Bank1
03B2: 7C 03 B9 LCALL 0x03B9             (0113)     lcall   LoadConfig              ; Load the bank 1 values
03B5: 70 EF    AND   F,0xEF             
                                        (0114) 
                                        (0115)     M8C_SetBank0                    ; Force return to bank 0
03B7: 20       POP   X                  (0116) 	pop		x
                                        (0117) 
                                        (0118)     RAM_EPILOGUE RAM_USE_CLASS_4
03B8: 7F       RET                      (0119)     ret
                                        (0120) 
                                        (0121) 
                                        (0122) 
                                        (0123) 
                                        (0124) ;---------------------------------------------------------------------------
                                        (0125) ; LoadConfig - Set IO registers as specified in ROM table of (address,value)
                                        (0126) ;              pairs. Terminate on address=0xFF.
                                        (0127) ;
                                        (0128) ;  INPUTS:  [A,X] points to the table to be loaded
                                        (0129) ;           Flag Register Carry bit encodes the Register Bank
                                        (0130) ;           (Carry=0 => Bank 0; Carry=1 => Bank 1)
                                        (0131) ;
                                        (0132) ;  RETURNS: nothing.
                                        (0133) ;
                                        (0134) ;  STACK FRAME:  X-4 I/O Bank 0/1 indicator
                                        (0135) ;                X-3 Temporary store for register address
                                        (0136) ;                X-2 LSB of config table address
                                        (0137) ;                X-1 MSB of config table address
                                        (0138) ;
                                        (0139) LoadConfig:
                                        (0140)     RAM_PROLOGUE RAM_USE_CLASS_2
03B9: 38 02    ADD   SP,0x2             (0141)     add     SP, 2                   ; Set up local vars
03BB: 10       PUSH  X                  (0142)     push    X                       ; Save config table address on stack
03BC: 08       PUSH  A                  (0143)     push    A
03BD: 4F       MOV   X,SP               (0144)     mov     X, SP
03BE: 56 FC 00 MOV   [X-4],0x0          (0145)     mov     [X-4], 0                ; Set default Destination to Bank 0
03C1: D0 04    JNC   0x03C6             (0146)     jnc     .BankSelectSaved        ; Carry says Bank 0 is OK
03C3: 56 FC 01 MOV   [X-4],0x1          (0147)     mov     [X-4], 1                ; No Carry: default to Bank 1
                                        (0148) .BankSelectSaved:
03C6: 18       POP   A                  (0149)     pop     A
03C7: 20       POP   X                  (0150)     pop     X
03C8: 70 EF    AND   F,0xEF             
03CA: 62 E3 00 MOV   REG[0xE3],0x0      
                                        (0151) 
                                        (0152) LoadConfigLp:
                                        (0153)     M8C_SetBank0                    ; Switch to bank 0
                                        (0154)     M8C_ClearWDT                    ; Clear the watchdog for long inits
03CD: 10       PUSH  X                  (0155)     push    X                       ; Preserve the config table address
03CE: 08       PUSH  A                  (0156)     push    A
03CF: 28       ROMX                     (0157)     romx                            ; Load register address from table
03D0: 39 FF    CMP   A,0xFF             (0158)     cmp     A, END_CONFIG_TABLE     ; End of table?
03D2: A0 1F    JZ    0x03F2             (0159)     jz      EndLoadConfig           ;   Yes, go wrap it up
03D4: 4F       MOV   X,SP               (0160)     mov     X, SP                   ;
03D5: 48 FC 01 TST   [X-4],0x1          (0161)     tst     [X-4], 1                ; Loading IO Bank 1?
03D8: A0 03    JZ    0x03DC             (0162)     jz      .IOBankNowSet           ;    No, Bank 0 is fine
03DA: 71 10    OR    F,0x10             
                                        (0163)     M8C_SetBank1                    ;   Yes, switch to Bank 1
                                        (0164) .IOBankNowSet:
03DC: 54 FD    MOV   [X-3],A            (0165)     mov     [X-3], A                ; Stash the register address
03DE: 18       POP   A                  (0166)     pop     A                       ; Retrieve the table address
03DF: 20       POP   X                  (0167)     pop     X
03E0: 75       INC   X                  (0168)     inc     X                       ; Advance to the data byte
03E1: 09 00    ADC   A,0x0              (0169)     adc     A, 0
03E3: 10       PUSH  X                  (0170)     push    X                       ; Save the config table address again
03E4: 08       PUSH  A                  (0171)     push    A
03E5: 28       ROMX                     (0172)     romx                            ; load config data from the table
03E6: 4F       MOV   X,SP               (0173)     mov     X, SP                   ; retrieve the register address
03E7: 59 FD    MOV   X,[X-3]            (0174)     mov     X, [X-3]
03E9: 61 00    MOV   REG[X+0x0],A       (0175)     mov     reg[X], A               ; Configure the register
03EB: 18       POP   A                  (0176)     pop     A                       ; retrieve the table address
03EC: 20       POP   X                  (0177)     pop     X
03ED: 75       INC   X                  (0178)     inc     X                       ; advance to next table entry
03EE: 09 00    ADC   A,0x0              (0179)     adc     A, 0
03F0: 8F D7    JMP   0x03C8             (0180)     jmp     LoadConfigLp            ; loop to configure another register
                                        (0181) EndLoadConfig:
03F2: 38 FC    ADD   SP,0xFC            (0182)     add     SP, -4
03F4: 70 3F    AND   F,0x3F             
03F6: 71 C0    OR    F,0xC0             
                                        (0183)     RAM_EPILOGUE RAM_USE_CLASS_2
03F8: 7F       RET                      (0184)     ret
                                        (0185) 
                                        (0186) AREA InterruptRAM(ram, rel)
                                        (0187) 
                                        (0188) NO_SHADOW:
                                        (0189) _NO_SHADOW:
                                        (0190) ; write only register shadows
                                        (0191) _Port_2_Data_SHADE:
                                        (0192) Port_2_Data_SHADE:	BLK	1
                                        (0193) _Port_2_DriveMode_0_SHADE:
                                        (0194) Port_2_DriveMode_0_SHADE:	BLK	1
                                        (0195) _Port_2_DriveMode_1_SHADE:
                                        (0196) Port_2_DriveMode_1_SHADE:	BLK	1
                                        (0197) 
FILE: lib\rtcint.asm                    (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: RTCINT.asm
                                        (0004) ;;   Version: 1.10, Updated on 2015/3/4 at 22:19:15
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: RTC Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "memory.inc"
                                        (0015) include "RTC.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _RTC_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _RTC_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _RTC_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
03F9: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file RTCINT.asm
FILE: lib\rtc.asm                       (0001) ;;*****************************************************************************
03FA: 71 10    OR    F,0x10             (0002) ;;*****************************************************************************
03FC: 43 A7 20 OR    REG[0xA7],0x20     
03FF: 70 EF    AND   F,0xEF             
0401: 43 DE 08 OR    REG[0xDE],0x8      
                                        (0003) ;;  FILENAME: RTC.asm
                                        (0004) ;;   Version: 1.10, Updated on 2015/3/4 at 22:19:15
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: RTC User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "memory.inc"
                                        (0024) include "RTC.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  RTC_EnableInt
                                        (0030) export _RTC_EnableInt
                                        (0031) export  RTC_DisableInt
                                        (0032) export _RTC_DisableInt
                                        (0033) export  RTC_ClearInt
                                        (0034) export _RTC_ClearInt
                                        (0035) export  RTC_Start
                                        (0036) export _RTC_Start
                                        (0037) export  RTC_Stop
                                        (0038) export _RTC_Stop
                                        (0039) export  RTC_SetIntPeriod
                                        (0040) export _RTC_SetIntPeriod
                                        (0041) export  RTC_bReadSecond
                                        (0042) export _RTC_bReadSecond
                                        (0043) export  RTC_bReadMinute
                                        (0044) export _RTC_bReadMinute
                                        (0045) export  RTC_bReadHour
                                        (0046) export _RTC_bReadHour
                                        (0047) export  RTC_SetSecond
                                        (0048) export _RTC_SetSecond
                                        (0049) export  RTC_SetMinute
                                        (0050) export _RTC_SetMinute
                                        (0051) export  RTC_SetHour
                                        (0052) export _RTC_SetHour
                                        (0053) 
                                        (0054) 
                                        (0055) ;-----------------------------------------------
                                        (0056) ;  EQUATES
                                        (0057) ;-----------------------------------------------
                                        (0058) 
                                        (0059) ;  Time validation constants
                                        (0060) SEC_MAX_IN_BSD:           equ 60h
                                        (0061) MIN_MAX_IN_BSD:           equ 60h
                                        (0062) HOUR_MAX_IN_BSD:          equ 24h
                                        (0063) 
                                        (0064) ;  Valid parameter range flag constants
                                        (0065) VALID_RANGE_INPUT:        equ 01h
                                        (0066) INVALID_RANGE_INPUT:      equ 00h
                                        (0067) 
                                        (0068) LOW_TETRAD_MASK:          equ 0Fh
                                        (0069) MIN_INVALID_BSD_VALUE:    equ 0Ah
                                        (0070) 
                                        (0071) AREA InterruptRAM (RAM,REL,CON)
                                        (0072) 
                                        (0073) ;-----------------------------------------------
                                        (0074) ;  Constant Definitions
                                        (0075) ;-----------------------------------------------
                                        (0076) 
                                        (0077) 
                                        (0078) ;-----------------------------------------------
                                        (0079) ; Variable Allocation
                                        (0080) ;-----------------------------------------------
                                        (0081) 
                                        (0082) AREA UserModules (ROM, REL)
                                        (0083) 
                                        (0084) .SECTION
                                        (0085) ;-----------------------------------------------------------------------------
                                        (0086) ;  FUNCTION NAME: RTC_EnableInt
                                        (0087) ;
                                        (0088) ;  DESCRIPTION:
                                        (0089) ;     Enables this RTC's interrupt by setting the interrupt enable mask bit
                                        (0090) ;     associated with this User Module. This function has no effect until and
                                        (0091) ;     unless the global interrupts are enabled (for example by using the
                                        (0092) ;     macro M8C_EnableGInt).
                                        (0093) ;-----------------------------------------------------------------------------
                                        (0094) ;
                                        (0095) ;  ARGUMENTS:    None.
                                        (0096) ;  RETURNS:      None.
                                        (0097) ;  SIDE EFFECTS: 
                                        (0098) ;    The A and X registers may be modified by this or future implementations
                                        (0099) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0100) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0101) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0102) ;    functions.
                                        (0103) ;
                                        (0104)  RTC_EnableInt:
                                        (0105) _RTC_EnableInt:
                                        (0106)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0107)    RTC_EnableInt_M
                                        (0108)    RAM_EPILOGUE RAM_USE_CLASS_1
0404: 7F       RET                      (0109)    ret
0405: 71 10    OR    F,0x10             
0407: 41 A7 DF AND   REG[0xA7],0xDF     
040A: 70 EF    AND   F,0xEF             
040C: 41 DE F7 AND   REG[0xDE],0xF7     
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) 
                                        (0114) .SECTION
                                        (0115) ;-----------------------------------------------------------------------------
                                        (0116) ;  FUNCTION NAME: RTC_DisableInt
                                        (0117) ;
                                        (0118) ;  DESCRIPTION:
                                        (0119) ;     Disables this RTC's interrupt by clearing the interrupt enable
                                        (0120) ;     mask bit associated with this User Module.
                                        (0121) ;-----------------------------------------------------------------------------
                                        (0122) ;
                                        (0123) ;  ARGUMENTS:    None
                                        (0124) ;  RETURNS:      None
                                        (0125) ;  SIDE EFFECTS: 
                                        (0126) ;    The A and X registers may be modified by this or future implementations
                                        (0127) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0128) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0129) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0130) ;    functions.
                                        (0131) ;
                                        (0132)  RTC_DisableInt:
                                        (0133) _RTC_DisableInt:
                                        (0134)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0135)    RTC_DisableInt_M
                                        (0136)    RAM_EPILOGUE RAM_USE_CLASS_1
040F: 7F       RET                      (0137)    ret
0410: 62 DD F7 MOV   REG[0xDD],0xF7     
                                        (0138) 
                                        (0139) .ENDSECTION
                                        (0140) 
                                        (0141) .SECTION
                                        (0142) ;-----------------------------------------------------------------------------
                                        (0143) ;  FUNCTION NAME: RTC_ClearInt
                                        (0144) ;
                                        (0145) ;  DESCRIPTION:
                                        (0146) ;
                                        (0147) ;     NOTE:  Remember to enable the global interrupt by calling the
                                        (0148) ;           M8C global macro: M8C_EnableGInt
                                        (0149) ;
                                        (0150) ;-----------------------------------------------------------------------------
                                        (0151) ;
                                        (0152) ;  ARGUMENTS:  none
                                        (0153) ;
                                        (0154) ;  RETURNS:  none
                                        (0155) ;
                                        (0156) ;  SIDE EFFECTS:
                                        (0157) ;    The A and X registers may be modified by this or future implementations
                                        (0158) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0159) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0160) ;    responsibility to perserve their values across calls to fastcall16
                                        (0161) ;    functions.
                                        (0162) ;
                                        (0163) ;  THEORY of OPERATION or PROCEDURE:
                                        (0164) ;     Sets the specific user module interrupt enable mask bit.
                                        (0165) ;
                                        (0166)  RTC_ClearInt:
                                        (0167) _RTC_ClearInt:
                                        (0168)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0169)    M8C_ClearIntFlag RTC_CLR_INT_REG, RTC_INT_RTC_MASK
                                        (0170)    RAM_EPILOGUE RAM_USE_CLASS_1
0413: 7F       RET                      (0171)    ret
0414: 71 10    OR    F,0x10             
0416: 43 A7 01 OR    REG[0xA7],0x1      
0419: 70 EF    AND   F,0xEF             
                                        (0172) .ENDSECTION
                                        (0173) 
                                        (0174) .SECTION
                                        (0175) ;-----------------------------------------------------------------------------
                                        (0176) ;  FUNCTION NAME: RTC_Start
                                        (0177) ;
                                        (0178) ;  DESCRIPTION:
                                        (0179) ;     Enable the RTC UM to start the real timer clock. 
                                        (0180) ;     Set the start bit in RTC control register
                                        (0181) ;-----------------------------------------------------------------------------
                                        (0182) ;
                                        (0183) ;  ARGUMENTS:    None
                                        (0184) ;  RETURNS:      None
                                        (0185) ;  SIDE EFFECTS: 
                                        (0186) ;    The A and X registers may be modified by this or future implementations
                                        (0187) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0188) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0189) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0190) ;    functions.
                                        (0191) ;
                                        (0192)  RTC_Start:
                                        (0193) _RTC_Start:
                                        (0194)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0195)    M8C_SetBank1
                                        (0196)    RTC_Start_M
                                        (0197)    M8C_SetBank0
                                        (0198)    RAM_EPILOGUE RAM_USE_CLASS_1
041B: 7F       RET                      (0199)    ret
041C: 71 10    OR    F,0x10             
041E: 41 A7 FE AND   REG[0xA7],0xFE     
0421: 70 EF    AND   F,0xEF             
                                        (0200) 
                                        (0201) .ENDSECTION
                                        (0202) 
                                        (0203) 
                                        (0204) .SECTION
                                        (0205) ;-----------------------------------------------------------------------------
                                        (0206) ;  FUNCTION NAME: RTC_Stop
                                        (0207) ;
                                        (0208) ;  DESCRIPTION:
                                        (0209) ;     Disable the RTC UM to stop the real timer clock 
                                        (0210) ;      by clearing the start bit in the Control
                                        (0211) ;     register.
                                        (0212) ;-----------------------------------------------------------------------------
                                        (0213) ;
                                        (0214) ;  ARGUMENTS:    None
                                        (0215) ;  RETURNS:      None
                                        (0216) ;  SIDE EFFECTS: 
                                        (0217) ;    The A and X registers may be modified by this or future implementations
                                        (0218) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0219) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0220) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0221) ;    functions.
                                        (0222) ;
                                        (0223)  RTC_Stop:
                                        (0224) _RTC_Stop:
                                        (0225)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0226)    M8C_SetBank1
                                        (0227)    RTC_Stop_M
                                        (0228)    M8C_SetBank0
                                        (0229)    RAM_EPILOGUE RAM_USE_CLASS_1
0423: 7F       RET                      (0230)    ret
                                        (0231) 
                                        (0232) .ENDSECTION
                                        (0233) 
                                        (0234) 
                                        (0235) .SECTION
                                        (0236) ;-----------------------------------------------------------------------------
                                        (0237) ;  FUNCTION NAME: RTC_SetIntPeriod
                                        (0238) ;
                                        (0239) ;  DESCRIPTION:
                                        (0240) ;    Configure the interrupt period of RTC module. 
                                        (0241) ;    The period can be 1 second, 1 minute, 1 hour or 1 day.
                                        (0242) ;-----------------------------------------------------------------------------
                                        (0243) ;
                                        (0244) ;  ARGUMENTS: fastcall16 void SetIntPeriod (passed in A)
                                        (0245) ;  RETURNS:   None
                                        (0246) ;  SIDE EFFECTS: 
                                        (0247) ;    The A and X registers may be modified by this or future implementations
                                        (0248) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0249) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0250) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0251) ;    functions.
                                        (0252) ;
                                        (0253)  RTC_SetIntPeriod:
                                        (0254) _RTC_SetIntPeriod:
                                        (0255)    RAM_PROLOGUE RAM_USE_CLASS_2
0424: 21 0C    AND   A,0xC              (0256)    and   A, RTC_INT_SEL_MASK   
0426: 4F       MOV   X,SP               (0257)    mov   X, SP
0427: 08       PUSH  A                  (0258)    push  A                                  ; store value in stack
0428: 71 10    OR    F,0x10             
                                        (0259)    M8C_SetBank1
042A: 5D A7    MOV   A,REG[0xA7]        (0260)    mov   A, reg[RTC_RTCCR_REG]  ; get register value
042C: 21 F3    AND   A,0xF3             (0261)    and   A, ~RTC_INT_SEL_MASK   ; clear INT_SEL bits
042E: 2B 00    OR    A,[X+0]            (0262)    or    A, [X]                              ; set INT_SEL bits
0430: 60 A7    MOV   REG[0xA7],A        (0263)    mov   reg[RTC_RTCCR_REG], A  ; set new register value
0432: 70 EF    AND   F,0xEF             
                                        (0264)    M8C_SetBank0
0434: 18       POP   A                  (0265)    pop   A
0435: 70 3F    AND   F,0x3F             
0437: 71 C0    OR    F,0xC0             
                                        (0266)    RAM_EPILOGUE RAM_USE_CLASS_2
0439: 7F       RET                      (0267)    ret
043A: 71 10    OR    F,0x10             
                                        (0268) 
                                        (0269) .ENDSECTION
                                        (0270) 
                                        (0271) 
                                        (0272) .SECTION
                                        (0273) ;-----------------------------------------------------------------------------
                                        (0274) ;  FUNCTION NAME: RTC_bReadSecond
                                        (0275) ;
                                        (0276) ;  DESCRIPTION:
                                        (0277) ;     This function will access the data in seconds register at address 1A6h.
                                        (0278) ;
                                        (0279) ;-----------------------------------------------------------------------------
                                        (0280) ;
                                        (0281) ;  ARGUMENTS:   None
                                        (0282) ;  RETURNS:     fastcall16 BYTE bReadSecond (void)
                                        (0283) ;  SIDE EFFECTS: 
                                        (0284) ;    The A and X registers may be modified by this or future implementations
                                        (0285) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0286) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0287) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0288) ;    functions.
                                        (0289) ;
                                        (0290)  RTC_bReadSecond:
                                        (0291) _RTC_bReadSecond:
                                        (0292)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0293)    M8C_SetBank1
043C: 5D A6    MOV   A,REG[0xA6]        (0294)    mov   A, reg[RTC_RTCS_REG] ; Read second value in BCD format
043E: 70 EF    AND   F,0xEF             
                                        (0295)    M8C_SetBank0
                                        (0296)    RAM_EPILOGUE RAM_USE_CLASS_1
0440: 7F       RET                      (0297)    ret
0441: 71 10    OR    F,0x10             
                                        (0298) 
                                        (0299) .ENDSECTION
                                        (0300) 
                                        (0301) .SECTION
                                        (0302) ;-----------------------------------------------------------------------------
                                        (0303) ;  FUNCTION NAME: RTC_bReadMinute
                                        (0304) ;
                                        (0305) ;  DESCRIPTION:
                                        (0306) ;     This function will access the data in minutes register at address 1A5h.
                                        (0307) ;
                                        (0308) ;-----------------------------------------------------------------------------
                                        (0309) ;
                                        (0310) ;  ARGUMENTS:   None
                                        (0311) ;  RETURNS:     fastcall16 BYTE bReadMinute (void)
                                        (0312) ;  SIDE EFFECTS: 
                                        (0313) ;    The A and X registers may be modified by this or future implementations
                                        (0314) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0315) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0316) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0317) ;    functions.
                                        (0318) ;
                                        (0319)  RTC_bReadMinute:
                                        (0320) _RTC_bReadMinute:
                                        (0321)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0322)    M8C_SetBank1
0443: 5D A5    MOV   A,REG[0xA5]        (0323)    mov   A, reg[RTC_RTCM_REG]   ; Read minute value in BCD format
0445: 70 EF    AND   F,0xEF             
                                        (0324)    M8C_SetBank0
                                        (0325)    RAM_EPILOGUE RAM_USE_CLASS_1
0447: 7F       RET                      (0326)    ret
0448: 71 10    OR    F,0x10             
                                        (0327) 
                                        (0328) .ENDSECTION
                                        (0329) 
                                        (0330) .SECTION
                                        (0331) ;-----------------------------------------------------------------------------
                                        (0332) ;  FUNCTION NAME: RTC_bReadHour
                                        (0333) ;
                                        (0334) ;  DESCRIPTION:
                                        (0335) ;     This function will access the data in hours register at address 1A4h.
                                        (0336) ;
                                        (0337) ;-----------------------------------------------------------------------------
                                        (0338) ;
                                        (0339) ;  ARGUMENTS:   None
                                        (0340) ;  RETURNS:     fastcall16 BYTE bReadHour(void)
                                        (0341) ;  SIDE EFFECTS: 
                                        (0342) ;    The A and X registers may be modified by this or future implementations
                                        (0343) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0344) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0345) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0346) ;    functions.
                                        (0347) ;
                                        (0348)  RTC_bReadHour:
                                        (0349) _RTC_bReadHour:
                                        (0350)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0351)    M8C_SetBank1
044A: 5D A4    MOV   A,REG[0xA4]        (0352)    mov  A,reg[RTC_RTCH_REG]  ; Read hour value in BCD format
044C: 70 EF    AND   F,0xEF             
                                        (0353)    M8C_SetBank0
                                        (0354)    RAM_EPILOGUE RAM_USE_CLASS_1
044E: 7F       RET                      (0355)    ret
                                        (0356) 
                                        (0357) .ENDSECTION
                                        (0358) 
                                        (0359) .SECTION
                                        (0360) ;-----------------------------------------------------------------------------
                                        (0361) ;  FUNCTION NAME: RTC_SetSecond
                                        (0362) ;
                                        (0363) ;  DESCRIPTION:
                                        (0364) ;    This function will set the second valuein seconds register at address 1A6h.
                                        (0365) ;    The legal range for writing the second value is 0 to 59. This data must be in BCD format.
                                        (0366) ;
                                        (0367) ;-----------------------------------------------------------------------------
                                        (0368) ;
                                        (0369) ;  ARGUMENTS:    fastcall16 void SetSecond(passed in A)
                                        (0370) ;  RETURNS:    None
                                        (0371) ;  SIDE EFFECTS: 
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;
                                        (0378)  RTC_SetSecond:
                                        (0379) _RTC_SetSecond:
                                        (0380)    RAM_PROLOGUE RAM_USE_CLASS_1
044F: 39 60    CMP   A,0x60             (0381)    cmp   A, SEC_MAX_IN_BSD                   ; the sec value (in BCD) validation
0451: D0 12    JNC   0x0464             (0382)    jnc   .SetSec_skip                        ; skip sec Reg Update if BCD sec is invalid (>0x59)
0453: 08       PUSH  A                  (0383)    push  A
0454: 21 0F    AND   A,0xF              (0384)    and   A, LOW_TETRAD_MASK
0456: 39 0A    CMP   A,0xA              (0385)    cmp   A, MIN_INVALID_BSD_VALUE
0458: 18       POP   A                  (0386)    pop   A
0459: D0 0A    JNC   0x0464             (0387)    jnc   .SetSec_skip                        ; skip sec Reg Update if sec is not BCD 
045B: 71 10    OR    F,0x10             
                                        (0388)    M8C_SetBank1
045D: 60 A6    MOV   REG[0xA6],A        (0389)    mov   reg[RTC_RTCS_REG], A   ; Set new second value (in BCD)
045F: 70 EF    AND   F,0xEF             
                                        (0390)    M8C_SetBank0
0461: 50 01    MOV   A,0x1              (0391)    mov   A, VALID_RANGE_INPUT                ; Set Flag to Valid
                                        (0392)    RAM_EPILOGUE RAM_USE_CLASS_1   
0463: 7F       RET                      (0393)    ret
                                        (0394) .SetSec_skip:
0464: 50 00    MOV   A,0x0              (0395)    mov   A, INVALID_RANGE_INPUT              ; Set Flag to Invalid
                                        (0396)    RAM_EPILOGUE RAM_USE_CLASS_1
0466: 7F       RET                      (0397)    ret
                                        (0398) .ENDSECTION
                                        (0399) 
                                        (0400) .SECTION
                                        (0401) ;-----------------------------------------------------------------------------
                                        (0402) ;  FUNCTION NAME: RTC_SetMinute
                                        (0403) ;
                                        (0404) ;  DESCRIPTION:
                                        (0405) ;    This function will set the minute value in minute register at address 1A5h.
                                        (0406) ;    The legal range for writing the minute value is 0 to 59. This data must be in BCD format.
                                        (0407) ;
                                        (0408) ;-----------------------------------------------------------------------------
                                        (0409) ;
                                        (0410) ;  ARGUMENTS:    fastcall16 void SetMinute(passed in A)
                                        (0411) ;  RETURNS:    None
                                        (0412) ;  SIDE EFFECTS: 
                                        (0413) ;    The A and X registers may be modified by this or future implementations
                                        (0414) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0415) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0416) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0417) ;    functions.
                                        (0418) ;
                                        (0419)  RTC_SetMinute:
                                        (0420) _RTC_SetMinute:
                                        (0421)    RAM_PROLOGUE RAM_USE_CLASS_1
0467: 39 60    CMP   A,0x60             (0422)    cmp   A, MIN_MAX_IN_BSD                   ; the minute value (in BCD) validation
0469: D0 12    JNC   0x047C             (0423)    jnc   .SetMin_skip                        ; skip minute Reg Update if BCD minute is invalid (>0x59)
046B: 08       PUSH  A                  (0424)    push  A
046C: 21 0F    AND   A,0xF              (0425)    and   A, LOW_TETRAD_MASK
046E: 39 0A    CMP   A,0xA              (0426)    cmp   A, MIN_INVALID_BSD_VALUE
0470: 18       POP   A                  (0427)    pop   A
0471: D0 0A    JNC   0x047C             (0428)    jnc   .SetMin_skip                        ; skip sec Reg Update if minute is not BCD 
0473: 71 10    OR    F,0x10             
                                        (0429)    M8C_SetBank1
0475: 60 A5    MOV   REG[0xA5],A        (0430)    mov   reg[RTC_RTCM_REG], A   ; Set new minute value (in BCD)
0477: 70 EF    AND   F,0xEF             
                                        (0431)    M8C_SetBank0
0479: 50 01    MOV   A,0x1              (0432)    mov   A, VALID_RANGE_INPUT                ; Set Flag to Valid
                                        (0433)    RAM_EPILOGUE RAM_USE_CLASS_1   
047B: 7F       RET                      (0434)    ret
                                        (0435) .SetMin_skip:
047C: 50 00    MOV   A,0x0              (0436)    mov   A, INVALID_RANGE_INPUT              ; Set Flag to Invalid
                                        (0437)    RAM_EPILOGUE RAM_USE_CLASS_1
047E: 7F       RET                      (0438)    ret
                                        (0439) 
                                        (0440) .ENDSECTION
                                        (0441) 
                                        (0442) .SECTION
                                        (0443) ;-----------------------------------------------------------------------------
                                        (0444) ;  FUNCTION NAME: RTC_SetHour
                                        (0445) ;
                                        (0446) ;  DESCRIPTION:
                                        (0447) ;    This function will set the hour value in hour register at address 1A4h.
                                        (0448) ;    The legal range for writing the hour value is 0 to 23. This data must be in BCD format.
                                        (0449) ;
                                        (0450) ;-----------------------------------------------------------------------------
                                        (0451) ;
                                        (0452) ;  ARGUMENTS:    fastcall16 void SetHour(passed in A)
                                        (0453) ;  RETURNS:    None
                                        (0454) ;  SIDE EFFECTS: 
                                        (0455) ;    The A and X registers may be modified by this or future implementations
                                        (0456) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0457) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0458) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0459) ;    functions.
                                        (0460) ;
                                        (0461)  RTC_SetHour:
                                        (0462) _RTC_SetHour:
                                        (0463)    RAM_PROLOGUE RAM_USE_CLASS_1
047F: 39 24    CMP   A,0x24             (0464)    cmp   A, HOUR_MAX_IN_BSD                  ; the hour value (in BCD) validation
0481: D0 12    JNC   0x0494             (0465)    jnc   .SetHour_skip                       ; skip hour Reg Update if BCD hour is invalid (>0x59)
0483: 08       PUSH  A                  (0466)    push  A
0484: 21 0F    AND   A,0xF              (0467)    and   A, LOW_TETRAD_MASK
0486: 39 0A    CMP   A,0xA              (0468)    cmp   A, MIN_INVALID_BSD_VALUE
0488: 18       POP   A                  (0469)    pop   A
0489: D0 0A    JNC   0x0494             (0470)    jnc   .SetHour_skip                        ; skip sec Reg Update if hour is not BCD 
048B: 71 10    OR    F,0x10             
                                        (0471)    M8C_SetBank1
048D: 60 A4    MOV   REG[0xA4],A        (0472)    mov   reg[RTC_RTCH_REG], A   ; Set new hour value (in BCD)
048F: 70 EF    AND   F,0xEF             
                                        (0473)    M8C_SetBank0
0491: 50 01    MOV   A,0x1              (0474)    mov   A, VALID_RANGE_INPUT                ; Set Flag to Valid
                                        (0475)    RAM_EPILOGUE RAM_USE_CLASS_1   
0493: 7F       RET                      (0476)    ret
                                        (0477) .SetHour_skip:
0494: 50 00    MOV   A,0x0              (0478)    mov   A, INVALID_RANGE_INPUT              ; Set Flag to Invalid
                                        (0479)    RAM_EPILOGUE RAM_USE_CLASS_1
0496: 7F       RET                      (0480)    ret
                                        (0481) 
                                        (0482) .ENDSECTION
                                        (0483) ; End of File RTC.asm
FILE: lib\pwm16_ch1int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_CH1INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM16_CH1.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM16_CH1_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM16_CH1_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM16_CH1_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
0497: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM16_CH1INT.asm
FILE: lib\pwm16_ch1.asm                 (0001) ;;*****************************************************************************
0498: 43 E1 08 OR    REG[0xE1],0x8      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_CH1.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM16_CH1.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM16_CH1_EnableInt
                                        (0030) export _PWM16_CH1_EnableInt
                                        (0031) export  PWM16_CH1_DisableInt
                                        (0032) export _PWM16_CH1_DisableInt
                                        (0033) export  PWM16_CH1_Start
                                        (0034) export _PWM16_CH1_Start
                                        (0035) export  PWM16_CH1_Stop
                                        (0036) export _PWM16_CH1_Stop
                                        (0037) export  PWM16_CH1_WritePeriod
                                        (0038) export _PWM16_CH1_WritePeriod
                                        (0039) export  PWM16_CH1_WritePulseWidth
                                        (0040) export _PWM16_CH1_WritePulseWidth
                                        (0041) export  PWM16_CH1_wReadPulseWidth
                                        (0042) export _PWM16_CH1_wReadPulseWidth
                                        (0043) export  PWM16_CH1_wReadCounter
                                        (0044) export _PWM16_CH1_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM16_CH1_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM16_CH1_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM16_CH1_ReadCounter       ; deprecated
                                        (0051) export _wPWM16_CH1_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA fitolamp_slave_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM16_CH1_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM16_CH1_EnableInt:
                                        (0091) _PWM16_CH1_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM16_CH1_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
049B: 7F       RET                      (0095)    ret
049C: 41 E1 F7 AND   REG[0xE1],0xF7     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM16_CH1_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM16_CH1_DisableInt:
                                        (0119) _PWM16_CH1_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM16_CH1_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
049F: 7F       RET                      (0123)    ret
04A0: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM16_CH1_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM16_CH1_Start:
                                        (0148) _PWM16_CH1_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM16_CH1_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
04A3: 7F       RET                      (0152)    ret
04A4: 41 2B FE AND   REG[0x2B],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM16_CH1_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM16_CH1_Stop:
                                        (0176) _PWM16_CH1_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM16_CH1_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
04A7: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM16_CH1_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM16_CH1_WritePeriod:
                                        (0206) _PWM16_CH1_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
04A8: 60 29    MOV   REG[0x29],A        (0208)    mov   reg[PWM16_CH1_PERIOD_LSB_REG], A
04AA: 5B       MOV   A,X                (0209)    mov   A, X
04AB: 60 2D    MOV   REG[0x2D],A        (0210)    mov   reg[PWM16_CH1_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
04AD: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM16_CH1_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM16_CH1_WritePulseWidth:
                                        (0235) _PWM16_CH1_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
04AE: 60 2A    MOV   REG[0x2A],A        (0237)    mov   reg[PWM16_CH1_COMPARE_LSB_REG], A
04B0: 5B       MOV   A,X                (0238)    mov   A, X
04B1: 60 2E    MOV   REG[0x2E],A        (0239)    mov   reg[PWM16_CH1_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
04B3: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM16_CH1_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM16_CH1_wReadPulseWidth:
                                        (0264) _PWM16_CH1_wReadPulseWidth:
                                        (0265)  wPWM16_CH1_ReadPulseWidth:                      ; this name deprecated
                                        (0266) _wPWM16_CH1_ReadPulseWidth:                      ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
04B4: 5D 2E    MOV   A,REG[0x2E]        (0268)    mov   A, reg[PWM16_CH1_COMPARE_MSB_REG]
04B6: 5C       MOV   X,A                (0269)    mov   X, A
04B7: 5D 2A    MOV   A,REG[0x2A]        (0270)    mov   A, reg[PWM16_CH1_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
04B9: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM16_CH1_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM16_CH1_wReadCounter:
                                        (0299) _PWM16_CH1_wReadCounter:
                                        (0300)  wPWM16_CH1_ReadCounter:                         ; this name deprecated
                                        (0301) _wPWM16_CH1_ReadCounter:                         ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
04BA: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
04BB: 5D 2E    MOV   A,REG[0x2E]        (0310)    mov   A, reg[PWM16_CH1_COMPARE_MSB_REG]       ; Save the Compare register on the stack
04BD: 08       PUSH  A                  (0311)    push  A                                          ;
04BE: 5D 2A    MOV   A,REG[0x2A]        (0312)    mov   A, reg[PWM16_CH1_COMPARE_LSB_REG]       ;
04C0: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
04C1: 41 2B FE AND   REG[0x2B],0xFE     
04C4: 71 10    OR    F,0x10             
                                        (0314)    PWM16_CH1_Stop_M                              ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
04C6: 5D 29    MOV   A,REG[0x29]        (0316)    mov   A, reg[PWM16_CH1_INPUT_LSB_REG]         ; save the LSB clock input setting
04C8: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
04C9: 62 29 00 MOV   REG[0x29],0x0      (0319)    mov   reg[PWM16_CH1_INPUT_LSB_REG], INPUT_REG_NULL
04CC: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
04CE: 5D 2C    MOV   A,REG[0x2C]        (0321)    mov   A, reg[PWM16_CH1_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
04D0: 5D 2E    MOV   A,REG[0x2E]        (0322)    mov   A, reg[PWM16_CH1_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
04D2: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
04D3: 5D 28    MOV   A,REG[0x28]        (0324)    mov   A, reg[PWM16_CH1_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
04D5: 5D 2A    MOV   A,REG[0x2A]        (0325)    mov   A, reg[PWM16_CH1_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
04D7: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
04D8: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
04DA: 60 2E    MOV   REG[0x2E],A        (0328)    mov   reg[PWM16_CH1_COMPARE_MSB_REG], A       ;
04DC: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
04DE: 60 2A    MOV   REG[0x2A],A        (0330)    mov   reg[PWM16_CH1_COMPARE_LSB_REG], A       ;
04E0: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
04E2: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
04E4: 60 29    MOV   REG[0x29],A        (0333)    mov   reg[PWM16_CH1_INPUT_LSB_REG], A         ;    and restore it
04E6: 70 EF    AND   F,0xEF             
04E8: 43 2B 01 OR    REG[0x2B],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM16_CH1_Start_M                             ; Now re-enable the PWM function
04EB: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
04EC: 20       POP   X                  (0337)    pop   X                                          ;
04ED: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
04EF: 70 3F    AND   F,0x3F             
04F1: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
04F3: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM16_CH1.asm
FILE: lib\pwm16_ch0int.asm              (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_CH0INT.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 Interrupt Service Routine
                                        (0008) ;;-----------------------------------------------------------------------------
                                        (0009) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0010) ;;*****************************************************************************
                                        (0011) ;;*****************************************************************************
                                        (0012) 
                                        (0013) include "m8c.inc"
                                        (0014) include "PWM16_CH0.inc"
                                        (0015) include "memory.inc"
                                        (0016) 
                                        (0017) 
                                        (0018) ;-----------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------
                                        (0021) export  _PWM16_CH0_ISR
                                        (0022) 
                                        (0023) 
                                        (0024) AREA InterruptRAM (RAM,REL,CON)
                                        (0025) 
                                        (0026) ;@PSoC_UserCode_INIT@ (Do not change this line.)
                                        (0027) ;---------------------------------------------------
                                        (0028) ; Insert your custom declarations below this banner
                                        (0029) ;---------------------------------------------------
                                        (0030) 
                                        (0031) ;------------------------
                                        (0032) ; Includes
                                        (0033) ;------------------------
                                        (0034) 
                                        (0035) 	
                                        (0036) ;------------------------
                                        (0037) ;  Constant Definitions
                                        (0038) ;------------------------
                                        (0039) 
                                        (0040) 
                                        (0041) ;------------------------
                                        (0042) ; Variable Allocation
                                        (0043) ;------------------------
                                        (0044) 
                                        (0045) 
                                        (0046) ;---------------------------------------------------
                                        (0047) ; Insert your custom declarations above this banner
                                        (0048) ;---------------------------------------------------
                                        (0049) ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0050) 
                                        (0051) 
                                        (0052) AREA UserModules (ROM, REL)
                                        (0053) 
                                        (0054) ;-----------------------------------------------------------------------------
                                        (0055) ;  FUNCTION NAME: _PWM16_CH0_ISR
                                        (0056) ;
                                        (0057) ;  DESCRIPTION: Unless modified, this implements only a null handler stub.
                                        (0058) ;
                                        (0059) ;-----------------------------------------------------------------------------
                                        (0060) ;
                                        (0061) 
                                        (0062) _PWM16_CH0_ISR:
                                        (0063) 
                                        (0064)    ;@PSoC_UserCode_BODY@ (Do not change this line.)
                                        (0065)    ;---------------------------------------------------
                                        (0066)    ; Insert your custom assembly code below this banner
                                        (0067)    ;---------------------------------------------------
                                        (0068)    ;   NOTE: interrupt service routines must preserve
                                        (0069)    ;   the values of the A and X CPU registers.
                                        (0070)    
                                        (0071)    ;---------------------------------------------------
                                        (0072)    ; Insert your custom assembly code above this banner
                                        (0073)    ;---------------------------------------------------
                                        (0074)    
                                        (0075)    ;---------------------------------------------------
                                        (0076)    ; Insert a lcall to a C function below this banner
                                        (0077)    ; and un-comment the lines between these banners
                                        (0078)    ;---------------------------------------------------
                                        (0079)    
                                        (0080)    ;PRESERVE_CPU_CONTEXT
                                        (0081)    ;lcall _My_C_Function
                                        (0082)    ;RESTORE_CPU_CONTEXT
                                        (0083)    
                                        (0084)    ;---------------------------------------------------
                                        (0085)    ; Insert a lcall to a C function above this banner
                                        (0086)    ; and un-comment the lines between these banners
                                        (0087)    ;---------------------------------------------------
                                        (0088)    ;@PSoC_UserCode_END@ (Do not change this line.)
                                        (0089) 
04F4: 7E       RETI                     (0090)    reti
                                        (0091) 
                                        (0092) 
                                        (0093) ; end of file PWM16_CH0INT.asm
FILE: lib\pwm16_ch0.asm                 (0001) ;;*****************************************************************************
04F5: 43 E1 02 OR    REG[0xE1],0x2      (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: PWM16_CH0.asm
                                        (0004) ;;   Version: 2.5, Updated on 2015/3/4 at 22:26:51
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: PWM16 User Module software implementation file
                                        (0008) ;;
                                        (0009) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0010) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0011) ;;        This means it is the caller's responsibility to preserve any values
                                        (0012) ;;        in the X and A registers that are still needed after the API functions
                                        (0013) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0014) ;;        responsibility to perserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0015) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0016) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0017) ;;-----------------------------------------------------------------------------
                                        (0018) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0019) ;;*****************************************************************************
                                        (0020) ;;*****************************************************************************
                                        (0021) 
                                        (0022) include "m8c.inc"
                                        (0023) include "PWM16_CH0.inc"
                                        (0024) include "memory.inc"
                                        (0025) 
                                        (0026) ;-----------------------------------------------
                                        (0027) ;  Global Symbols
                                        (0028) ;-----------------------------------------------
                                        (0029) export  PWM16_CH0_EnableInt
                                        (0030) export _PWM16_CH0_EnableInt
                                        (0031) export  PWM16_CH0_DisableInt
                                        (0032) export _PWM16_CH0_DisableInt
                                        (0033) export  PWM16_CH0_Start
                                        (0034) export _PWM16_CH0_Start
                                        (0035) export  PWM16_CH0_Stop
                                        (0036) export _PWM16_CH0_Stop
                                        (0037) export  PWM16_CH0_WritePeriod
                                        (0038) export _PWM16_CH0_WritePeriod
                                        (0039) export  PWM16_CH0_WritePulseWidth
                                        (0040) export _PWM16_CH0_WritePulseWidth
                                        (0041) export  PWM16_CH0_wReadPulseWidth
                                        (0042) export _PWM16_CH0_wReadPulseWidth
                                        (0043) export  PWM16_CH0_wReadCounter
                                        (0044) export _PWM16_CH0_wReadCounter
                                        (0045) 
                                        (0046) ; The following functions are deprecated and subject to omission in future releases
                                        (0047) ;
                                        (0048) export  wPWM16_CH0_ReadPulseWidth    ; deprecated
                                        (0049) export _wPWM16_CH0_ReadPulseWidth    ; deprecated
                                        (0050) export  wPWM16_CH0_ReadCounter       ; deprecated
                                        (0051) export _wPWM16_CH0_ReadCounter       ; deprecated
                                        (0052) 
                                        (0053) 
                                        (0054) AREA fitolamp_slave_RAM (RAM,REL)
                                        (0055) 
                                        (0056) ;-----------------------------------------------
                                        (0057) ;  Constant Definitions
                                        (0058) ;-----------------------------------------------
                                        (0059) 
                                        (0060) INPUT_REG_NULL:                equ 0x00    ; Clear the input register
                                        (0061) 
                                        (0062) 
                                        (0063) ;-----------------------------------------------
                                        (0064) ; Variable Allocation
                                        (0065) ;-----------------------------------------------
                                        (0066) 
                                        (0067) 
                                        (0068) AREA UserModules (ROM, REL)
                                        (0069) 
                                        (0070) .SECTION
                                        (0071) ;-----------------------------------------------------------------------------
                                        (0072) ;  FUNCTION NAME: PWM16_CH0_EnableInt
                                        (0073) ;
                                        (0074) ;  DESCRIPTION:
                                        (0075) ;     Enables this PWM's interrupt by setting the interrupt enable mask bit
                                        (0076) ;     associated with this User Module. This function has no effect until and
                                        (0077) ;     unless the global interrupts are enabled (for example by using the
                                        (0078) ;     macro M8C_EnableGInt).
                                        (0079) ;-----------------------------------------------------------------------------
                                        (0080) ;
                                        (0081) ;  ARGUMENTS:    None.
                                        (0082) ;  RETURNS:      Nothing.
                                        (0083) ;  SIDE EFFECTS: 
                                        (0084) ;    The A and X registers may be modified by this or future implementations
                                        (0085) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0086) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0087) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0088) ;    functions.
                                        (0089) ;
                                        (0090)  PWM16_CH0_EnableInt:
                                        (0091) _PWM16_CH0_EnableInt:
                                        (0092)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0093)    PWM16_CH0_EnableInt_M
                                        (0094)    RAM_EPILOGUE RAM_USE_CLASS_1
04F8: 7F       RET                      (0095)    ret
04F9: 41 E1 FD AND   REG[0xE1],0xFD     
                                        (0096) 
                                        (0097) 
                                        (0098) .ENDSECTION
                                        (0099) 
                                        (0100) .SECTION
                                        (0101) ;-----------------------------------------------------------------------------
                                        (0102) ;  FUNCTION NAME: PWM16_CH0_DisableInt
                                        (0103) ;
                                        (0104) ;  DESCRIPTION:
                                        (0105) ;     Disables this PWM's interrupt by clearing the interrupt enable
                                        (0106) ;     mask bit associated with this User Module.
                                        (0107) ;-----------------------------------------------------------------------------
                                        (0108) ;
                                        (0109) ;  ARGUMENTS:    None
                                        (0110) ;  RETURNS:      Nothing
                                        (0111) ;  SIDE EFFECTS:
                                        (0112) ;    The A and X registers may be modified by this or future implementations
                                        (0113) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0114) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0115) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0116) ;    functions.
                                        (0117) ;
                                        (0118)  PWM16_CH0_DisableInt:
                                        (0119) _PWM16_CH0_DisableInt:
                                        (0120)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0121)    PWM16_CH0_DisableInt_M
                                        (0122)    RAM_EPILOGUE RAM_USE_CLASS_1
04FC: 7F       RET                      (0123)    ret
04FD: 43 23 01 OR    REG[0x23],0x1      
                                        (0124) 
                                        (0125) 
                                        (0126) .ENDSECTION
                                        (0127) 
                                        (0128) .SECTION
                                        (0129) ;-----------------------------------------------------------------------------
                                        (0130) ;  FUNCTION NAME: PWM16_CH0_Start
                                        (0131) ;
                                        (0132) ;  DESCRIPTION:
                                        (0133) ;     Sets the start bit in the Control register of this user module.  The
                                        (0134) ;     PWM will begin counting on the next input clock as soon as the
                                        (0135) ;     enable input is asserted high.
                                        (0136) ;-----------------------------------------------------------------------------
                                        (0137) ;
                                        (0138) ;  ARGUMENTS:    None
                                        (0139) ;  RETURNS:      Nothing
                                        (0140) ;  SIDE EFFECTS:
                                        (0141) ;    The A and X registers may be modified by this or future implementations
                                        (0142) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0143) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0144) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0145) ;    functions.
                                        (0146) ;
                                        (0147)  PWM16_CH0_Start:
                                        (0148) _PWM16_CH0_Start:
                                        (0149)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0150)    PWM16_CH0_Start_M
                                        (0151)    RAM_EPILOGUE RAM_USE_CLASS_1
0500: 7F       RET                      (0152)    ret
0501: 41 23 FE AND   REG[0x23],0xFE     
                                        (0153) 
                                        (0154) 
                                        (0155) .ENDSECTION
                                        (0156) 
                                        (0157) .SECTION
                                        (0158) ;-----------------------------------------------------------------------------
                                        (0159) ;  FUNCTION NAME: PWM16_CH0_Stop
                                        (0160) ;
                                        (0161) ;  DESCRIPTION:
                                        (0162) ;     Disables PWM operation by clearing the start bit in the Control
                                        (0163) ;     register of the LSB block.
                                        (0164) ;-----------------------------------------------------------------------------
                                        (0165) ;
                                        (0166) ;  ARGUMENTS:    None
                                        (0167) ;  RETURNS:      Nothing
                                        (0168) ;  SIDE EFFECTS:
                                        (0169) ;    The A and X registers may be modified by this or future implementations
                                        (0170) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0171) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0172) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0173) ;    functions.
                                        (0174) ;
                                        (0175)  PWM16_CH0_Stop:
                                        (0176) _PWM16_CH0_Stop:
                                        (0177)    RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0178)    PWM16_CH0_Stop_M
                                        (0179)    RAM_EPILOGUE RAM_USE_CLASS_1
0504: 7F       RET                      (0180)    ret
                                        (0181) 
                                        (0182) 
                                        (0183) .ENDSECTION
                                        (0184) 
                                        (0185) .SECTION
                                        (0186) ;-----------------------------------------------------------------------------
                                        (0187) ;  FUNCTION NAME: PWM16_CH0_WritePeriod
                                        (0188) ;
                                        (0189) ;  DESCRIPTION:
                                        (0190) ;     Write the 16-bit period value into the Period register (DR1).
                                        (0191) ;-----------------------------------------------------------------------------
                                        (0192) ;
                                        (0193) ;  ARGUMENTS: fastcall16 WORD wPeriodValue (LSB in A, MSB in X)
                                        (0194) ;  RETURNS:   Nothing
                                        (0195) ;  SIDE EFFECTS:
                                        (0196) ;    If the PWM user module is stopped, then this value will also be
                                        (0197) ;    latched into the Count registers (DR0).
                                        (0198) ;    
                                        (0199) ;    The A and X registers may be modified by this or future implementations
                                        (0200) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0201) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0202) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0203) ;    functions.
                                        (0204) ;
                                        (0205)  PWM16_CH0_WritePeriod:
                                        (0206) _PWM16_CH0_WritePeriod:
                                        (0207)    RAM_PROLOGUE RAM_USE_CLASS_1
0505: 60 21    MOV   REG[0x21],A        (0208)    mov   reg[PWM16_CH0_PERIOD_LSB_REG], A
0507: 5B       MOV   A,X                (0209)    mov   A, X
0508: 60 25    MOV   REG[0x25],A        (0210)    mov   reg[PWM16_CH0_PERIOD_MSB_REG], A
                                        (0211)    RAM_EPILOGUE RAM_USE_CLASS_1
050A: 7F       RET                      (0212)    ret
                                        (0213) 
                                        (0214) 
                                        (0215) .ENDSECTION
                                        (0216) 
                                        (0217) .SECTION
                                        (0218) ;-----------------------------------------------------------------------------
                                        (0219) ;  FUNCTION NAME: PWM16_CH0_WritePulseWidth
                                        (0220) ;
                                        (0221) ;  DESCRIPTION:
                                        (0222) ;     Writes the pulse width value into the Compare register (DR2).
                                        (0223) ;-----------------------------------------------------------------------------
                                        (0224) ;
                                        (0225) ;  ARGUMENTS:    fastcall16 WORD wCompareValue (LSB in A, MSB in X)
                                        (0226) ;  RETURNS:      Nothing
                                        (0227) ;  SIDE EFFECTS:
                                        (0228) ;    The A and X registers may be modified by this or future implementations
                                        (0229) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0230) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0231) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0232) ;    functions.
                                        (0233) ;
                                        (0234)  PWM16_CH0_WritePulseWidth:
                                        (0235) _PWM16_CH0_WritePulseWidth:
                                        (0236)    RAM_PROLOGUE RAM_USE_CLASS_1
050B: 60 22    MOV   REG[0x22],A        (0237)    mov   reg[PWM16_CH0_COMPARE_LSB_REG], A
050D: 5B       MOV   A,X                (0238)    mov   A, X
050E: 60 26    MOV   REG[0x26],A        (0239)    mov   reg[PWM16_CH0_COMPARE_MSB_REG], A
                                        (0240)    RAM_EPILOGUE RAM_USE_CLASS_1
0510: 7F       RET                      (0241)    ret
                                        (0242) 
                                        (0243) 
                                        (0244) .ENDSECTION
                                        (0245) 
                                        (0246) .SECTION
                                        (0247) ;-----------------------------------------------------------------------------
                                        (0248) ;  FUNCTION NAME: PWM16_CH0_wReadPulseWidth
                                        (0249) ;
                                        (0250) ;  DESCRIPTION:
                                        (0251) ;     Reads the Compare register.
                                        (0252) ;-----------------------------------------------------------------------------
                                        (0253) ;
                                        (0254) ;  ARGUMENTS:    None
                                        (0255) ;  RETURNS:      fastcall16 WORD wCompareValue (value of DR2 in the X & A registers)
                                        (0256) ;  SIDE EFFECTS:
                                        (0257) ;    The A and X registers may be modified by this or future implementations
                                        (0258) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0259) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0260) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0261) ;    functions.
                                        (0262) ;
                                        (0263)  PWM16_CH0_wReadPulseWidth:
                                        (0264) _PWM16_CH0_wReadPulseWidth:
                                        (0265)  wPWM16_CH0_ReadPulseWidth:                      ; this name deprecated
                                        (0266) _wPWM16_CH0_ReadPulseWidth:                      ; this name deprecated
                                        (0267)    RAM_PROLOGUE RAM_USE_CLASS_1
0511: 5D 26    MOV   A,REG[0x26]        (0268)    mov   A, reg[PWM16_CH0_COMPARE_MSB_REG]
0513: 5C       MOV   X,A                (0269)    mov   X, A
0514: 5D 22    MOV   A,REG[0x22]        (0270)    mov   A, reg[PWM16_CH0_COMPARE_LSB_REG]
                                        (0271)    RAM_EPILOGUE RAM_USE_CLASS_1
0516: 7F       RET                      (0272)    ret
                                        (0273) 
                                        (0274) 
                                        (0275) .ENDSECTION
                                        (0276) 
                                        (0277) .SECTION
                                        (0278) ;-----------------------------------------------------------------------------
                                        (0279) ;  FUNCTION NAME: PWM16_CH0_wReadCounter
                                        (0280) ;
                                        (0281) ;  DESCRIPTION:
                                        (0282) ;     Returns the value in the Count register (DR0), preserving the value in
                                        (0283) ;     the compare register (DR2). Interrupts are prevented during the transfer
                                        (0284) ;     from the Count to the Compare register by holding the clock low in
                                        (0285) ;     the MSB PSoC block.
                                        (0286) ;-----------------------------------------------------------------------------
                                        (0287) ;
                                        (0288) ;  ARGUMENTS: None
                                        (0289) ;  RETURNS:   fastcall16 WORD wCount (value of DR0 in the X & A registers)
                                        (0290) ;  SIDE EFFECTS:
                                        (0291) ;     1) The user module is stopped momentarily and one or more counts may be missed.
                                        (0292) ;     2) The A and X registers may be modified by this or future implementations
                                        (0293) ;        of this function.  The same is true for all RAM page pointer registers in
                                        (0294) ;        the Large Memory Model.  When necessary, it is the calling function's
                                        (0295) ;        responsibility to perserve their values across calls to fastcall16 
                                        (0296) ;        functions.
                                        (0297) ;
                                        (0298)  PWM16_CH0_wReadCounter:
                                        (0299) _PWM16_CH0_wReadCounter:
                                        (0300)  wPWM16_CH0_ReadCounter:                         ; this name deprecated
                                        (0301) _wPWM16_CH0_ReadCounter:                         ; this name deprecated
                                        (0302) 
                                        (0303)    bOrigCompareValue:      EQU   0                  ; Frame offset to temp Compare store
                                        (0304)    bOrigClockSetting:      EQU   2                  ; Frame offset to temp Input   store
                                        (0305)    wCounter:               EQU   3                  ; Frame offset to temp Count   store
                                        (0306)    STACK_FRAME_SIZE:       EQU   5                  ; max stack frame size is 5 bytes
                                        (0307) 
                                        (0308)    RAM_PROLOGUE RAM_USE_CLASS_2
0517: 4F       MOV   X,SP               (0309)    mov   X, SP                                      ; X <-  stack frame pointer
0518: 5D 26    MOV   A,REG[0x26]        (0310)    mov   A, reg[PWM16_CH0_COMPARE_MSB_REG]       ; Save the Compare register on the stack
051A: 08       PUSH  A                  (0311)    push  A                                          ;
051B: 5D 22    MOV   A,REG[0x22]        (0312)    mov   A, reg[PWM16_CH0_COMPARE_LSB_REG]       ;
051D: 08       PUSH  A                  (0313)    push  A                                          ;  -stack frame now 2 bytes-
051E: 41 23 FE AND   REG[0x23],0xFE     
0521: 71 10    OR    F,0x10             
                                        (0314)    PWM16_CH0_Stop_M                              ; Disable the PWM function
                                        (0315)    M8C_SetBank1                                     ;
0523: 5D 21    MOV   A,REG[0x21]        (0316)    mov   A, reg[PWM16_CH0_INPUT_LSB_REG]         ; save the LSB clock input setting
0525: 08       PUSH  A                  (0317)    push  A                                          ;   on the stack (now 3 bytes) and ...
                                        (0318)                                                     ;   hold the clock low:
0526: 62 21 00 MOV   REG[0x21],0x0      (0319)    mov   reg[PWM16_CH0_INPUT_LSB_REG], INPUT_REG_NULL
0529: 70 EF    AND   F,0xEF             
                                        (0320)    M8C_SetBank0                                     ; Extract the Count via DR2 register
052B: 5D 24    MOV   A,REG[0x24]        (0321)    mov   A, reg[PWM16_CH0_COUNTER_MSB_REG]       ; DR2 <- DR0 (in the MSB block)
052D: 5D 26    MOV   A,REG[0x26]        (0322)    mov   A, reg[PWM16_CH0_COMPARE_MSB_REG]       ; Stash the Count MSB on the stack
052F: 08       PUSH  A                  (0323)    push  A                                          ;  -stack frame is now 4 bytes
0530: 5D 20    MOV   A,REG[0x20]        (0324)    mov   A, reg[PWM16_CH0_COUNTER_LSB_REG]       ; DR2 <- DR0 (in the LSB block)
0532: 5D 22    MOV   A,REG[0x22]        (0325)    mov   A, reg[PWM16_CH0_COMPARE_LSB_REG]       ; Stash the Count LSB on the stack
0534: 08       PUSH  A                  (0326)    push  A                                          ;   -stack frame is now 5 bytes-
0535: 52 00    MOV   A,[X+0]            (0327)    mov   A, [X+bOrigCompareValue]                   ; Restore the Compare MSB register
0537: 60 26    MOV   REG[0x26],A        (0328)    mov   reg[PWM16_CH0_COMPARE_MSB_REG], A       ;
0539: 52 01    MOV   A,[X+1]            (0329)    mov   A, [X+bOrigCompareValue+1]                 ; Restore the Compare LSB register
053B: 60 22    MOV   REG[0x22],A        (0330)    mov   reg[PWM16_CH0_COMPARE_LSB_REG], A       ;
053D: 71 10    OR    F,0x10             
                                        (0331)    M8C_SetBank1                                     ; ---Restore the PWM operation
053F: 52 02    MOV   A,[X+2]            (0332)    mov   A, [X+bOrigClockSetting]                   ; Grab the LSB clock setting...
0541: 60 21    MOV   REG[0x21],A        (0333)    mov   reg[PWM16_CH0_INPUT_LSB_REG], A         ;    and restore it
0543: 70 EF    AND   F,0xEF             
0545: 43 23 01 OR    REG[0x23],0x1      
                                        (0334)    M8C_SetBank0                                     ;
                                        (0335)    PWM16_CH0_Start_M                             ; Now re-enable the PWM function
0548: 18       POP   A                  (0336)    pop   A                                          ; Setup the return value
0549: 20       POP   X                  (0337)    pop   X                                          ;
054A: 38 FD    ADD   SP,0xFD            (0338)    ADD   SP, -(STACK_FRAME_SIZE-2)                  ; Zap remainder of stack frame
054C: 70 3F    AND   F,0x3F             
054E: 71 C0    OR    F,0xC0             
                                        (0339)    RAM_EPILOGUE RAM_USE_CLASS_2
0550: 7F       RET                      (0340)    ret
                                        (0341) 
                                        (0342) .ENDSECTION
                                        (0343) 
                                        (0344) ; End of File PWM16_CH0.asm
FILE: lib\lcd.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME:   LCD.asm
                                        (0004) ;;  Version: 1.60, Updated on 2015/3/4 at 22:26:36
                                        (0005) ;;  Generated by PSoC Designer 5.4.3191
                                        (0006) ;;
                                        (0007) ;;  DESCRIPTION: LCD User Module software implementation file.
                                        (0008) ;;
                                        (0009) ;; This set of functions is written for the common 2 and 4 line
                                        (0010) ;; LCDs that use the Hitachi HD44780A controller.
                                        (0011) ;;
                                        (0012) ;;  LCD connections to PSoC port
                                        (0013) ;;
                                        (0014) ;;    PX.0 ==> LCD D4
                                        (0015) ;;    PX.1 ==> LCD D5
                                        (0016) ;;    PX.2 ==> LCD D6
                                        (0017) ;;    PX.3 ==> LCD D7
                                        (0018) ;;    PX.4 ==> LCD E
                                        (0019) ;;    PX.5 ==> LCD RS
                                        (0020) ;;    PX.6 ==> LCD R/W
                                        (0021) ;;
                                        (0022) ;;  NOTE: User Module APIs conform to the fastcall16 convention for marshalling
                                        (0023) ;;        arguments and observe the associated "Registers are volatile" policy.
                                        (0024) ;;        This means it is the caller's responsibility to preserve any values
                                        (0025) ;;        in the X and A registers that are still needed after the API functions
                                        (0026) ;;        returns. For Large Memory Model devices it is also the caller's 
                                        (0027) ;;        responsibility to preserve any value in the CUR_PP, IDX_PP, MVR_PP and 
                                        (0028) ;;        MVW_PP registers. Even though some of these registers may not be modified
                                        (0029) ;;        now, there is no guarantee that will remain the case in future releases.
                                        (0030) ;;-----------------------------------------------------------------------------
                                        (0031) ;;  Copyright (c) Cypress Semiconductor 2015. All Rights Reserved.
                                        (0032) ;;*****************************************************************************
                                        (0033) ;;*****************************************************************************
                                        (0034) 
                                        (0035) include "m8c.inc"
                                        (0036) include "memory.inc"
                                        (0037) include "LCD.inc"
                                        (0038) 
                                        (0039) ;-----------------------------------------------
                                        (0040) ;  Global Symbols
                                        (0041) ;-----------------------------------------------
                                        (0042) 
                                        (0043) export   LCD_Start
                                        (0044) export  _LCD_Start
                                        (0045) export   LCD_Init
                                        (0046) export  _LCD_Init
                                        (0047) 
                                        (0048) export   LCD_WriteData
                                        (0049) export  _LCD_WriteData
                                        (0050) 
                                        (0051) export   LCD_Control
                                        (0052) export  _LCD_Control
                                        (0053) 
                                        (0054) export  LCD_PrString
                                        (0055) export _LCD_PrString
                                        (0056) 
                                        (0057) export  LCD_PrCString
                                        (0058) export _LCD_PrCString
                                        (0059) 
                                        (0060) export  LCD_Position
                                        (0061) export _LCD_Position
                                        (0062) 
                                        (0063) export  LCD_PrHexByte
                                        (0064) export _LCD_PrHexByte
                                        (0065) 
                                        (0066) export  LCD_PrHexInt
                                        (0067) export _LCD_PrHexInt
                                        (0068) 
                                        (0069) export  LCD_Delay50uTimes
                                        (0070) export _LCD_Delay50uTimes
                                        (0071) 
                                        (0072) export  LCD_Delay50u
                                        (0073) export _LCD_Delay50u
                                        (0074) 
                                        (0075) ;-----------------------------------------------
                                        (0076) ; If bargraph functions not required, don't
                                        (0077) ; export the function names.
                                        (0078) ;-----------------------------------------------
                                        (0079) 
                                        (0080) IF (LCD_BARGRAPH_ENABLE)
                                        (0081) export  LCD_InitBG
                                        (0082) export _LCD_InitBG
                                        (0083) 
                                        (0084) export  LCD_InitVBG
                                        (0085) export _LCD_InitVBG
                                        (0086) 
                                        (0087) ; NOTE: The two functions,
                                        (0088) ;
                                        (0089) ;    LCD_DrawVBG and
                                        (0090) ;    LCD_DrawBG
                                        (0091) ;
                                        (0092) ; are implemented using both fastcall16 and legacy fastcall16 because they
                                        (0093) ; fall into a special and rare case where the calling sequences specified
                                        (0094) ; by the two disciplines are incompatible. The fastcall16 versions are
                                        (0095) ; provided for both C and Assembly users in all memory models. The legacy
                                        (0096) ; fastcall16 versions are provided only to support existing small memory
                                        (0097) ; model assembly language code---they do not work in the large memory
                                        (0098) ; model.
                                        (0099) ;
                                        (0100) ; ** The legacy fastcall16 versions are provided on a temporary basis to
                                        (0101) ; ** ease the transition to the 4.2 release of PSoC Designer. Their use is
                                        (0102) ; ** deprecated and their status is "No Further Maintenance".
                                        (0103) ;
                                        (0104) ; The fastcall16 versions of these functions are distinguished by a
                                        (0105) ; leading underscore in the name. The legacy fastcall16 names (which appear
                                        (0106) ; in this comment) do not have the leading underscore. Details on the
                                        (0107) ; calling sequence to be used for fastcall16 are given in the user module
                                        (0108) ; datasheet.
                                        (0109) ;
                                        (0110) ; Fastcall16 versions:
                                        (0111) export _LCD_DrawVBG
                                        (0112) export _LCD_DrawBG
                                        (0113) 
                                        (0114) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0115) ; Legacy Fastcall versions:
                                        (0116) export  LCD_DrawVBG
                                        (0117) export  LCD_DrawBG
                                        (0118) ENDIF  ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0119) 
                                        (0120) ENDIF  ; BARGRAPH_ENABLE
                                        (0121) 
                                        (0122) ;
                                        (0123) ; The following functions are deprecated and will be eliminated in a future
                                        (0124) ; version of PSoC Designer.
                                        (0125) ;
                                        (0126) export   LCD_Write_Data
                                        (0127) export  _LCD_Write_Data
                                        (0128) 
                                        (0129) 
                                        (0130) ;-----------------------------------------------
                                        (0131) ;  EQUATES
                                        (0132) ;-----------------------------------------------
                                        (0133) 
                                        (0134) LCD_Port:           equ    PRT2DR
                                        (0135) LCD_PortMode0:      equ    PRT2DM0
                                        (0136) LCD_PortMode1:      equ    PRT2DM1
                                        (0137) 
                                        (0138) LCD_E:              equ    10h
                                        (0139) LCD_RW:             equ    40h
                                        (0140) LCD_RS:             equ    20h
                                        (0141) 
                                        (0142) LCD_DATA_MASK:      equ    0Fh
                                        (0143) LCD_READY_BIT:      equ    08h
                                        (0144) 
                                        (0145) LCD_DATA_READ:      equ    ( LCD_E | LCD_RW | LCD_RS )
                                        (0146) LCD_CNTL_READ:      equ    ( LCD_E | LCD_RW )
                                        (0147) LCD_PORT_WRITE:     equ    7Fh
                                        (0148) LCD_PORT_MASK:      equ    7Fh
                                        (0149) 
                                        (0150) LCD_DISP_INC:       equ    03h
                                        (0151) LCD_DISP_OFF:       equ    08h
                                        (0152) LCD_DISP_ON:        equ    0Ch
                                        (0153) LCD_4BIT_2LINE:     equ    2Ch
                                        (0154) 
                                        (0155) 
                                        (0156) ;-----------------------------------------------
                                        (0157) ;      Bargraph definitions
                                        (0158) ;-----------------------------------------------
                                        (0159) 
                                        (0160) LCD_BG_CHAR_WIDTH:  equ    16     ; 16 characters in width
                                        (0161) LCD_BG_SEG_WIDTH:   equ    80     ; 16 * 5 = 80
                                        (0162) LCD_BG_COL_START:   equ     0     ; Always start in the left most column
                                        (0163) 
                                        (0164)                                   ; Offsets for 2x16, 2x20, 4x20
                                        (0165)                                   ; Change these values for a custom LCD
                                        (0166) 
                                        (0167) LCD_ROW1_OFFSET:    equ    80h    ; Address/command offset for row 1
                                        (0168) LCD_ROW2_OFFSET:    equ    C0h    ; Address/command offset for row 2
                                        (0169) LCD_ROW3_OFFSET:    equ    94h    ; Address/command offset for row 1
                                        (0170) LCD_ROW4_OFFSET:    equ    D4h    ; Address/command offset for row 2
                                        (0171) 
                                        (0172) LCD_BG_ROW1_OFFSET: equ    80h    ; Address/command offset for row 1
                                        (0173) LCD_BG_ROW2_OFFSET: equ    C0h    ; Address/command offset for row 2
                                        (0174) 
                                        (0175) LCD_CG_RAM_OFFSET:  equ    40h    ; Offset to character RAM
                                        (0176) 
                                        (0177) AREA UserModules (ROM, REL)
                                        (0178) 
                                        (0179) .SECTION
                                        (0180) ;-----------------------------------------------------------------------------
                                        (0181) ;  FUNCTION NAME: LCD_PrCString
                                        (0182) ;
                                        (0183) ;  DESCRIPTION:
                                        (0184) ;    Print constant (ROM) string to LCD
                                        (0185) ;-----------------------------------------------------------------------------
                                        (0186) ;
                                        (0187) ;  ARGUMENTS:
                                        (0188) ;     A:X  Pointer to String
                                        (0189) ;          A contains MSB of string address
                                        (0190) ;          X contains LSB of string address
                                        (0191) ;
                                        (0192) ;  RETURNS:  none
                                        (0193) ;
                                        (0194) ;  SIDE EFFECTS:
                                        (0195) ;    The A and X registers may be modified by this or future implementations
                                        (0196) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0197) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0198) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0199) ;    functions.
                                        (0200) ;          
                                        (0201) ;    Currently only the page pointer registers listed below are modified: 
                                        (0202) ;          CUR_PP
                                        (0203) ;
                                        (0204)  LCD_PrCString:
                                        (0205) _LCD_PrCString:
                                        (0206)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0207)  .Loop_PrCString:
0551: 08       PUSH  A                  (0208)     push  A                            ; Store ROM pointer
0552: 10       PUSH  X                  (0209)     push  X
0553: 28       ROMX                     (0210)     romx                               ; Get character from ROM
0554: B0 04    JNZ   0x0559             (0211)     jnz   .LCD_PrCString_WR            ; print character and advance pointer
0556: 20       POP   X                  (0212)     pop   X                            ; Restore the stack
0557: 18       POP   A                  (0213)     pop   A
                                        (0214)     RAM_EPILOGUE RAM_USE_CLASS_1
0558: 7F       RET                      (0215)     ret                                ; Return
                                        (0216) 
                                        (0217) .LCD_PrCString_WR:
0559: 90 44    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(0218)     call  LCD_WriteData                ; Write data to LCD
055B: 20       POP   X                  (0219)     pop   X                            ; Get ROM pointer
055C: 18       POP   A                  (0220)     pop   A
055D: 75       INC   X                  (0221)     inc   X                            ; Inc LSB of pointer
055E: DF F2    JNC   _LCD_PrCString     (0222)     jnc   .Loop_PrCString
0560: 74       INC   A                  (0223)     inc   A                            ; Inc MSB of pointer if LSB overflow
0561: 8F EF    JMP   _LCD_PrCString     (0224)     jmp   .Loop_PrCString
                                        (0225) 
                                        (0226) .ENDSECTION
                                        (0227) 
                                        (0228) ;-----------------------------------------------------------------------------
                                        (0229) ;  FUNCTION NAME: LCD_PrHexByte
                                        (0230) ;
                                        (0231) ;  DESCRIPTION:
                                        (0232) ;     Print a byte in Hex (two characters) to current LCD position
                                        (0233) ;
                                        (0234) ;-----------------------------------------------------------------------------
                                        (0235) ;
                                        (0236) ;  ARGUMENTS:
                                        (0237) ;     A  => (BYTE) Data/char to be printed
                                        (0238) ;
                                        (0239) ;  RETURNS: none
                                        (0240) ;
                                        (0241) ;  SIDE EFFECTS:
                                        (0242) ;    The A and X registers may be modified by this or future implementations
                                        (0243) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0244) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0245) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0246) ;    functions.
                                        (0247) ;          
                                        (0248) ;    Currently only the page pointer registers listed below are modified: 
                                        (0249) ;          CUR_PP
                                        (0250) ;
                                        (0251) .LITERAL
                                        (0252) LCD_HEX_STR::
                                        (0253)      DS    "0123456789ABCDEF"
                                        (0254) .ENDLITERAL
                                        (0255) .SECTION
                                        (0256) 
                                        (0257)  LCD_PrHexByte:
                                        (0258) _LCD_PrHexByte:
                                        (0259)     RAM_PROLOGUE RAM_USE_CLASS_1
0573: 08       PUSH  A                  (0260)     push  A                            ; Save lower nibble
0574: 67       ASR   A                  (0261)     asr   A                            ; Shift high nibble to right
0575: 67       ASR   A                  (0262)     asr   A
0576: 67       ASR   A                  (0263)     asr   A
0577: 67       ASR   A                  (0264)     asr   A
0578: 21 0F    AND   A,0xF              (0265)     and   A,0Fh                        ; Mask off nibble
057A: FF E7    INDEX LCD_HEX_STR        (0266)     index LCD_HEX_STR                  ; Get Hex value
057C: 90 21    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(0267)     call  LCD_WriteData                ; Write data to screen
057E: 18       POP   A                  (0268)     pop   A                            ; Restore value
057F: 21 0F    AND   A,0xF              (0269)     and   A,0Fh                        ; Mask off lower nibble
0581: FF E0    INDEX LCD_HEX_STR        (0270)     index LCD_HEX_STR                  ; Get Hex value
0583: 90 1A    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(0271)     call  LCD_WriteData                ; Write data to screen
                                        (0272)     RAM_EPILOGUE RAM_USE_CLASS_1
0585: 7F       RET                      (0273)     ret
                                        (0274) .ENDSECTION
                                        (0275) 
                                        (0276) .SECTION
                                        (0277) ;-----------------------------------------------------------------------------
                                        (0278) ;  FUNCTION NAME: LCD_PrHexInt
                                        (0279) ;
                                        (0280) ;  DESCRIPTION:
                                        (0281) ;     Print an Int in Hex (four characters) to current LCD position
                                        (0282) ;
                                        (0283) ;-----------------------------------------------------------------------------
                                        (0284) ;
                                        (0285) ;  ARGUMENTS:
                                        (0286) ;     A:X Integer value
                                        (0287) ;         A  contains LSB of Int
                                        (0288) ;         X  contains MSB of Int
                                        (0289) ;
                                        (0290) ;  RETURNS: none
                                        (0291) ;
                                        (0292) ;  SIDE EFFECTS:
                                        (0293) ;    The A and X registers may be modified by this or future implementations
                                        (0294) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0295) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0296) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0297) ;    functions.
                                        (0298) ;          
                                        (0299) ;    Currently only the page pointer registers listed below are modified: 
                                        (0300) ;          CUR_PP
                                        (0301) ;
                                        (0302)  LCD_PrHexInt:
                                        (0303) _LCD_PrHexInt:
                                        (0304)     RAM_PROLOGUE RAM_USE_CLASS_1
0586: 4B       SWAP  A,X                (0305)     swap  A,X
0587: 9F EA    CALL  _LCD_PrHexByte     (0306)     call  LCD_PrHexByte                ; Print MSB
0589: 5B       MOV   A,X                (0307)     mov   A,X                          ; Move LSB into position
058A: 9F E7    CALL  _LCD_PrHexByte     (0308)     call  LCD_PrHexByte                ; Print LSB
                                        (0309)     RAM_EPILOGUE RAM_USE_CLASS_1
058C: 7F       RET                      (0310)     ret
058D: 70 BF    AND   F,0xBF             
058F: 60 D3    MOV   REG[0xD3],A        
                                        (0311) .ENDSECTION
                                        (0312) 
                                        (0313) .SECTION
                                        (0314) ;-----------------------------------------------------------------------------
                                        (0315) ;  FUNCTION NAME: LCD_PrString
                                        (0316) ;
                                        (0317) ;  DESCRIPTION:
                                        (0318) ;     Print (RAM) ASCII string to LCD
                                        (0319) ;
                                        (0320) ;-----------------------------------------------------------------------------
                                        (0321) ;
                                        (0322) ;  ARGUMENTS:
                                        (0323) ;     A:X contains pointer to string
                                        (0324) ;         X  contains LSB of string pointer
                                        (0325) ;         A  contains MSB or page of string pointer (not used at this time)
                                        (0326) ;
                                        (0327) ;  RETURNS:
                                        (0328) ;
                                        (0329) ;  SIDE EFFECTS:
                                        (0330) ;    The A and X registers may be modified by this or future implementations
                                        (0331) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0332) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0333) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0334) ;    functions.
                                        (0335) ;          
                                        (0336) ;    Currently only the page pointer registers listed below are modified: 
                                        (0337) ;          CUR_PP
                                        (0338) ;          IDX_PP
                                        (0339) ;
                                        (0340) ;
                                        (0341)  LCD_PrString:
                                        (0342) _LCD_PrString:
                                        (0343)     RAM_PROLOGUE RAM_USE_CLASS_3
                                        (0344)     RAM_SETPAGE_IDX A
                                        (0345)  .Loop_PrString:
0591: 52 00    MOV   A,[X+0]            (0346)     mov   A,[X]                        ; Get value pointed to by X
0593: A0 06    JZ    0x059A             (0347)     jz    .End_LCD_PrString            ; Check for end of string
                                        (0348)     ;LCD_writeData is known not to modify X so no need to preserve
0595: 90 08    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(0349)     call  LCD_WriteData                ; Write data to screen
0597: 75       INC   X                  (0350)     inc   X                            ; Advance pointer to next character
0598: 8F F8    JMP   0x0591             (0351)     jmp   .Loop_PrString               ; Go get next character
059A: 70 3F    AND   F,0x3F             
059C: 71 C0    OR    F,0xC0             
                                        (0352) .End_LCD_PrString:
                                        (0353)     RAM_EPILOGUE RAM_USE_CLASS_3
059E: 7F       RET                      (0354)     ret
                                        (0355) .ENDSECTION
                                        (0356) 
                                        (0357) .SECTION
                                        (0358) ;-----------------------------------------------------------------------------
                                        (0359) ;  FUNCTION NAME: LCD_WriteData
                                        (0360) ;
                                        (0361) ;  DESCRIPTION:
                                        (0362) ;     Write a byte to the LCD's data register.
                                        (0363) ;
                                        (0364) ;-----------------------------------------------------------------------------
                                        (0365) ;
                                        (0366) ;  ARGUMENTS:
                                        (0367) ;    A contains byte to be written to LCD data register
                                        (0368) ;
                                        (0369) ;  RETURNS: none
                                        (0370) ;
                                        (0371) ;  SIDE EFFECTS:
                                        (0372) ;    The A and X registers may be modified by this or future implementations
                                        (0373) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0374) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0375) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0376) ;    functions.
                                        (0377) ;          
                                        (0378) ;    Currently only the page pointer registers listed below are modified: 
                                        (0379) ;          CUR_PP
                                        (0380) ;
                                        (0381)  LCD_WriteData:
                                        (0382) _LCD_WriteData:
                                        (0383)  LCD_Write_Data:   ; Do not use
                                        (0384) _LCD_Write_Data:   ; Do not use
                                        (0385)     RAM_PROLOGUE RAM_USE_CLASS_1
059F: 90 65    CALL  0x0606             (0386)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0387)                                        ; A is preserved in LCD_Check_Ready
05A1: 08       PUSH  A                  (0388)     push  A                            ; Save copy of character
05A2: 67       ASR   A                  (0389)     asr   A                            ; Shift high nibble to right
05A3: 67       ASR   A                  (0390)     asr   A
05A4: 67       ASR   A                  (0391)     asr   A
05A5: 67       ASR   A                  (0392)     asr   A
05A6: 21 0F    AND   A,0xF              (0393)     and   A,0Fh                        ; Mask off high nibble
05A8: 90 3B    CALL  0x05E5             (0394)     call  LCD_WDATA_Nibble             ; Write Upper nibble
05AA: 18       POP   A                  (0395)     pop   A                            ; Retrieve copy of character
05AB: 21 0F    AND   A,0xF              (0396)     and   A,0Fh                        ; Mask off high nibble
05AD: 40       NOP                      (0397)     nop
05AE: 40       NOP                      (0398)     nop
05AF: 40       NOP                      (0399)     nop
05B0: 90 33    CALL  0x05E5             (0400)     call  LCD_WDATA_Nibble   ; Write Lower nibble
                                        (0401)     RAM_EPILOGUE RAM_USE_CLASS_1
05B2: 7F       RET                      (0402)     ret
                                        (0403) .ENDSECTION
                                        (0404) 
                                        (0405) .SECTION
                                        (0406) ;-----------------------------------------------------------------------------
                                        (0407) ;  FUNCTION NAME: LCD_Control
                                        (0408) ;
                                        (0409) ;  DESCRIPTION:
                                        (0410) ;     Write a byte to the LCD's control register.
                                        (0411) ;
                                        (0412) ;-----------------------------------------------------------------------------
                                        (0413) ;
                                        (0414) ;  ARGUMENTS:
                                        (0415) ;     A contains data to be written to LCD control register.
                                        (0416) ;
                                        (0417) ;  RETURNS: none
                                        (0418) ;
                                        (0419) ;  SIDE EFFECTS:
                                        (0420) ;    The A and X registers may be modified by this or future implementations
                                        (0421) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0422) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0423) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0424) ;    functions.
                                        (0425) ;          
                                        (0426) ;    Currently only the page pointer registers listed below are modified: 
                                        (0427) ;          CUR_PP
                                        (0428) ;
                                        (0429)  LCD_Control:
                                        (0430) _LCD_Control:
                                        (0431)     RAM_PROLOGUE RAM_USE_CLASS_1
05B3: 90 51    CALL  0x0606             (0432)     call  LCD_Check_Ready              ; Make sure controller is ready
                                        (0433)                                        ; A is preserved in LCD_Check_Ready
05B5: 08       PUSH  A                  (0434)     push  A                            ; Save copy of byte
05B6: 67       ASR   A                  (0435)     asr   A                            ; Shift Upper Nibble to right
05B7: 67       ASR   A                  (0436)     asr   A
05B8: 67       ASR   A                  (0437)     asr   A
05B9: 67       ASR   A                  (0438)     asr   A
05BA: 21 0F    AND   A,0xF              (0439)     and   A,0Fh                        ; Mask off, just in case
05BC: 90 09    CALL  0x05C7             (0440)     call  LCD_WCNTL_Nibble             ; Write high nibble
05BE: 18       POP   A                  (0441)     pop   A                            ; Restore copy of byte
05BF: 21 0F    AND   A,0xF              (0442)     and   A,0Fh                        ; Mask off high nibble
05C1: 40       NOP                      (0443)     nop
05C2: 40       NOP                      (0444)     nop
05C3: 40       NOP                      (0445)     nop
05C4: 90 01    CALL  0x05C7             (0446)     call  LCD_WCNTL_Nibble             ; Write Lower nibble
                                        (0447)     RAM_EPILOGUE RAM_USE_CLASS_1
05C6: 7F       RET                      (0448)     ret
                                        (0449) .ENDSECTION
                                        (0450) 
                                        (0451) .SECTION
                                        (0452) ;-----------------------------------------------------------------------------
                                        (0453) ;  FUNCTION NAME: LCD_WCNTL_Nibble
                                        (0454) ;
                                        (0455) ;  DESCRIPTION:
                                        (0456) ;     Write a single nibble to the LCD's command register
                                        (0457) ;
                                        (0458) ;-----------------------------------------------------------------------------
                                        (0459) ;
                                        (0460) ;  ARGUMENTS:
                                        (0461) ;     A[3:0]   Contains Nibble to be written to command register
                                        (0462) ;
                                        (0463) ;  RETURNS: none
                                        (0464) ;
                                        (0465) ;  SIDE EFFECTS:
                                        (0466) ;    The A and X registers may be modified by this or future implementations
                                        (0467) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0468) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0469) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0470) ;    functions.
                                        (0471) ;          
                                        (0472) ;    Currently only the page pointer registers listed below are modified: 
                                        (0473) ;          CUR_PP
                                        (0474) ;
                                        (0475)  LCD_WCNTL_Nibble:
                                        (0476)     RAM_PROLOGUE RAM_USE_CLASS_4
05C7: 08       PUSH  A                  (0477)     push  A
05C8: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0478)     RAM_SETPAGE_CUR >Port_2_Data_SHADE           ; Set CUR_PP to LCD variable address
05CB: 26 00 80 AND   [0x0],0x80         (0479)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
05CE: 51 00    MOV   A,[0x0]            (0480)     mov   A,[Port_2_Data_SHADE]
05D0: 60 08    MOV   REG[0x8],A         (0481)     mov   reg[LCD_Port],A                        ; Reset control lines
                                        (0482) 
05D2: 18       POP   A                  (0483)     pop   A
05D3: 21 0F    AND   A,0xF              (0484)     and   A,LCD_DATA_MASK                        ; Make sure no bogus data in MSN
05D5: 29 10    OR    A,0x10             (0485)     or    A,LCD_E                                ; Bring "E" Enable line high
05D7: 2A 00    OR    A,[0x0]            (0486)     or    A,[Port_2_Data_SHADE]                  ; OR in bit 7 just
05D9: 60 08    MOV   REG[0x8],A         (0487)     mov   reg[LCD_Port], A                       ; Write data
05DB: 53 00    MOV   [0x0],A            (0488)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
05DD: 40       NOP                      (0489)     nop
05DE: 21 8F    AND   A,0x8F             (0490)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK)       ; Disable E signal and leave data on bus.
05E0: 53 00    MOV   [0x0],A            (0491)     mov   [Port_2_Data_SHADE],A                  ; Keep shadow register in sync
05E2: 60 08    MOV   REG[0x8],A         (0492)     mov   reg[LCD_Port],A
                                        (0493)     RAM_EPILOGUE RAM_USE_CLASS_4
05E4: 7F       RET                      (0494)     ret
                                        (0495) .ENDSECTION
                                        (0496) 
                                        (0497) .SECTION
                                        (0498) ;-----------------------------------------------------------------------------
                                        (0499) ;  FUNCTION NAME: LCD_WDATA_Nibble
                                        (0500) ;
                                        (0501) ;  DESCRIPTION:
                                        (0502) ;     Write a single nibble to the LCD's DATA register
                                        (0503) ;
                                        (0504) ;-----------------------------------------------------------------------------
                                        (0505) ;
                                        (0506) ;  ARGUMENTS:
                                        (0507) ;     A[3:0]   Contains Nibble to be written to data register
                                        (0508) ;
                                        (0509) ;  RETURNS: none
                                        (0510) ;
                                        (0511) ;  SIDE EFFECTS:
                                        (0512) ;    The A and X registers may be modified by this or future implementations
                                        (0513) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0514) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0515) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0516) ;    functions.
                                        (0517) ;          
                                        (0518) ;    Currently only the page pointer registers listed below are modified: 
                                        (0519) ;          CUR_PP
                                        (0520) ;
                                        (0521) LCD_WDATA_Nibble:
                                        (0522)     RAM_PROLOGUE RAM_USE_CLASS_4
05E5: 08       PUSH  A                  (0523)     push  A
05E6: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0524)     RAM_SETPAGE_CUR >Port_2_Data_SHADE          ; Set CUR_PP to LCD variable address
05E9: 26 00 80 AND   [0x0],0x80         (0525)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK
05EC: 2E 00 20 OR    [0x0],0x20         (0526)     or    [Port_2_Data_SHADE],LCD_RS                  ; Raise RS to signify a Data Write
05EF: 51 00    MOV   A,[0x0]            (0527)     mov   A,[Port_2_Data_SHADE]
05F1: 60 08    MOV   REG[0x8],A         (0528)     mov   reg[LCD_Port],A
                                        (0529) 
05F3: 18       POP   A                  (0530)     pop   A
05F4: 21 0F    AND   A,0xF              (0531)     and   A,LCD_DATA_MASK                             ; Make sure no bogus data in A[7:4]
05F6: 29 30    OR    A,0x30             (0532)     or    A,(LCD_E | LCD_RS)                          ; Bring "E" Enable line high
05F8: 2A 00    OR    A,[0x0]            (0533)     or    A,[Port_2_Data_SHADE]                       ; Keep shadow in sync
05FA: 60 08    MOV   REG[0x8],A         (0534)     mov   reg[LCD_Port], A                            ; Write data
05FC: 53 00    MOV   [0x0],A            (0535)     mov   [Port_2_Data_SHADE],A                       ; Keep shadow in sync
05FE: 40       NOP                      (0536)     NOP
05FF: 21 AF    AND   A,0xAF             (0537)     and   A,(~LCD_PORT_MASK|LCD_DATA_MASK|LCD_RS)     ; Disable E signal and leave Data on bus
0601: 53 00    MOV   [0x0],A            (0538)     mov   [Port_2_Data_SHADE],A                       ; keep shadow in sync
0603: 60 08    MOV   REG[0x8],A         (0539)     mov   reg[LCD_Port],A
                                        (0540)     RAM_EPILOGUE RAM_USE_CLASS_4
0605: 7F       RET                      (0541)     ret
                                        (0542) .ENDSECTION
                                        (0543) 
                                        (0544) .SECTION
                                        (0545) ;-----------------------------------------------------------------------------
                                        (0546) ;  FUNCTION NAME: LCD_Check_Ready
                                        (0547) ;
                                        (0548) ;  DESCRIPTION:
                                        (0549) ;     Wait until LCD has completed last command.
                                        (0550) ;
                                        (0551) ;-----------------------------------------------------------------------------
                                        (0552) ;
                                        (0553) ;  ARGUMENTS: none
                                        (0554) ;
                                        (0555) ;  RETURNS: none
                                        (0556) ;
                                        (0557) ;  SIDE EFFECTS:
                                        (0558) ;    The A and X registers may be modified by this or future implementations
                                        (0559) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0560) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0561) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0562) ;    functions.
                                        (0563) ;          
                                        (0564) ;    Currently only the page pointer registers listed below are modified: 
                                        (0565) ;          CUR_PP
                                        (0566) ;
                                        (0567) ;     If LCD is not present, this routine may never return.
                                        (0568) ;
                                        (0569) LCD_Check_Ready:
                                        (0570)     RAM_PROLOGUE RAM_USE_CLASS_4
0606: 08       PUSH  A                  (0571)     push  A                                           ; Save Accumulator
0607: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0572)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                ; Set CUR_PP to LCD variable address
060A: 26 00 80 AND   [0x0],0x80         (0573)     and   [Port_2_Data_SHADE],~LCD_PORT_MASK          ; Mask of all LCD bits
060D: 51 00    MOV   A,[0x0]            (0574)     mov   A,[Port_2_Data_SHADE]
060F: 60 08    MOV   REG[0x8],A         (0575)     mov   reg[LCD_Port],A                             ; Zero LCD port bits
                                        (0576) 
0611: 26 01 F0 AND   [0x1],0xF0         (0577)     and   [Port_2_DriveMode_0_SHADE],~LCD_DATA_MASK   ; Clear out LCD mode bits.
0614: 51 01    MOV   A,[0x1]            (0578)     mov   A,[Port_2_DriveMode_0_SHADE]
0616: 71 10    OR    F,0x10             
                                        (0579)     M8C_SetBank1                                      ; Change port mode to read status
0618: 60 08    MOV   REG[0x8],A         (0580)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for reading
061A: 70 EF    AND   F,0xEF             
                                        (0581)     M8C_SetBank0
                                        (0582) 
061C: 2E 00 40 OR    [0x0],0x40         (0583)     or    [Port_2_Data_SHADE],LCD_RW                  ; Raise RW to signify Read operation
061F: 51 00    MOV   A,[0x0]            (0584)     mov   A,[Port_2_Data_SHADE]
0621: 60 08    MOV   REG[0x8],A         (0585)     mov   reg[LCD_Port],A
0623: 40       NOP                      (0586)     NOP
                                        (0587) 
0624: 10       PUSH  X                  (0588)     push  X							                            ; Save 'X' register
0625: 57 FF    MOV   X,0xFF             (0589)     mov   X,255                         			            ; 255 Attempts
                                        (0590) 
                                        (0591) .LCD_RDY_LOOP:
0627: 2E 00 50 OR    [0x0],0x50         (0592)     or    [Port_2_Data_SHADE], LCD_CNTL_READ                    ; Raise E to start cycle
062A: 51 00    MOV   A,[0x0]            (0593)     mov   A,[Port_2_Data_SHADE]
062C: 60 08    MOV   REG[0x8],A         (0594)     mov   reg[LCD_Port],A
                                        (0595) 
062E: 40       NOP                      (0596)     nop                                               ; Wait 2 nops to make sure data is ready
062F: 40       NOP                      (0597)     nop
0630: 5D 08    MOV   A,REG[0x8]         (0598)     mov   A,reg[LCD_Port]
                                        (0599) 
                                        (0600) ; The code below is used to work around the async read issue with the ICE with the 
                                        (0601) ; 25/26xxx family of devices.  It will help to eliminate "Invalid memory reference" 
                                        (0602) ; errors.  It is not required when running without the ICE or when using any other 
                                        (0603) ; family besides the 25/26xxx family. If not using the ICE or with any other family
                                        (0604) ; the ICE_PORT_SYNC flag should be set to 0.
                                        (0605) IF(ICE_PORT_SYNC)                          
                                        (0606)     mov   reg[ 0xfa], A                    
                                        (0607)     mov   A, reg[0xfa]                     
                                        (0608) ENDIF   
                                        (0609)                                    
0632: 08       PUSH  A                  (0610)     push  A
0633: 26 00 C0 AND   [0x0],0xC0         (0611)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0636: 51 00    MOV   A,[0x0]            (0612)     mov   A,[Port_2_Data_SHADE]
0638: 60 08    MOV   REG[0x8],A         (0613)     mov   reg[LCD_Port],A
                                        (0614) 
063A: 40       NOP                      (0615)     nop                                    ; Add delay for the slowest part and the
063B: 40       NOP                      (0616)     nop                                    ; fastest PSoC
063C: 40       NOP                      (0617)     nop
                                        (0618)                                                                 ; Get the LSBs
063D: 2E 00 50 OR    [0x0],0x50         (0619)     or    [Port_2_Data_SHADE],LCD_CNTL_READ                     ; Raise E to start cycle
0640: 51 00    MOV   A,[0x0]            (0620)     mov   A,[Port_2_Data_SHADE]
0642: 60 08    MOV   REG[0x8],A         (0621)     mov   reg[LCD_Port],A
                                        (0622) 
0644: 40       NOP                      (0623)     nop
0645: 40       NOP                      (0624)     nop
                                        (0625) 
0646: 26 00 C0 AND   [0x0],0xC0         (0626)     and   [Port_2_Data_SHADE],(~LCD_PORT_MASK | LCD_RW)         ; Lower E signal
0649: 51 00    MOV   A,[0x0]            (0627)     mov   A,[Port_2_Data_SHADE]
064B: 60 08    MOV   REG[0x8],A         (0628)     mov   reg[LCD_Port],A
                                        (0629) 
064D: 18       POP   A                  (0630)     pop   A
064E: 21 08    AND   A,0x8              (0631)     and   A,LCD_READY_BIT                                       ; Check busy
                                        (0632) 
0650: A0 04    JZ    0x0655             (0633)     jz    .UNLOCK
0652: 79       DEC   X                  (0634)     dec   X
0653: BF D3    JNZ   0x0627             (0635)     jnz   .LCD_RDY_LOOP                                         ; If LCD still busy, read again for 255 times
                                        (0636) .UNLOCK:
0655: 20       POP   X                  (0637)     pop   X							                            ; Restore 'X' register
                                        (0638) 
0656: 2E 01 7F OR    [0x1],0x7F         (0639)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE   ; Revert Data bit to Write mode
0659: 51 01    MOV   A,[0x1]            (0640)     mov   A,[Port_2_DriveMode_0_SHADE]
065B: 71 10    OR    F,0x10             
                                        (0641)     M8C_SetBank1
065D: 60 08    MOV   REG[0x8],A         (0642)     mov   reg[LCD_PortMode0],A                        ; Setup LCD Port for writing
065F: 70 EF    AND   F,0xEF             
                                        (0643)     M8C_SetBank0
0661: 18       POP   A                  (0644)     pop   A
                                        (0645)     RAM_EPILOGUE RAM_USE_CLASS_4                                ; Restore Accumulator
0662: 7F       RET                      (0646)     ret
0663: 62 D0 00 MOV   REG[0xD0],0x0      
                                        (0647) .ENDSECTION
                                        (0648) 
                                        (0649) .SECTION
                                        (0650) ;-----------------------------------------------------------------------------
                                        (0651) ;  FUNCTION NAME: LCD_Start
                                        (0652) ;  FUNCTION NAME: LCD_Init
                                        (0653) ;
                                        (0654) ;  DESCRIPTION:
                                        (0655) ;     Initialize LCD
                                        (0656) ;
                                        (0657) ;-----------------------------------------------------------------------------
                                        (0658) ;
                                        (0659) ;  ARGUMENTS: none
                                        (0660) ;
                                        (0661) ;  RETURNS: none
                                        (0662) ;
                                        (0663) ;  SIDE EFFECTS:
                                        (0664) ;    The A and X registers may be modified by this or future implementations
                                        (0665) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0666) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0667) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0668) ;    functions.
                                        (0669) ;          
                                        (0670) ;    Currently only the page pointer registers listed below are modified: 
                                        (0671) ;          CUR_PP
                                        (0672) ;
                                        (0673) ;  THEORY of OPERATION or PROCEDURE:
                                        (0674) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (0675) ;    This initialization is a bit long, but it should work for
                                        (0676) ;    most 2 and 4 line LCDs.
                                        (0677) ;
                                        (0678)  LCD_Start:
                                        (0679) _LCD_Start:
                                        (0680)  LCD_Init:
                                        (0681) _LCD_Init:
                                        (0682)     RAM_PROLOGUE RAM_USE_CLASS_4
                                        (0683)     RAM_SETPAGE_CUR >Port_2_Data_SHADE                          ; Set CUR_PP to LCD variable address
                                        (0684) 
0666: 26 01 80 AND   [0x1],0x80         (0685)     and   [Port_2_DriveMode_0_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
0669: 2E 01 7F OR    [0x1],0x7F         (0686)     or    [Port_2_DriveMode_0_SHADE],LCD_PORT_WRITE             ; Set LCD port for writing
066C: 26 02 80 AND   [0x2],0x80         (0687)     and   [Port_2_DriveMode_1_SHADE],~LCD_PORT_MASK             ; Mask off LCD bits
                                        (0688) 
066F: 51 01    MOV   A,[0x1]            (0689)     mov   A,[Port_2_DriveMode_0_SHADE]
0671: 71 10    OR    F,0x10             
                                        (0690)     M8C_SetBank1
0673: 60 08    MOV   REG[0x8],A         (0691)     mov   reg[LCD_PortMode0],A                                  ; Setup LCD Port for writing
0675: 51 02    MOV   A,[0x2]            (0692)     mov   A,[Port_2_DriveMode_1_SHADE]
0677: 60 09    MOV   REG[0x9],A         (0693)     mov   reg[LCD_PortMode1],A
0679: 70 EF    AND   F,0xEF             
                                        (0694)     M8C_SetBank0
                                        (0695) 
067B: 50 FA    MOV   A,0xFA             (0696)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
067D: 90 67    CALL  _LCD_Delay50uTimes (0697)     call  LCD_Delay50uTimes
067F: 50 FA    MOV   A,0xFA             (0698)     mov   A,250                             ; Delay for 12.5 mSec (250 * 50uSec)
0681: 90 63    CALL  _LCD_Delay50uTimes (0699)     call  LCD_Delay50uTimes
                                        (0700) 
0683: 50 03    MOV   A,0x3              (0701)     mov   A,03h
0685: 9F 40    CALL  0x05C7             (0702)     call  LCD_WCNTL_Nibble
                                        (0703) 
0687: 50 52    MOV   A,0x52             (0704)     mov   A,82                              ; Delay for 4.1 mSec (82 * 50uSec)
0689: 90 5B    CALL  _LCD_Delay50uTimes (0705)     call  LCD_Delay50uTimes
                                        (0706) 
068B: 50 03    MOV   A,0x3              (0707)     mov   A,03h
068D: 9F 38    CALL  0x05C7             (0708)     call  LCD_WCNTL_Nibble
                                        (0709) 
068F: 90 63    CALL  _LCD_Delay50u      (0710)     call  LCD_Delay50u
0691: 90 61    CALL  _LCD_Delay50u      (0711)     call  LCD_Delay50u
0693: 90 5F    CALL  _LCD_Delay50u      (0712)     call  LCD_Delay50u
                                        (0713) 
0695: 50 03    MOV   A,0x3              (0714)     mov   A,03h
0697: 9F 2E    CALL  0x05C7             (0715)     call  LCD_WCNTL_Nibble
                                        (0716) 
0699: 50 5A    MOV   A,0x5A             (0717)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
069B: 90 49    CALL  _LCD_Delay50uTimes (0718)     call  LCD_Delay50uTimes
                                        (0719) 
069D: 50 02    MOV   A,0x2              (0720)     mov   A,02h
069F: 9F 26    CALL  0x05C7             (0721)     call  LCD_WCNTL_Nibble
                                        (0722) 
06A1: 50 5A    MOV   A,0x5A             (0723)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06A3: 90 41    CALL  _LCD_Delay50uTimes (0724)     call  LCD_Delay50uTimes
                                        (0725) 
06A5: 50 08    MOV   A,0x8              (0726)     mov   A,08h
06A7: 9F 0A    CALL  _LCD_Control       (0727)     call  LCD_Control
06A9: 50 5A    MOV   A,0x5A             (0728)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06AB: 90 39    CALL  _LCD_Delay50uTimes (0729)     call  LCD_Delay50uTimes
                                        (0730) 
06AD: 50 01    MOV   A,0x1              (0731)     mov   A,01h
06AF: 9F 02    CALL  _LCD_Control       (0732)     call  LCD_Control
06B1: 50 5A    MOV   A,0x5A             (0733)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06B3: 90 31    CALL  _LCD_Delay50uTimes (0734)     call  LCD_Delay50uTimes
                                        (0735) 
06B5: 50 06    MOV   A,0x6              (0736)     mov   A,06h
06B7: 9E FA    CALL  _LCD_Control       (0737)     call  LCD_Control
                                        (0738) 
06B9: 50 0E    MOV   A,0xE              (0739)     mov   A,0Eh
06BB: 9E F6    CALL  _LCD_Control       (0740)     call  LCD_Control
                                        (0741) 
06BD: 50 2C    MOV   A,0x2C             (0742)     mov   A,LCD_4BIT_2LINE                  ; Setup for 4 bit interface, 2 line
06BF: 9E F2    CALL  _LCD_Control       (0743)     call  LCD_Control
                                        (0744) 
06C1: 50 08    MOV   A,0x8              (0745)     mov   A,LCD_DISP_OFF
06C3: 9E EE    CALL  _LCD_Control       (0746)     call  LCD_Control
                                        (0747) 
06C5: 50 0C    MOV   A,0xC              (0748)     mov   A,LCD_DISP_ON
06C7: 9E EA    CALL  _LCD_Control       (0749)     call  LCD_Control
                                        (0750) 
06C9: 50 03    MOV   A,0x3              (0751)     mov   A,LCD_DISP_INC
06CB: 9E E6    CALL  _LCD_Control       (0752)     call  LCD_Control
                                        (0753) 
06CD: 50 5A    MOV   A,0x5A             (0754)     mov   A,90                              ; Delay for 4.5 mSec (90 * 50uSec)
06CF: 90 15    CALL  _LCD_Delay50uTimes (0755)     call  LCD_Delay50uTimes
                                        (0756)     RAM_EPILOGUE RAM_USE_CLASS_4
06D1: 7F       RET                      (0757)     ret
                                        (0758) .ENDSECTION
                                        (0759) 
                                        (0760) ;-----------------------------------------------------------------------------
                                        (0761) ;  FUNCTION NAME: LCD_Position
                                        (0762) ;
                                        (0763) ;  DESCRIPTION:
                                        (0764) ;     Position Cursor at Row and Col location
                                        (0765) ;
                                        (0766) ;-----------------------------------------------------------------------------
                                        (0767) ;
                                        (0768) ;  ARGUMENTS:
                                        (0769) ;     A => Row  0 to 3
                                        (0770) ;     X => Col  0 to 39+
                                        (0771) ;
                                        (0772) ;  RETURNS:  none
                                        (0773) ;
                                        (0774) ;  SIDE EFFECTS:
                                        (0775) ;    The A and X registers may be modified by this or future implementations
                                        (0776) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0777) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0778) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0779) ;    functions.
                                        (0780) ;
                                        (0781) .LITERAL
                                        (0782) LCD_ROW_OFFSET::
                                        (0783)      DB    LCD_ROW1_OFFSET, LCD_ROW2_OFFSET, LCD_ROW3_OFFSET, LCD_ROW4_OFFSET
                                        (0784) .ENDLITERAL
                                        (0785) 
                                        (0786) .SECTION
                                        (0787)  LCD_Position:
                                        (0788) _LCD_Position:
                                        (0789)     RAM_PROLOGUE RAM_USE_CLASS_2
06D6: 21 03    AND   A,0x3              (0790)     and   A,03h                        ; Mask off 2 bits for row address 0 to 3
06D8: 10       PUSH  X                  (0791)     push  X                            ; Store COL
06D9: FF F7    INDEX LCD_ROW_OFFSET     (0792)     index LCD_ROW_OFFSET ; Get ROW memory offset from table
06DB: 4F       MOV   X,SP               (0793)     mov   X,SP                         ; Get Stack pointer
06DC: 03 FF    ADD   A,[X-1]            (0794)     add   A,[X+(-1)]                   ; Add the COL to the display pointer
06DE: 20       POP   X                  (0795)     pop   X
                                        (0796) 
06DF: 9E D2    CALL  _LCD_Control       (0797)     call  LCD_Control                  ; Write control byte
06E1: 70 3F    AND   F,0x3F             
06E3: 71 C0    OR    F,0xC0             
                                        (0798)     RAM_EPILOGUE RAM_USE_CLASS_2
06E5: 7F       RET                      (0799)     ret
                                        (0800) .ENDSECTION
                                        (0801) 
                                        (0802) .SECTION
                                        (0803) ;-----------------------------------------------------------------------------
                                        (0804) ;  FUNCTION NAME: LCD_Delay50uTimes
                                        (0805) ;
                                        (0806) ;  DESCRIPTION:
                                        (0807) ;     Delay increments of 50uSeconds
                                        (0808) ;
                                        (0809) ;-----------------------------------------------------------------------------
                                        (0810) ;
                                        (0811) ;  ARGUMENTS:
                                        (0812) ;     A contains the delay multiplier
                                        (0813) ;
                                        (0814) ;  RETURNS:
                                        (0815) ;
                                        (0816) ;  SIDE EFFECTS:
                                        (0817) ;    The A and X registers may be modified by this or future implementations
                                        (0818) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0819) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0820) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0821) ;    functions.
                                        (0822) ;
                                        (0823) ;
                                        (0824)  LCD_Delay50uTimes:
                                        (0825) _LCD_Delay50uTimes:
                                        (0826)     RAM_PROLOGUE RAM_USE_CLASS_1
06E6: 90 0C    CALL  _LCD_Delay50u      (0827)     call  LCD_Delay50u
06E8: 78       DEC   A                  (0828)     dec   A
06E9: BF FC    JNZ   _LCD_Delay50uTimes (0829)     jnz   LCD_Delay50uTimes
                                        (0830)     RAM_EPILOGUE RAM_USE_CLASS_1
06EB: 7F       RET                      (0831)     ret
                                        (0832) 
                                        (0833) .ENDSECTION
                                        (0834) 
                                        (0835) ;-----------------------------------------------------------------------------
                                        (0836) ;  FUNCTION NAME: LCD_Delay50u
                                        (0837) ;
                                        (0838) ;  DESCRIPTION:
                                        (0839) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0840) ;     Slower clock frequencies the delay will be;
                                        (0841) ;           1.5
                                        (0842) ;        -------------- * 50uSec
                                        (0843) ;        clock_freq(MHz)
                                        (0844) ;
                                        (0845) ;
                                        (0846) ;-----------------------------------------------------------------------------
                                        (0847) ;
                                        (0848) ;  ARGUMENTS: none
                                        (0849) ;
                                        (0850) ;  RETURNS: none
                                        (0851) ;
                                        (0852) ;  SIDE EFFECTS:
                                        (0853) ;    The A and X registers may be modified by this or future implementations
                                        (0854) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0855) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0856) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0857) ;    functions.
                                        (0858) ;
                                        (0859) ;  THEORY of OPERATION or PROCEDURE:
                                        (0860) ;
                                        (0861) .LITERAL
                                        (0862)  LCD_Delay50u_Table::
                                        (0863)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0864) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0865) .ENDLITERAL
                                        (0866) .SECTION
                                        (0867) 
                                        (0868)   LCD_Delay50u:
                                        (0869)  _LCD_Delay50u:                        ; [11]  Call
                                        (0870)     RAM_PROLOGUE RAM_USE_CLASS_1
06F4: 08       PUSH  A                  (0871)     push  A
06F5: 71 10    OR    F,0x10             
                                        (0872)     M8C_SetBank1                         ; [4]
06F7: 5D E0    MOV   A,REG[0xE0]        (0873)     mov   A, reg[OSC_CR0]                ; [6] Get delay value
06F9: 70 EF    AND   F,0xEF             
                                        (0874)     M8C_SetBank0                         ; [4]
06FB: 21 07    AND   A,0x7              (0875)     and   A,07h                          ; [4] Mask off only the clock bits
06FD: 39 05    CMP   A,0x5              (0876)     cmp   A,05h
06FF: D0 06    JNC   0x0706             (0877)     jnc   .Delay50u_End
0701: FF E9    INDEX LCD_Delay50u_Table (0878)     index LCD_Delay50u_Table ; [13] Get delay value
                                        (0879) .Delay50u_Loop:                          ;
0703: 78       DEC   A                  (0880)     dec   A                              ; [4]
0704: BF FE    JNZ   0x0703             (0881)     jnz   .Delay50u_Loop                 ; [5]
                                        (0882) .Delay50u_End:
0706: 18       POP   A                  (0883)     pop   A
                                        (0884)     RAM_EPILOGUE RAM_USE_CLASS_1
0707: 7F       RET                      (0885)     ret
                                        (0886) .ENDSECTION
                                        (0887) 
                                        (0888) 
                                        (0889) ;-----------------------------------------------------------------------------
                                        (0890) ;      If bargraph is not enabled, the following functions are not required.
                                        (0891) ;-----------------------------------------------------------------------------
                                        (0892) 
                                        (0893) IF (LCD_BARGRAPH_ENABLE)
                                        (0894) 
                                        (0895) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (0896) .SECTION
                                        (0897) ;-----------------------------------------------------------------------------
                                        (0898) ;  FUNCTION NAME: LCD_DrawBG
                                        (0899) ;
                                        (0900) ;  DESCRIPTION:
                                        (0901) ;  This legacy fastcall version are provided only to support existing small
                                        (0902) ;  memory model assembly language code---it does not work in the large memory
                                        (0903) ;  model.
                                        (0904) ;
                                        (0905) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (0906) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (0907) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (0908) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (0909) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (0910) ;
                                        (0911) ;  Draw a horizontal bargraph on the LCD with the given parameters.  This
                                        (0912) ;  is a legacy function that is intended to support existing Assembly
                                        (0913) ;  language programs that call this function.  This should not be used for
                                        (0914) ;  new code or with Large Memory Model programs.
                                        (0915) ;-----------------------------------------------------------------------------
                                        (0916) ;
                                        (0917) ;  LEGACY FASTCALL ARGUMENTS:
                                        (0918) ;    A    => Starting row for bargraph 0 to 3
                                        (0919) ;   [X]   => Starting Column for bargraph 0 to 39+
                                        (0920) ;   [x-1] => Length of bargraph in chars 1 to 40+
                                        (0921) ;   [X-2] => Position of pointer in segments 5 times Length
                                        (0922) ;
                                        (0923) ;
                                        (0924) ;  RETURNS:  none
                                        (0925) ;
                                        (0926) ;  SIDE EFFECTS:
                                        (0927) ;    The A and X registers may be modified by this or future implementations
                                        (0928) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0929) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0930) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0931) ;    functions.
                                        (0932) ;
                                        (0933) ;    If LCD_Init is not called before this function, the
                                        (0934) ;    bargraph will not be drawn properly.
                                        (0935) ;
                                        (0936) ; Stack offset constants
                                        (0937) BG_COLX:       equ  0                   ; Stack position of Column
                                        (0938) BG_CHAR_LENX:  equ -1                   ; Stack position of Length
                                        (0939) BG_LENGTHX:    equ -2                   ; Stack position of bargraph pointer position
                                        (0940) 
                                        (0941) 
                                        (0942) LCD_DrawBG:
                                        (0943)     push  X
                                        (0944)     mov   X,[X+BG_COLX]                 ; Row in A, Col in X
                                        (0945)     call  LCD_Position                 ; Set cursor position
                                        (0946)     pop   X                             ; Restore pointer
                                        (0947) 
                                        (0948) .LCD_BG_LOOP1X:
                                        (0949)     cmp   [X+BG_LENGTHX],00h            ; Check for past end of BG
                                        (0950)     jnz   .LCD_CHECK1X
                                        (0951)     mov   A,00h                         ; Load empty character
                                        (0952)     jmp   .LCD_BG_DOITX                 ;
                                        (0953) 
                                        (0954) .LCD_CHECK1X:
                                        (0955)     cmp   [X+BG_LENGTHX],06h            ; Check if BG pointer is at this character
                                        (0956)     jnc   .LCD_CHECK2X                  ; Note yet, use full character
                                        (0957)     mov   A,[X+BG_LENGTHX]
                                        (0958)     sub   [X+BG_LENGTHX],A
                                        (0959)     jmp   .LCD_BG_DOITX
                                        (0960) 
                                        (0961) .LCD_CHECK2X:                           ; Put index to full character
                                        (0962)     mov   A, 06h
                                        (0963)     sub   [X+BG_LENGTHX],05h            ; Subtract another 5 positions
                                        (0964) 
                                        (0965) .LCD_BG_DOITX:
                                        (0966)     call  LCD_WriteData                ; Display BG character
                                        (0967) 
                                        (0968)     dec   [X+BG_CHAR_LENX]              ; Dec Char count
                                        (0969)     jnz   .LCD_BG_LOOP1X                ; Do it all over again
                                        (0970)     ret
                                        (0971) .ENDSECTION
                                        (0972) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (0973) 
                                        (0974) .SECTION
                                        (0975) ;-----------------------------------------------------------------------------
                                        (0976) ;  FUNCTION NAME: LCD_DrawBG
                                        (0977) ;
                                        (0978) ;  DESCRIPTION:
                                        (0979) ;     Draw a horizontal bargraph on the LCD with the given parameters.
                                        (0980) ;
                                        (0981) ;
                                        (0982) ;-----------------------------------------------------------------------------
                                        (0983) ;
                                        (0984) ;  FASTCALL16 ARGUMENTS:
                                        (0985) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (0986) ;   [SP-4] => Starting Column for bargraph 0 to 39+
                                        (0987) ;   [SP-5] => Length of bargraph in chars 1 to 40+
                                        (0988) ;   [SP-6] => Position of pointer in segments 5 times Length
                                        (0989) ;
                                        (0990) ;
                                        (0991) ;  RETURNS:  none
                                        (0992) ;
                                        (0993) ;  SIDE EFFECTS:
                                        (0994) ;    The A and X registers may be modified by this or future implementations
                                        (0995) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0996) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0997) ;    responsibility to preserve their values across calls to fastcall16 
                                        (0998) ;    functions.
                                        (0999) ;          
                                        (1000) ;    Currently only the page pointer registers listed below are modified: 
                                        (1001) ;          CUR_PP
                                        (1002) ;
                                        (1003) ;    If LCD_Init is not called before this function, the
                                        (1004) ;    bargraph will not be drawn properly.
                                        (1005) ;
                                        (1006) ; Stack offset constants
                                        (1007) BG_ROW:       equ -3
                                        (1008) BG_COL:       equ -4                   ; Stack position of Column
                                        (1009) BG_CHAR_LEN:  equ -5                   ; Stack position of Length
                                        (1010) BG_LENGTH:    equ -6                   ; Stack position of bargraph pointer position
                                        (1011) 
                                        (1012) 
                                        (1013) _LCD_DrawBG:
                                        (1014)     RAM_PROLOGUE RAM_USE_CLASS_2
0708: 4F       MOV   X,SP               (1015)     mov   X, SP
0709: 10       PUSH  X                  (1016)     push  X
070A: 52 FD    MOV   A,[X-3]            (1017)     mov   A,[X+BG_ROW]                 ; Row in A
070C: 59 FC    MOV   X,[X-4]            (1018)     mov   X,[X+BG_COL]                 ; Col in X
070E: 70 3F    AND   F,0x3F             
0710: 71 C0    OR    F,0xC0             
                                        (1019)     RAM_EPILOGUE RAM_USE_CLASS_2
0712: 9F C2    CALL  _LCD_Position      (1020)     call  LCD_Position                 ; Set cursor position
                                        (1021)     RAM_PROLOGUE RAM_USE_CLASS_2
0714: 20       POP   X                  (1022)     pop  X
                                        (1023) 
                                        (1024) .LCD_BG_LOOP1:
0715: 3D FA 00 CMP   [X-6],0x0          (1025)     cmp   [X+BG_LENGTH],00h            ; Check for past end of BG
0718: B0 05    JNZ   0x071E             (1026)     jnz   .LCD_CHECK1
071A: 50 00    MOV   A,0x0              (1027)     mov   A,00h                        ; Load empty character
071C: 80 11    JMP   0x072E             (1028)     jmp   .LCD_BG_DOIT                  ;
                                        (1029) 
                                        (1030) .LCD_CHECK1:
071E: 3D FA 06 CMP   [X-6],0x6          (1031)     cmp   [X+BG_LENGTH],06h            ; Check if BG pointer is at this character
0721: D0 07    JNC   0x0729             (1032)     jnc   .LCD_CHECK2                   ; Note yet, use full character
0723: 52 FA    MOV   A,[X-6]            (1033)     mov   A,[X+BG_LENGTH]
0725: 15 FA    SUB   [X-6],A            (1034)     sub   [X+BG_LENGTH],A
0727: 80 06    JMP   0x072E             (1035)     jmp   .LCD_BG_DOIT
                                        (1036) 
                                        (1037) .LCD_CHECK2:                            ; Put index to full character
0729: 50 06    MOV   A,0x6              (1038)     mov   A, 06h
072B: 17 FA 05 SUB   [X-6],0x5          (1039)     sub   [X+BG_LENGTH],05h            ; Subtract another 5 positions
                                        (1040) 
                                        (1041) .LCD_BG_DOIT:
072E: 9E 6F    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(1042)     call  LCD_WriteData                ; Display BG character
                                        (1043) 
0730: 7B FB    DEC   [X-5]              (1044)     dec   [X+BG_CHAR_LEN]              ; Dec Char count
0732: BF E2    JNZ   0x0715             (1045)     jnz   .LCD_BG_LOOP1                 ; Do it all over again
0734: 70 3F    AND   F,0x3F             
0736: 71 C0    OR    F,0xC0             
                                        (1046)     RAM_EPILOGUE RAM_USE_CLASS_2
0738: 7F       RET                      (1047)     ret
                                        (1048) .ENDSECTION
                                        (1049) 
                                        (1050) IF SYSTEM_SMALL_MEMORY_MODEL
                                        (1051) .SECTION
                                        (1052) ;-----------------------------------------------------------------------------
                                        (1053) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1054) ;
                                        (1055) ;  DESCRIPTION:
                                        (1056) ;  This legacy fastcall version are provided only to support existing small
                                        (1057) ;  memory model assembly language code---it does not work in the large memory
                                        (1058) ;  model.
                                        (1059) ;
                                        (1060) ;  ** This legacy fastcall version is provided on a temporary basis to
                                        (1061) ;  ** ease the transition to the 4.2 release of PSoC Designer. Its use is
                                        (1062) ;  ** deprecated and its status is "No Further Maintenance". If you call this
                                        (1063) ;  ** function in assembly you should convert to _LCD_DrawVBG
                                        (1064) ;  ** (with a leading underscore) and the fastcall16 interface
                                        (1065) ;
                                        (1066) ;  Draw a vertical bargraph on the LCD with the given parameters. This
                                        (1067) ;  is a legacy function that is intended to support existing Assembly
                                        (1068) ;  language programs that call this function.  This should not be used for
                                        (1069) ;  new code or with Large Memory Model programs.
                                        (1070) ;-----------------------------------------------------------------------------
                                        (1071) ;
                                        (1072) ;  LEGACY FASTCALL ARGUMENTS:
                                        (1073) ;    A    => Starting row for bargraph 0 to 3
                                        (1074) ;   [X]   => Starting Column for bargraph 0 to 40+
                                        (1075) ;   [x-1] => Height of bargraph in chars 1 - 4
                                        (1076) ;   [X-2] => Position of pointer in segments 8 times height
                                        (1077) ;  RETURNS:
                                        (1078) ;
                                        (1079) ;  SIDE EFFECTS:
                                        (1080) ;    The A and X registers may be modified by this or future implementations
                                        (1081) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1082) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1083) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1084) ;    functions.
                                        (1085) ;    
                                        (1086) ;    If LCD_Init is not called before this function, the
                                        (1087) ;    bargraph will not be drawn properly.
                                        (1088) ;
                                        (1089) ; Stack offset constants
                                        (1090) VBG_COLX:            equ  0
                                        (1091) VBG_CHAR_HEIGHTX:    equ -1
                                        (1092) VBG_SEG_HEIGHTX:     equ -2
                                        (1093) 
                                        (1094) LCD_DrawVBG:
                                        (1095) 
                                        (1096)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1097) .VBG_LOOPX:
                                        (1098)     push  A
                                        (1099)     index LCD_ROW_OFFSET  ; Get row offset
                                        (1100)     add   A,[X+VBG_COLX]                ; Add column offset to position
                                        (1101)     call  LCD_Control                  ; Position Cursor
                                        (1102)     cmp   [X+VBG_SEG_HEIGHTX],00h       ; Check for zero segs
                                        (1103)     jnz   .VBG_NZ_SEGX
                                        (1104)     mov   A,' '                        ; Load space character
                                        (1105)     jmp   .VBG_WRITE_CHARX
                                        (1106) .VBG_NZ_SEGX:
                                        (1107)     cmp   [X+VBG_SEG_HEIGHTX],09h       ; Check for full segment
                                        (1108)     jnc   .VBG_FULL_SEGX
                                        (1109)                                         ; Partial segment between 1 and 8
                                        (1110)     mov   A,[X+VBG_SEG_HEIGHTX]
                                        (1111)     dec   A
                                        (1112)     mov   [X+VBG_SEG_HEIGHTX],00h       ; Zero segment height
                                        (1113)     jmp   .VBG_WRITE_CHARX
                                        (1114) 
                                        (1115) .VBG_FULL_SEGX:                          ; Bargaph
                                        (1116)     sub   [X+VBG_SEG_HEIGHTX],08h       ; Subtract full segment
                                        (1117)     mov   A,07h                        ; Load full segment
                                        (1118) 
                                        (1119) .VBG_WRITE_CHARX:                        ; Write character to display
                                        (1120)     call  LCD_WriteData                ; Write value
                                        (1121)     pop   A
                                        (1122)     dec   A
                                        (1123)     dec   [X+VBG_CHAR_HEIGHTX]
                                        (1124)     jnz   .VBG_LOOPX
                                        (1125)     ret
                                        (1126) .ENDSECTION
                                        (1127) ENDIF ; SYSTEM_SMALL_MEMORY_MODEL
                                        (1128) 
                                        (1129) .SECTION
                                        (1130) ;-----------------------------------------------------------------------------
                                        (1131) ;  FUNCTION NAME: LCD_DrawVBG
                                        (1132) ;
                                        (1133) ;  DESCRIPTION:
                                        (1134) ;     Draw a vertical bargraph on the LCD with the given parameters.
                                        (1135) ;
                                        (1136) ;
                                        (1137) ;-----------------------------------------------------------------------------
                                        (1138) ;
                                        (1139) ;  FASTCALL16 ARGUMENTS:
                                        (1140) ;
                                        (1141) ;   [SP-3] => Starting row for bargraph 0 to 3
                                        (1142) ;   [SP-4] => Starting Column for bargraph 0 to 40+
                                        (1143) ;   [SP-5] => Height of bargraph in chars 1 - 4
                                        (1144) ;   [SP-6] => Position of pointer in segments 8 times height
                                        (1145) ;  RETURNS:
                                        (1146) ;
                                        (1147) ;  SIDE EFFECTS:
                                        (1148) ;    The A and X registers may be modified by this or future implementations
                                        (1149) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1150) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1151) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1152) ;    functions.
                                        (1153) ;          
                                        (1154) ;    Currently only the page pointer registers listed below are modified: 
                                        (1155) ;          CUR_PP
                                        (1156) ;
                                        (1157) ;    If LCD_Init is not called before this function, the
                                        (1158) ;    bargraph will not be drawn properly.
                                        (1159) ;
                                        (1160) ; Stack offset constants
                                        (1161) VBG_ROW:        equ -3
                                        (1162) VBG_COL:            equ -4
                                        (1163) VBG_CHAR_HEIGHT:    equ -5
                                        (1164) VBG_SEG_HEIGHT:     equ -6
                                        (1165) 
                                        (1166) _LCD_DrawVBG:
                                        (1167)     RAM_PROLOGUE RAM_USE_CLASS_2
0739: 4F       MOV   X,SP               (1168)     mov   X, SP
073A: 52 FD    MOV   A,[X-3]            (1169)     mov   A, [X+VBG_ROW]
073C: 21 03    AND   A,0x3              (1170)     and   A,03h                        ; Make sure only rows 0 - 3 are valid
                                        (1171) .VBG_LOOP:
073E: 08       PUSH  A                  (1172)     push  A
073F: FF 91    INDEX LCD_ROW_OFFSET     (1173)     index LCD_ROW_OFFSET  ; Get row offset
0741: 03 FC    ADD   A,[X-4]            (1174)     add   A,[X+VBG_COL]                ; Add column offset to position
0743: 9E 6E    CALL  _LCD_Control       (1175)     call  LCD_Control                  ; Position Cursor
0745: 3D FA 00 CMP   [X-6],0x0          (1176)     cmp   [X+VBG_SEG_HEIGHT],00h       ; Check for zero segs
0748: B0 05    JNZ   0x074E             (1177)     jnz   .VBG_NZ_SEG
074A: 50 20    MOV   A,0x20             (1178)     mov   A,' '                        ; Load space character
074C: 80 13    JMP   0x0760             (1179)     jmp   .VBG_WRITE_CHAR
                                        (1180) .VBG_NZ_SEG:
074E: 3D FA 09 CMP   [X-6],0x9          (1181)     cmp   [X+VBG_SEG_HEIGHT],09h       ; Check for full segment
0751: D0 09    JNC   0x075B             (1182)     jnc   .VBG_FULL_SEG
                                        (1183)                                        ; Partial segment between 1 and 8
0753: 52 FA    MOV   A,[X-6]            (1184)     mov   A,[X+VBG_SEG_HEIGHT]
0755: 78       DEC   A                  (1185)     dec   A
0756: 56 FA 00 MOV   [X-6],0x0          (1186)     mov   [X+VBG_SEG_HEIGHT],00h       ; Zero segment height
0759: 80 06    JMP   0x0760             (1187)     jmp   .VBG_WRITE_CHAR
                                        (1188) 
                                        (1189) .VBG_FULL_SEG:                          ; Bargaph
075B: 17 FA 08 SUB   [X-6],0x8          (1190)     sub   [X+VBG_SEG_HEIGHT],08h       ; Subtract full segment
075E: 50 07    MOV   A,0x7              (1191)     mov   A,07h                        ; Load full segment
                                        (1192) 
                                        (1193) .VBG_WRITE_CHAR:                        ; Write character to display
0760: 9E 3D    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(1194)     call  LCD_WriteData                ; Write value
0762: 18       POP   A                  (1195)     pop   A
0763: 78       DEC   A                  (1196)     dec   A
0764: 7B FB    DEC   [X-5]              (1197)     dec   [X+VBG_CHAR_HEIGHT]
0766: BF D7    JNZ   0x073E             (1198)     jnz   .VBG_LOOP
0768: 70 3F    AND   F,0x3F             
076A: 71 C0    OR    F,0xC0             
                                        (1199)     RAM_EPILOGUE RAM_USE_CLASS_2
076C: 7F       RET                      (1200)     ret
                                        (1201) .ENDSECTION
                                        (1202) 
                                        (1203) .SECTION
                                        (1204) ;-----------------------------------------------------------------------------
                                        (1205) ;  FUNCTION NAME: LCD_InitVBG
                                        (1206) ;
                                        (1207) ;  DESCRIPTION:
                                        (1208) ;     Initialize the vertical bargraph characters.
                                        (1209) ;
                                        (1210) ;-----------------------------------------------------------------------------
                                        (1211) ;
                                        (1212) ;  ARGUMENTS:  none
                                        (1213) ;
                                        (1214) ;  RETURNS:  none
                                        (1215) ;
                                        (1216) ;  SIDE EFFECTS:
                                        (1217) ;    REGISTERS ARE VOLATILE: THE A AND X REGISTERS MAY BE MODIFIED!
                                        (1218) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1219) ;    at a time since they each require their own set of characters.
                                        (1220) ;
                                        (1221) ;  SIDE EFFECTS:
                                        (1222) ;    The A and X registers may be modified by this or future implementations
                                        (1223) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1224) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1225) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1226) ;    functions.
                                        (1227) ;          
                                        (1228) ;    Currently only the page pointer registers listed below are modified: 
                                        (1229) ;          CUR_PP
                                        (1230) ;
                                        (1231) ; Stack offset constants
                                        (1232) VBGDATA_CTR:      equ    00h           ; Char data count stack offset
                                        (1233) VBG_BYTES:        equ    01h           ; Byte counter stack offset
                                        (1234) 
                                        (1235)  LCD_InitVBG:
                                        (1236) _LCD_InitVBG:
                                        (1237)     RAM_PROLOGUE RAM_USE_CLASS_2
076D: 4F       MOV   X,SP               (1238)     mov   X,SP                         ; Get location of stack
076E: 08       PUSH  A                  (1239)     push  A                            ; Create 2 locations
076F: 08       PUSH  A                  (1240)     push  A
                                        (1241) 
0770: 50 40    MOV   A,0x40             (1242)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
0772: 9E 3F    CALL  _LCD_Control       (1243)     call  LCD_Control                  ; Position the CG pointer
0774: 56 00 01 MOV   [X+0],0x1          (1244)     mov   [X+VBGDATA_CTR],01h          ; Reset data counter
                                        (1245) 
                                        (1246)  .VBG_Loop1:                            ; loop once for each 8 characters
0777: 56 01 08 MOV   [X+1],0x8          (1247)     mov   [X+VBG_BYTES],08h            ; Load cycle pointer
                                        (1248)  .VBG_Loop2:                            ; Loop once for each line in character (8 times)
077A: 52 00    MOV   A,[X+0]            (1249)     mov   A,[X+VBGDATA_CTR]
077C: 3B 01    CMP   A,[X+1]            (1250)     cmp   A,[X+VBG_BYTES]
077E: D0 05    JNC   0x0784             (1251)     jnc   .VBG_SOLID
0780: 50 00    MOV   A,0x0              (1252)     mov   A,00h                        ; Empty line
0782: 80 03    JMP   0x0786             (1253)     jmp   .VBG_Load                     ; Jump to load the bargraph
                                        (1254) .VBG_SOLID:
0784: 50 FF    MOV   A,0xFF             (1255)     mov   A,FFh                        ; Load solid line
                                        (1256) .VBG_Load:
0786: 9E 17    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(1257)     call  LCD_WriteData                ; character data
0788: 7B 01    DEC   [X+1]              (1258)     dec   [X+VBG_BYTES]                ; Dec byte counter
078A: BF EF    JNZ   0x077A             (1259)     jnz   .VBG_Loop2                    ; End Loop 2
078C: 77 00    INC   [X+0]              (1260)     inc   [X+VBGDATA_CTR]
078E: 3D 00 09 CMP   [X+0],0x9          (1261)     cmp   [X+VBGDATA_CTR],09h
0791: BF E5    JNZ   0x0777             (1262)     jnz   .VBG_Loop1                    ; End Loop1
                                        (1263) 
0793: 18       POP   A                  (1264)     pop  A
0794: 18       POP   A                  (1265)     pop  A
0795: 50 0C    MOV   A,0xC              (1266)     mov  A,LCD_DISP_ON                    ; Turn on display, don't really
0797: 9E 1A    CALL  _LCD_Control       (1267)     call LCD_Control                   ; need this.
0799: 70 3F    AND   F,0x3F             
079B: 71 C0    OR    F,0xC0             
                                        (1268)     RAM_EPILOGUE RAM_USE_CLASS_2
079D: 7F       RET                      (1269)     ret
                                        (1270) .ENDSECTION
                                        (1271) 
                                        (1272) ;-----------------------------------------------------------------------------
                                        (1273) ;  FUNCTION NAME: LCD_InitBG
                                        (1274) ;
                                        (1275) ;  DESCRIPTION:
                                        (1276) ;     Initialize horizontal bargraph characters
                                        (1277) ;
                                        (1278) ;-----------------------------------------------------------------------------
                                        (1279) ;
                                        (1280) ;  ARGUMENTS:
                                        (1281) ;     A = type  0 = full                   |||||||||........
                                        (1282) ;               1 = single vertical line   ..........|......
                                        (1283) ;
                                        (1284) ;  RETURNS:
                                        (1285) ;
                                        (1286) ;  SIDE EFFECTS:
                                        (1287) ;    The A and X registers may be modified by this or future implementations
                                        (1288) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (1289) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (1290) ;    responsibility to preserve their values across calls to fastcall16 
                                        (1291) ;    functions.
                                        (1292) ;          
                                        (1293) ;    Currently only the page pointer registers listed below are modified: 
                                        (1294) ;          CUR_PP
                                        (1295) ;
                                        (1296) ;    Only one type of bargraph (horizontal or vertical) may be used
                                        (1297) ;    at a time since they each require their own set of characters.
                                        (1298) ;
                                        (1299) ;  THEORY of OPERATION or PROCEDURE:
                                        (1300) ;    This function writes to the LCD character RAM to generate 8 custom
                                        (1301) ;    characters used to generated one of two horizontal bargraphs.
                                        (1302) ;
                                        (1303) .LITERAL
                                        (1304)  LCD_BG_TYPE1:: ; ....., |...., ||..., |||.., ||||., |||||, |||||
                                        (1305)      DB    00h, 10h, 18h, 1Ch, 1Eh, 1Fh, 1Fh
                                        (1306)  LCD_BG_TYPE2:: ; ....., |...., .|..., ..|.., ...|., ....|, .....
                                        (1307)     DB  00h, 10h, 08h, 04h, 02h, 01h, 00h
                                        (1308) .ENDLITERAL
                                        (1309) 
                                        (1310) .SECTION
                                        (1311) ; Stack offset constants
                                        (1312) BGDATA_PTR:   equ    00h               ; Stack offsets
                                        (1313) BGCHARS:      equ    01h
                                        (1314) BGTYPE:       equ    02h
                                        (1315) 
                                        (1316)  LCD_InitBG:
                                        (1317) _LCD_InitBG:
                                        (1318)     RAM_PROLOGUE RAM_USE_CLASS_2
07AC: 4F       MOV   X,SP               (1319)     mov   X,SP                         ; Get location of stack
07AD: 38 03    ADD   SP,0x3             (1320)     add   SP,3
07AF: 54 02    MOV   [X+2],A            (1321)     mov   [X+BGTYPE],A                 ; Store the bargraph type
                                        (1322) 
07B1: 50 40    MOV   A,0x40             (1323)     mov   A,LCD_CG_RAM_OFFSET              ; Setup pointer
07B3: 9D FE    CALL  _LCD_Control       (1324)     call  LCD_Control                  ; Position the CG pointer
07B5: 56 00 00 MOV   [X+0],0x0          (1325)     mov   [X+BGDATA_PTR],00h           ; Reset pointer to BG data
                                        (1326) 
                                        (1327)  .BG_Loop1:
07B8: 56 01 08 MOV   [X+1],0x8          (1328)     mov   [X+BGCHARS],08h              ; Load cycle pointer
                                        (1329)  .BG_Loop2:
07BB: 52 00    MOV   A,[X+0]            (1330)     mov   A,[X+BGDATA_PTR]
07BD: 3D 02 00 CMP   [X+2],0x0          (1331)     cmp   [X+BGTYPE],00h               ; Check which bargraph
07C0: B0 05    JNZ   0x07C6             (1332)     jnz   .BG_OTHER
07C2: FF DA    INDEX LCD_BG_TYPE1       (1333)     index LCD_BG_TYPE1
07C4: 80 03    JMP   0x07C8             (1334)     jmp   .BG_Load
                                        (1335)  .BG_OTHER:
07C6: FF DD    INDEX LCD_BG_TYPE2       (1336)     index LCD_BG_TYPE2
                                        (1337)  .BG_Load:
07C8: 9D D5    CALL  LCD_WriteData|LCD_Write_Data|_LCD_WriteData|_LCD_Write_Data(1338)     call  LCD_WriteData
07CA: 7B 01    DEC   [X+1]              (1339)     dec   [X+BGCHARS]                  ; Character builder counter
07CC: BF EE    JNZ   0x07BB             (1340)     jnz   .BG_Loop2
07CE: 77 00    INC   [X+0]              (1341)     inc   [X+BGDATA_PTR]               ; Advance to next character
07D0: 3D 00 07 CMP   [X+0],0x7          (1342)     cmp   [X+BGDATA_PTR],07h
07D3: BF E4    JNZ   0x07B8             (1343)     jnz   .BG_Loop1
                                        (1344) 
07D5: 38 FD    ADD   SP,0xFD            (1345)     add   SP,-3
07D7: 50 0C    MOV   A,0xC              (1346)     mov   A,LCD_DISP_ON
07D9: 9D D8    CALL  _LCD_Control       (1347)     call  LCD_Control
07DB: 70 3F    AND   F,0x3F             
07DD: 71 C0    OR    F,0xC0             
                                        (1348)     RAM_EPILOGUE RAM_USE_CLASS_2
07DF: 7F       RET                      (1349)     ret
                                        (1350) .ENDSECTION
                                        (1351) 
                                        (1352) ENDIF
                                        (1353) 
                                        (1354) ; End of File LCD.asm
FILE: .\delay.asm                       (0001) ;;*****************************************************************************
                                        (0002) ;;*****************************************************************************
                                        (0003) ;;  FILENAME: delay.asm
                                        (0004) ;;
                                        (0005) ;;  DESCRIPTION: Delay functions implementation file
                                        (0006) ;;
                                        (0007) ;;-----------------------------------------------------------------------------
                                        (0008) ;;  Copyright (c) Cypress MicroSystems 2002-2006. All Rights Reserved.
                                        (0009) ;;*****************************************************************************
                                        (0010) ;;*****************************************************************************
                                        (0011) 
                                        (0012) ;-----------------------------------------------------------------------------
                                        (0013) ;  Include Files
                                        (0014) ;-----------------------------------------------------------------------------
                                        (0015) include "m8c.inc"
                                        (0016) include "memory.inc"
                                        (0017) 
                                        (0018) ;-----------------------------------------------------------------------------
                                        (0019) ;  Global Symbols
                                        (0020) ;-----------------------------------------------------------------------------
                                        (0021) export  Delay50uTimes
                                        (0022) export _Delay50uTimes
                                        (0023) 
                                        (0024) export  Delay50u
                                        (0025) export _Delay50u
                                        (0026) 
                                        (0027) export  Delay10msTimes
                                        (0028) export _Delay10msTimes
                                        (0029) 
                                        (0030) 
                                        (0031) area text(rom)
                                        (0032) .SECTION
                                        (0033) ;-----------------------------------------------------------------------------
                                        (0034) ;  FUNCTION NAME: DelaySeconds
                                        (0035) ;
                                        (0036) ;  DESCRIPTION:
                                        (0037) ;     Delay increments of 10mSeconds
                                        (0038) ;
                                        (0039) ;-----------------------------------------------------------------------------
                                        (0040) ;
                                        (0041) ;  ARGUMENTS:
                                        (0042) ;     A contains the delay multiplier
                                        (0043) ;
                                        (0044) ;  RETURNS:
                                        (0045) ;
                                        (0046) ;  SIDE EFFECTS:
                                        (0047) ;    The A and X registers may be modified by this or future implementations
                                        (0048) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0049) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0050) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0051) ;    functions.
                                        (0052) 
                                        (0053) 
                                        (0054)  Delay10msTimes:
                                        (0055) _Delay10msTimes:
                                        (0056)     RAM_PROLOGUE RAM_USE_CLASS_1
07E0: 08       PUSH  A                  (0057) 	push A
                                        (0058) 
07E1: 50 C8    MOV   A,0xC8             (0059) 	mov A, 200
                                        (0060) 	DELAY50US:
07E3: 90 16    CALL  _Delay50u          (0061)     call  Delay50u
07E5: 78       DEC   A                  (0062)     dec   A
07E6: BF FC    JNZ   0x07E3             (0063)     jnz   DELAY50US
                                        (0064) 
07E8: 18       POP   A                  (0065) 	pop A
07E9: 78       DEC   A                  (0066) 	dec   A
07EA: BF F5    JNZ   __UserModules_end|__text_start|Delay10msTimes|_Delay10msTimes(0067)     jnz   Delay10msTimes
                                        (0068) 
                                        (0069)     RAM_EPILOGUE RAM_USE_CLASS_1
07EC: 7F       RET                      (0070)     ret
                                        (0071) .ENDSECTION
                                        (0072) 
                                        (0073) 
                                        (0074) 
                                        (0075) 
                                        (0076) .SECTION
                                        (0077) ;-----------------------------------------------------------------------------
                                        (0078) ;  FUNCTION NAME: Delay50uTimes
                                        (0079) ;
                                        (0080) ;  DESCRIPTION:
                                        (0081) ;     Delay increments of 50uSeconds
                                        (0082) ;
                                        (0083) ;-----------------------------------------------------------------------------
                                        (0084) ;
                                        (0085) ;  ARGUMENTS:
                                        (0086) ;     A contains the delay multiplier
                                        (0087) ;
                                        (0088) ;  RETURNS:
                                        (0089) ;
                                        (0090) ;  SIDE EFFECTS:
                                        (0091) ;    The A and X registers may be modified by this or future implementations
                                        (0092) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0093) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0094) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0095) ;    functions.
                                        (0096) ;
                                        (0097) ;
                                        (0098) 
                                        (0099)  Delay50uTimes:
                                        (0100) _Delay50uTimes:
                                        (0101)     RAM_PROLOGUE RAM_USE_CLASS_1
                                        (0102) 
07ED: 90 0C    CALL  _Delay50u          (0103)     call  Delay50u
07EF: 78       DEC   A                  (0104) 	dec A
07F0: BF FC    JNZ   _Delay50uTimes     (0105)     jnz   Delay50uTimes
                                        (0106) 
                                        (0107) 	
                                        (0108)     RAM_EPILOGUE RAM_USE_CLASS_1
07F2: 7F       RET                      (0109)     ret
                                        (0110) 
                                        (0111) .ENDSECTION
                                        (0112) 
                                        (0113) ;-----------------------------------------------------------------------------
                                        (0114) ;  FUNCTION NAME: Delay50u
                                        (0115) ;
                                        (0116) ;  DESCRIPTION:
                                        (0117) ;     Delay 50uSec for any clock frequency from 1.5MHz to 24MHz
                                        (0118) ;     Slower clock frequencies the delay will be;
                                        (0119) ;           1.5
                                        (0120) ;        -------------- * 50uSec
                                        (0121) ;        clock_freq(MHz)
                                        (0122) ;
                                        (0123) ;
                                        (0124) ;-----------------------------------------------------------------------------
                                        (0125) ;
                                        (0126) ;  ARGUMENTS: none
                                        (0127) ;
                                        (0128) ;  RETURNS: none
                                        (0129) ;
                                        (0130) ;  SIDE EFFECTS:
                                        (0131) ;    The A and X registers may be modified by this or future implementations
                                        (0132) ;    of this function.  The same is true for all RAM page pointer registers in
                                        (0133) ;    the Large Memory Model.  When necessary, it is the calling function's
                                        (0134) ;    responsibility to perserve their values across calls to fastcall16 
                                        (0135) ;    functions.
                                        (0136) ;
                                        (0137) ;  THEORY of OPERATION or PROCEDURE:
                                        (0138) ;
                                        (0139) .LITERAL
                                        (0140)  Delay50u_Table::
                                        (0141)      DB    08h,  19h,   3Ah,   7Ch,   01h,    01h,    01h,   01h
                                        (0142) ;         3MHz, 6MHz, 12MHz, 24MHz, 1.5MHz, 750kHz, 188kHz, 94kHz
                                        (0143) .ENDLITERAL
                                        (0144) .SECTION
                                        (0145) 
                                        (0146)   Delay50u:
                                        (0147)  _Delay50u:                      ; [11]  Call
                                        (0148)     RAM_PROLOGUE RAM_USE_CLASS_1
07FB: 08       PUSH  A                  (0149)     push  A
07FC: 71 10    OR    F,0x10             
                                        (0150)     M8C_SetBank1                       ; [4]
07FE: 5D E0    MOV   A,REG[0xE0]        (0151)     mov   A, reg[OSC_CR0]              ; [6] Get delay value
0800: 70 EF    AND   F,0xEF             
                                        (0152)     M8C_SetBank0                       ; [4]
0802: 21 07    AND   A,0x7              (0153)     and   A,07h                        ; [4] Mask off only the clock bits
0804: 39 05    CMP   A,0x5              (0154)     cmp   A,05h
0806: D0 06    JNC   0x080D             (0155)     jnc   Delay50u_End
0808: FF E9    INDEX Delay50u_Table     (0156)     index Delay50u_Table               ; [13] Get delay value
                                        (0157) Delay50u_Loop:                         ;
080A: 78       DEC   A                  (0158)     dec   A                            ; [4]
080B: BF FE    JNZ   0x080A             (0159)     jnz   Delay50u_Loop                ; [5]
                                        (0160) Delay50u_End:
080D: 18       POP   A                  (0161)     pop   A
                                        (0162)     RAM_EPILOGUE RAM_USE_CLASS_1
080E: 7F       RET                      (0163)     ret
FILE: C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
(0001) //----------------------------------------------------------------------------
(0002) // C main line
(0003) //----------------------------------------------------------------------------
(0004) 
(0005) #include <m8c.h>        // part specific constants and macros
(0006) #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
(0007) #include "delay.h"
(0008) 
(0009) #define DEBUG
(0010) 
(0011) #define POWER_MAX	14000
(0012) #define POWER_STEP	1
(0013) 
(0014) #define UPDATE_PERIOD		2
(0015) 
(0016) unsigned int power_target = 0;
(0017) 
(0018) void set_power(unsigned int pwr);
(0019) void update_power(void);
(0020) 
(0021) void main(void)
(0022) {
_main:
    080F: 10       PUSH  X
    0810: 4F       MOV   X,SP
    0811: 38 02    ADD   SP,0x2
(0023) 	// M8C_EnableGInt ; // Uncomment this line to enable Global Interrupts
(0024) 	// Insert your main routine code here.
(0025) 	RTC_SetHour(0x08);
    0813: 10       PUSH  X
    0814: 50 08    MOV   A,0x8
    0816: 7C 04 7F LCALL _RTC_SetHour
(0026) 	RTC_SetMinute(0x00);
    0819: 50 00    MOV   A,0x0
    081B: 7C 04 67 LCALL _RTC_SetMinute
(0027) 	RTC_SetSecond(0x00);
    081E: 50 00    MOV   A,0x0
    0820: 7C 04 4F LCALL _RTC_SetSecond
(0028) 	RTC_Start();
    0823: 7C 04 14 LCALL _RTC_Start
(0029) 	PWM16_CH0_Start();
    0826: 7C 04 FD LCALL _PWM16_CH0_Start
(0030) 	PWM16_CH1_Start();
    0829: 7C 04 A0 LCALL _PWM16_CH1_Start
(0031) #ifdef DEBUG
(0032) 	LCD_Init();
    082C: 7C 06 63 LCALL _LCD_Init|LCD_Start|_LCD_Start
    082F: 20       POP   X
(0033) #endif // DEBUG
(0034) 		
(0035) 	set_power(POWER_MAX);
    0830: 50 36    MOV   A,0x36
    0832: 08       PUSH  A
    0833: 50 B0    MOV   A,0xB0
    0835: 08       PUSH  A
    0836: 90 B6    CALL  _set_power
    0838: 38 FE    ADD   SP,0xFE
    083A: 80 AC    JMP   0x08E7
(0036) 	
(0037) 	while (1)
(0038) 	{
(0039) 		// Scheduler
(0040) 		switch (RTC_bReadHour())
    083C: 10       PUSH  X
    083D: 7C 04 48 LCALL _RTC_bReadHour
    0840: 20       POP   X
    0841: 62 D0 00 MOV   REG[0xD0],0x0
    0844: 54 01    MOV   [X+1],A
    0846: 56 00 00 MOV   [X+0],0x0
    0849: 52 01    MOV   A,[X+1]
    084B: 11 05    SUB   A,0x5
    084D: 53 03    MOV   [__rY],A
    084F: 52 00    MOV   A,[X+0]
    0851: 31 80    XOR   A,0x80
    0853: 19 80    SBB   A,0x80
    0855: C0 25    JC    0x087B
    0857: 2A 03    OR    A,[__rY]
    0859: A0 0D    JZ    0x0867
    085B: 3D 00 00 CMP   [X+0],0x0
    085E: B0 06    JNZ   0x0865
    0860: 3D 01 19 CMP   [X+1],0x19
    0863: A0 0F    JZ    0x0873
    0865: 80 15    JMP   0x087B
(0041) 		{
(0042) 			case 0x05:
(0043) 				set_power(POWER_MAX);
    0867: 50 36    MOV   A,0x36
    0869: 08       PUSH  A
    086A: 50 B0    MOV   A,0xB0
    086C: 08       PUSH  A
    086D: 90 7F    CALL  _set_power
    086F: 38 FE    ADD   SP,0xFE
(0044) 				break;
    0871: 80 09    JMP   0x087B
(0045) 			case 0x19:
(0046) 				set_power(0);
    0873: 50 00    MOV   A,0x0
    0875: 08       PUSH  A
    0876: 08       PUSH  A
    0877: 90 75    CALL  _set_power
    0879: 38 FE    ADD   SP,0xFE
(0047) 				break;
(0048) 		}
(0049) 		update_power();
    087B: 90 90    CALL  _update_power
(0050) 		Delay10msTimes(UPDATE_PERIOD);
    087D: 10       PUSH  X
    087E: 50 02    MOV   A,0x2
    0880: 7C 07 E0 LCALL __UserModules_end|__text_start|Delay10msTimes|_Delay10msTimes
(0051) #ifdef DEBUG
(0052) 		LCD_Position(0,0);
    0883: 50 00    MOV   A,0x0
    0885: 57 00    MOV   X,0x0
    0887: 7C 06 D6 LCALL _LCD_Position
(0053) 		LCD_PrHexByte(RTC_bReadHour());
    088A: 7C 04 48 LCALL _RTC_bReadHour
    088D: 20       POP   X
    088E: 62 D0 00 MOV   REG[0xD0],0x0
    0891: 10       PUSH  X
    0892: 7C 05 73 LCALL _LCD_PrHexByte
(0054) 		LCD_PrCString(":");
    0895: 50 01    MOV   A,0x1
    0897: 08       PUSH  A
    0898: 50 9B    MOV   A,0x9B
    089A: 5C       MOV   X,A
    089B: 18       POP   A
    089C: 7C 05 51 LCALL _LCD_PrCString
(0055) 		LCD_PrHexByte(RTC_bReadMinute());
    089F: 7C 04 41 LCALL _RTC_bReadMinute
    08A2: 20       POP   X
    08A3: 62 D0 00 MOV   REG[0xD0],0x0
    08A6: 10       PUSH  X
    08A7: 7C 05 73 LCALL _LCD_PrHexByte
(0056) 		LCD_PrCString(":");
    08AA: 50 01    MOV   A,0x1
    08AC: 08       PUSH  A
    08AD: 50 9B    MOV   A,0x9B
    08AF: 5C       MOV   X,A
    08B0: 18       POP   A
    08B1: 7C 05 51 LCALL _LCD_PrCString
(0057) 		LCD_PrHexByte(RTC_bReadSecond());
    08B4: 7C 04 3A LCALL _RTC_bReadSecond
    08B7: 20       POP   X
    08B8: 62 D0 00 MOV   REG[0xD0],0x0
    08BB: 10       PUSH  X
    08BC: 7C 05 73 LCALL _LCD_PrHexByte
(0058) 		LCD_Position(1, 0);
    08BF: 57 00    MOV   X,0x0
    08C1: 50 01    MOV   A,0x1
    08C3: 7C 06 D6 LCALL _LCD_Position
(0059) 		LCD_PrCString("PT:");
    08C6: 50 01    MOV   A,0x1
    08C8: 08       PUSH  A
    08C9: 50 97    MOV   A,0x97
    08CB: 5C       MOV   X,A
    08CC: 18       POP   A
    08CD: 7C 05 51 LCALL _LCD_PrCString
(0060) 		LCD_PrHexInt(power_target);
    08D0: 62 D0 00 MOV   REG[0xD0],0x0
    08D3: 51 06    MOV   A,[power_target]
    08D5: 08       PUSH  A
    08D6: 51 07    MOV   A,[power_target+1]
    08D8: 20       POP   X
    08D9: 7C 05 86 LCALL _LCD_PrHexInt
(0061) 		LCD_PrCString("      ");		
    08DC: 50 01    MOV   A,0x1
    08DE: 08       PUSH  A
    08DF: 50 90    MOV   A,0x90
    08E1: 5C       MOV   X,A
    08E2: 18       POP   A
    08E3: 7C 05 51 LCALL _LCD_PrCString
    08E6: 20       POP   X
(0062) #endif // DEBUG
(0063) 	}
    08E7: 8F 54    JMP   0x083C
    08E9: 38 FE    ADD   SP,0xFE
    08EB: 20       POP   X
    08EC: 8F FF    JMP   0x08EC
(0064) }
(0065) 
(0066) void set_power(unsigned int pwr)
(0067) {
_set_power:
  pwr                  --> X-5
    08EE: 10       PUSH  X
    08EF: 4F       MOV   X,SP
(0068) 	if(pwr > POWER_MAX) pwr = POWER_MAX;
    08F0: 50 B0    MOV   A,0xB0
    08F2: 13 FC    SUB   A,[X-4]
    08F4: 50 36    MOV   A,0x36
    08F6: 1B FB    SBB   A,[X-5]
    08F8: D0 07    JNC   0x0900
    08FA: 56 FC B0 MOV   [X-4],0xB0
    08FD: 56 FB 36 MOV   [X-5],0x36
(0069) 	power_target = pwr;
    0900: 62 D0 00 MOV   REG[0xD0],0x0
    0903: 52 FC    MOV   A,[X-4]
    0905: 53 07    MOV   [power_target+1],A
    0907: 52 FB    MOV   A,[X-5]
    0909: 53 06    MOV   [power_target],A
    090B: 20       POP   X
    090C: 7F       RET   
(0070) }
(0071) 
(0072) void update_power(void)
(0073) {
_update_power:
  pwr                  --> X+0
    090D: 10       PUSH  X
    090E: 4F       MOV   X,SP
    090F: 38 02    ADD   SP,0x2
(0074) 	unsigned int pwr;
(0075) 	
(0076) 	// CH0
(0077) 	pwr = PWM16_CH0_wReadPulseWidth();
    0911: 10       PUSH  X
    0912: 7C 05 11 LCALL _wPWM16_CH0_ReadPulseWidth|PWM16_CH0_wReadPulseWidth|_PWM16_CH0_wReadPulseWidth
    0915: 62 D0 00 MOV   REG[0xD0],0x0
    0918: 5A 05    MOV   [__r0],X
    091A: 20       POP   X
    091B: 54 01    MOV   [X+1],A
    091D: 51 05    MOV   A,[__r0]
    091F: 54 00    MOV   [X+0],A
(0078) 	if(pwr < power_target) pwr += POWER_STEP;
    0921: 62 D0 00 MOV   REG[0xD0],0x0
    0924: 52 01    MOV   A,[X+1]
    0926: 12 07    SUB   A,[power_target+1]
    0928: 52 00    MOV   A,[X+0]
    092A: 1A 06    SBB   A,[power_target]
    092C: D0 06    JNC   0x0933
    092E: 77 01    INC   [X+1]
    0930: 0F 00 00 ADC   [X+0],0x0
(0079) 	if(pwr > power_target) pwr -= POWER_STEP;
    0933: 62 D0 00 MOV   REG[0xD0],0x0
    0936: 51 07    MOV   A,[power_target+1]
    0938: 13 01    SUB   A,[X+1]
    093A: 51 06    MOV   A,[power_target]
    093C: 1B 00    SBB   A,[X+0]
    093E: D0 06    JNC   0x0945
    0940: 7B 01    DEC   [X+1]
    0942: 1F 00 00 SBB   [X+0],0x0
(0080) 	PWM16_CH0_WritePulseWidth(pwr);
    0945: 10       PUSH  X
    0946: 52 00    MOV   A,[X+0]
    0948: 08       PUSH  A
    0949: 52 01    MOV   A,[X+1]
    094B: 20       POP   X
    094C: 7C 05 0B LCALL _PWM16_CH0_WritePulseWidth
(0081) 	
(0082) 	// CH1
(0083) 	pwr = PWM16_CH1_wReadPulseWidth();
    094F: 7C 04 B4 LCALL _PWM16_CH1_wReadPulseWidth|wPWM16_CH1_ReadPulseWidth|_wPWM16_CH1_ReadPulseWidth|PWM16_CH1_wReadPulseWidth
    0952: 62 D0 00 MOV   REG[0xD0],0x0
    0955: 5A 05    MOV   [__r0],X
    0957: 20       POP   X
    0958: 54 01    MOV   [X+1],A
    095A: 51 05    MOV   A,[__r0]
    095C: 54 00    MOV   [X+0],A
(0084) 	if(pwr < power_target) pwr += POWER_STEP;
    095E: 62 D0 00 MOV   REG[0xD0],0x0
    0961: 52 01    MOV   A,[X+1]
    0963: 12 07    SUB   A,[power_target+1]
    0965: 52 00    MOV   A,[X+0]
    0967: 1A 06    SBB   A,[power_target]
    0969: D0 06    JNC   0x0970
    096B: 77 01    INC   [X+1]
    096D: 0F 00 00 ADC   [X+0],0x0
(0085) 	if(pwr > power_target) pwr -= POWER_STEP;
    0970: 62 D0 00 MOV   REG[0xD0],0x0
    0973: 51 07    MOV   A,[power_target+1]
    0975: 13 01    SUB   A,[X+1]
    0977: 51 06    MOV   A,[power_target]
    0979: 1B 00    SBB   A,[X+0]
    097B: D0 06    JNC   0x0982
    097D: 7B 01    DEC   [X+1]
    097F: 1F 00 00 SBB   [X+0],0x0
(0086) 	PWM16_CH1_WritePulseWidth(pwr);
    0982: 10       PUSH  X
    0983: 52 00    MOV   A,[X+0]
    0985: 08       PUSH  A
    0986: 52 01    MOV   A,[X+1]
    0988: 20       POP   X
    0989: 7C 04 AE LCALL _PWM16_CH1_WritePulseWidth
    098C: 20       POP   X
    098D: 38 FE    ADD   SP,0xFE
    098F: 20       POP   X
    0990: 7F       RET   
