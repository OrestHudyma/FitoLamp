 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area lit(rom, con, rel, lit)
 0000           _hw_id::
 0000 3100              .byte 49,0
 0002                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0002                   .dbsym e hw_id _hw_id A[2:2]kc
 0002           _cmd_on::
 0002 4F4E00            .byte 'O,'N,0
 0005                   .dbsym e cmd_on _cmd_on A[3:3]kc
 0005           _cmd_off::
 0005 4F464600          .byte 'O,'F,'F,0
 0009                   .dbsym e cmd_off _cmd_off A[4:4]kc
 0009           _cmd_fon::
 0009 464F4E00          .byte 'F,'O,'N,0
 000D                   .dbsym e cmd_fon _cmd_fon A[4:4]kc
 000D           _cmd_foff::
 000D 464F464600        .byte 'F,'O,'F,'F,0
 0012                   .dbsym e cmd_foff _cmd_foff A[5:5]kc
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _nmea_gprmc_empty::
 0000 4750524D4300      .byte 'G,'P,'R,'M,'C,0
 0006                   .dbsym e nmea_gprmc_empty _nmea_gprmc_empty A[6:6]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _nmea_shftl_empty::
 0000 534846544C00      .byte 'S,'H,'F,'T,'L,0
 0006                   .dbsym e nmea_shftl_empty _nmea_shftl_empty A[6:6]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _override::
 0000 0000              .word 0
 0002                   .dbsym e override _override I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area lit(rom, con, rel, lit)
 0012           _schedule::
 0012 0005              .word 5
 0014 36B0              .word 14000
 0016 0014              .word 20
 0018 0000              .word 0
 001A                   .dbsym e schedule _schedule A[8:2:2]ki
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _power_target::
 0000 0000              .word 0
 0002                   .dbsym e power_target _power_target i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _NMEA_buffer_gps::
 0000 4E4D45415F6275666665725F67707300  .byte 'N,'M,'E,'A,95,'b,'u,'f,'f,'e,'r,95,'g,'p,'s,0
 0010 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 004C 000000000000      .byte 0,0,0,0,0,0
 0052                   .dbsym e NMEA_buffer_gps _NMEA_buffer_gps A[82:82]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _NMEA_buffer_rf::
 0000 4E4D45415F6275666665725F726600    .byte 'N,'M,'E,'A,95,'b,'u,'f,'f,'e,'r,95,'r,'f,0
 000F 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 004B 00000000000000    .byte 0,0,0,0,0,0,0
 0052                   .dbsym e NMEA_buffer_rf _NMEA_buffer_rf A[82:82]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _NMEA_GPRMC::
 0000 4750524D4300      .byte 'G,'P,'R,'M,'C,0
 0006 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 0042 00000000000000000000      .word 0,0,0,0,0
 004C 000000000000      .byte 0,0,0,0,0,0
 0052                   .dbsym e NMEA_GPRMC _NMEA_GPRMC A[82:82]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _NMEA_SHFTL::
 0000 534846544C00      .byte 'S,'H,'F,'T,'L,0
 0006 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 0042 00000000000000000000      .word 0,0,0,0,0
 004C 000000000000      .byte 0,0,0,0,0,0
 0052                   .dbsym e NMEA_SHFTL _NMEA_SHFTL A[82:82]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _NMEA_cmd_received::
 0000 0000              .word 0
 0002                   .dbsym e NMEA_cmd_received _NMEA_cmd_received I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _gps_datetime::
 0000 00                .byte 0
 0001 00                .byte 0
 0002 00                .byte 0
 0003 00                .byte 0
 0004 00                .byte 0
 0005 00                .byte 0
 0006 0000              .word 0
 0008                   .dbstruct 0 8 datetime
 0008                   .dbfield 0 sec c
 0008                   .dbfield 1 min c
 0008                   .dbfield 2 hour c
 0008                   .dbfield 3 day c
 0008                   .dbfield 4 month c
 0008                   .dbfield 5 year c
 0008                   .dbfield 6 valid I
 0008                   .dbend
 0008                   .dbsym e gps_datetime _gps_datetime S[datetime]
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _local_datetime::
 0000 00                .byte 0
 0001 00                .byte 0
 0002 00                .byte 0
 0003 00                .byte 0
 0004 00                .byte 0
 0005 00                .byte 0
 0006 0000              .word 0
 0008                   .dbsym e local_datetime _local_datetime S[datetime]
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000                   .dbfunc e gps_signal _gps_signal fV
 0000           _gps_signal::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3802              add SP,2
 0004                   .dbline 112
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "delay.h"
 0004           ; #include <stdlib.h>
 0004           ; #include <stdio.h>
 0004           ; #include <math.h> 
 0004           ; #include <stdbool.h>
 0004           ; #include <string.h>
 0004           ; 
 0004           ; //#define DEBUG
 0004           ; 
 0004           ; #define DECIMAL_COUNT_SYSTEM_BASIS  10
 0004           ; #define DECIMAL_NUMBER_SIZE         4
 0004           ; #define HOUR_MAX                          23
 0004           ; 
 0004           ; // NMEA definitions
 0004           ; #define NMEA_MAX_SIZE             82
 0004           ; #define NMEA_START_DELIMITER      '$'
 0004           ; #define NMEA_END_DELIMITER        0x0A
 0004           ; #define NMEA_CHECKSUM_DELIMITER   '*'
 0004           ; #define NMEA_FIELD_DELIMITER      ','
 0004           ; #define NMEA_HEADER_SIZE          3
 0004           ; 
 0004           ; #define NMEA_GPRMC_UTC              1
 0004           ; #define NMEA_GPRMC_DATE               7
 0004           ; #define NMEA_GPRMC_HDOP             8
 0004           ; #define NMEA_GPRMC_ALTITUDE         9
 0004           ; 
 0004           ; #define NMEA_GPRMC_VALID            'A'
 0004           ; #define NMEA_GPRMC_INVALID          'V'
 0004           ; 
 0004           ; // System settings
 0004           ; #define POWER_MAX     14000
 0004           ; #define POWER_STEP    1
 0004           ; #define GMT_OFFSET    3
 0004           ; #define WAIT_PERIOD                   2                       // Global non critical tasks execution period in x10 miliseconds
 0004           ; #define OVERRIDE_TIMEOUT      540000          // x20 miliseconds (540000 = 3 hours)
 0004           ; #define POWER_UPDATE_SLOW   2000
 0004           ; #define POWER_UPDATE_FAST   100
 0004           ; #define HW_ID                         "1"
 0004           ; 
 0004           ; #define NMEA_GPRMC_EMPTY            "GPRMC"
 0004           ; #define NMEA_SHFTL_EMPTY            "SHFTL"
 0004           ; #define NMEA_FIELD_CMD              1
 0004           ; #define NMEA_FIELD_ID               2
 0004           ; 
 0004           ; const char hw_id[] = HW_ID;
 0004           ; 
 0004           ; const char cmd_on[] = "ON";
 0004           ; const char cmd_off[] = "OFF";
 0004           ; const char cmd_fon[] = "FON";
 0004           ; const char cmd_foff[] = "FOFF";
 0004           ; char nmea_gprmc_empty[] = NMEA_GPRMC_EMPTY;
 0004           ; char nmea_shftl_empty[] = NMEA_SHFTL_EMPTY;
 0004           ; char fld_buf[NMEA_MAX_SIZE];
 0004           ; bool override = false;
 0004           ; unsigned long override_counter;
 0004           ; 
 0004           ; unsigned int const schedule[2][2] = {
 0004           ;                                               {5, POWER_MAX},
 0004           ;                                               {20, 0}
 0004           ;                                               };
 0004           ; 
 0004           ; struct datetime {
 0004           ;       unsigned char sec;
 0004           ;       unsigned char min;
 0004           ;       unsigned char hour;
 0004           ;       unsigned char day;
 0004           ;       unsigned char month;
 0004           ;       unsigned char year;
 0004           ;       bool valid;
 0004           ; };
 0004           ; 
 0004           ; unsigned int power_target = 0;
 0004           ; 
 0004           ; // NMEA variables
 0004           ; char NMEA_buffer_gps[NMEA_MAX_SIZE] = "NMEA_buffer_gps";
 0004           ; char NMEA_buffer_rf[NMEA_MAX_SIZE] = "NMEA_buffer_rf";
 0004           ; char NMEA_GPRMC[NMEA_MAX_SIZE] = NMEA_GPRMC_EMPTY;
 0004           ; char NMEA_SHFTL[NMEA_MAX_SIZE] = NMEA_SHFTL_EMPTY;
 0004           ; bool NMEA_cmd_received = false;
 0004           ; unsigned char NMEA_pointer_gps;
 0004           ; unsigned char NMEA_pointer_rf;
 0004           ; 
 0004           ; struct datetime gps_datetime = {0, 0, 0, 0, 0, 0, false};
 0004           ; struct datetime local_datetime = {0, 0, 0, 0, 0, 0, false};
 0004           ; 
 0004           ; void set_power(unsigned int pwr);
 0004           ; void override_enable(void);
 0004           ; void update_power(void);
 0004           ; void schedule_processing(unsigned char hour);
 0004           ; void schedule_init(void);
 0004           ; void rtc_update(struct datetime *datetime);
 0004           ; bool check_fld(const char *cmd);
 0004           ; 
 0004           ; // NMEA functions
 0004           ; bool NMEA_handle_packet(char *packet, char *NMEA_data);
 0004           ; void NMEA_GetField(char *packet, unsigned char field, char *result);
 0004           ; void NMEA_GetTimeUTC(char *gprmc, struct datetime *gps_datetime);
 0004           ; 
 0004           ; unsigned char str_cmp(char *str1, char *str2, unsigned char stop);
 0004           ; unsigned char str_cmp_const(char *str1, const char *str2, unsigned char stop);
 0004           ; unsigned char byte_to_bcd(unsigned char byte);
 0004           ; unsigned char bcd_to_byte(unsigned char reg);
 0004           ; void utc_to_local(struct datetime *gps_datetime, struct datetime *local_datetime);
 0004           ; 
 0004           ; void gps_signal(void)
 0004           ; {
 0004                   .dbline 113
 0004           ;       M8C_DisableGInt;
 0004 70FE                      and F, FEh
 0006           
 0006                   .dbline 114
 0006           ;       if (NMEA_pointer_gps >= NMEA_MAX_SIZE) NMEA_pointer_gps = 0;
 0006 62D000            mov REG[0xd0],>_NMEA_pointer_gps
 0009 3C0052            cmp [_NMEA_pointer_gps],82
 000C C007              jc L2
 000E           X0:
 000E                   .dbline 114
 000E 62D000            mov REG[0xd0],>_NMEA_pointer_gps
 0011 550000            mov [_NMEA_pointer_gps],0
 0014           L2:
 0014                   .dbline 115
 0014           ;     NMEA_buffer_gps[NMEA_pointer_gps] = RX8_GPS_bReadRxData();        
 0014 10                push X
 0015 7C0000            xcall _RX8_GPS_bReadRxData
 0018 20                pop X
 0019 62D000            mov REG[0xd0],>__r0
 001C 5300              mov [__r0],A
 001E 62D000            mov REG[0xd0],>_NMEA_pointer_gps
 0021 5100              mov A,[_NMEA_pointer_gps]
 0023 62D000            mov REG[0xd0],>__r0
 0026 5300              mov [__r3],A
 0028 550000            mov [__r2],0
 002B 060000            add [__r3],<_NMEA_buffer_gps
 002E 0E0000            adc [__r2],>_NMEA_buffer_gps
 0031 5100              mov A,[__r2]
 0033 60D5              mov REG[0xd5],A
 0035 5100              mov A,[__r0]
 0037 3F00              mvi [__r3],A
 0039                   .dbline 116
 0039           ;     NMEA_buffer_gps[NMEA_pointer_gps + 1] = 0;        
 0039 62D000            mov REG[0xd0],>_NMEA_pointer_gps
 003C 5100              mov A,[_NMEA_pointer_gps]
 003E 62D000            mov REG[0xd0],>__r0
 0041 5300              mov [__r1],A
 0043 550000            mov [__r0],0
 0046 060001            add [__r1],<_NMEA_buffer_gps+1
 0049 0E0001            adc [__r0],>_NMEA_buffer_gps+1
 004C 5100              mov A,[__r0]
 004E 60D5              mov REG[0xd5],A
 0050 5000              mov A,0
 0052 3F00              mvi [__r1],A
 0054                   .dbline 117
 0054           ;     switch(NMEA_buffer_gps[NMEA_pointer_gps])
 0054 62D000            mov REG[0xd0],>_NMEA_pointer_gps
 0057 5100              mov A,[_NMEA_pointer_gps]
 0059 62D000            mov REG[0xd0],>__r0
 005C 5300              mov [__r1],A
 005E 550000            mov [__r0],0
 0061 060000            add [__r1],<_NMEA_buffer_gps
 0064 0E0000            adc [__r0],>_NMEA_buffer_gps
 0067 5100              mov A,[__r0]
 0069 60D4              mov REG[0xd4],A
 006B 3E00              mvi A,[__r1]
 006D 5401              mov [X+1],A
 006F 560000            mov [X+0],0
 0072 5201              mov A,[X+1]
 0074 110A              sub A,10
 0076 5300              mov [__rY],A
 0078 5200              mov A,[X+0]
 007A 3180              xor A,-128
 007C 1980              sbb A,(0 ^ 0x80)
 007E C02B              jc L5
 0080 2A00              or A,[__rY]
 0082 A015              jz L9
 0084           X1:
 0084           L10:
 0084 3D0000            cmp [X+0],0
 0087 B006              jnz X2
 0089 3D0124            cmp [X+1],36
 008C A003              jz L8
 008E           X2:
 008E 801B              xjmp L5
 0090           L8:
 0090                   .dbline 120
 0090           ;     {
 0090           ;         case NMEA_START_DELIMITER:
 0090           ;         NMEA_pointer_gps = 0;
 0090 62D000            mov REG[0xd0],>_NMEA_pointer_gps
 0093 550000            mov [_NMEA_pointer_gps],0
 0096                   .dbline 121
 0096           ;         break;
 0096 8018              xjmp L6
 0098           L9:
 0098                   .dbline 124
 0098           ;         
 0098           ;         case NMEA_END_DELIMITER:
 0098           ;         NMEA_handle_packet(NMEA_buffer_gps, NMEA_GPRMC);
 0098 5000              mov A,>_NMEA_GPRMC
 009A 08                push A
 009B 5000              mov A,<_NMEA_GPRMC
 009D 08                push A
 009E 5000              mov A,>_NMEA_buffer_gps
 00A0 08                push A
 00A1 5000              mov A,<_NMEA_buffer_gps
 00A3 08                push A
 00A4 967C              xcall _NMEA_handle_packet
 00A6 38FC              add SP,-4
 00A8                   .dbline 125
 00A8           ;         break;
 00A8 8006              xjmp L6
 00AA           L5:
 00AA                   .dbline 128
 00AA           ;         
 00AA           ;         default:
 00AA           ;         NMEA_pointer_gps++;
 00AA 62D000            mov REG[0xd0],>_NMEA_pointer_gps
 00AD 7600              inc [_NMEA_pointer_gps]
 00AF                   .dbline 129
 00AF           ;         break;
 00AF           L6:
 00AF                   .dbline 131
 00AF           ;     }
 00AF           ;       M8C_EnableGInt;
 00AF 7101                      or  F, 01h
 00B1           
 00B1                   .dbline -2
 00B1           L1:
 00B1 38FE              add SP,-2
 00B3 20                pop X
 00B4                   .dbline 0 ; func end
 00B4 7F                ret
 00B5                   .dbend
 00B5                   .dbfunc e rf_signal _rf_signal fV
 00B5           _rf_signal::
 00B5                   .dbline -1
 00B5 10                push X
 00B6 4F                mov X,SP
 00B7 3802              add SP,2
 00B9                   .dbline 135
 00B9           ; }
 00B9           ; 
 00B9           ; void rf_signal(void)
 00B9           ; {     
 00B9                   .dbline 136
 00B9           ;       M8C_DisableGInt;
 00B9 70FE                      and F, FEh
 00BB           
 00BB                   .dbline 137
 00BB           ;       if (NMEA_pointer_rf >= NMEA_MAX_SIZE) NMEA_pointer_rf = 0;
 00BB 62D000            mov REG[0xd0],>_NMEA_pointer_rf
 00BE 3C0052            cmp [_NMEA_pointer_rf],82
 00C1 C007              jc L12
 00C3           X3:
 00C3                   .dbline 137
 00C3 62D000            mov REG[0xd0],>_NMEA_pointer_rf
 00C6 550000            mov [_NMEA_pointer_rf],0
 00C9           L12:
 00C9                   .dbline 138
 00C9           ;     NMEA_buffer_rf[NMEA_pointer_rf] = RX8_RF_bReadRxData();   
 00C9 10                push X
 00CA 7C0000            xcall _RX8_RF_bReadRxData
 00CD 20                pop X
 00CE 62D000            mov REG[0xd0],>__r0
 00D1 5300              mov [__r0],A
 00D3 62D000            mov REG[0xd0],>_NMEA_pointer_rf
 00D6 5100              mov A,[_NMEA_pointer_rf]
 00D8 62D000            mov REG[0xd0],>__r0
 00DB 5300              mov [__r3],A
 00DD 550000            mov [__r2],0
 00E0 060000            add [__r3],<_NMEA_buffer_rf
 00E3 0E0000            adc [__r2],>_NMEA_buffer_rf
 00E6 5100              mov A,[__r2]
 00E8 60D5              mov REG[0xd5],A
 00EA 5100              mov A,[__r0]
 00EC 3F00              mvi [__r3],A
 00EE                   .dbline 139
 00EE           ;     NMEA_buffer_rf[NMEA_pointer_rf + 1] = 0;  
 00EE 62D000            mov REG[0xd0],>_NMEA_pointer_rf
 00F1 5100              mov A,[_NMEA_pointer_rf]
 00F3 62D000            mov REG[0xd0],>__r0
 00F6 5300              mov [__r1],A
 00F8 550000            mov [__r0],0
 00FB 060001            add [__r1],<_NMEA_buffer_rf+1
 00FE 0E0001            adc [__r0],>_NMEA_buffer_rf+1
 0101 5100              mov A,[__r0]
 0103 60D5              mov REG[0xd5],A
 0105 5000              mov A,0
 0107 3F00              mvi [__r1],A
 0109                   .dbline 140
 0109           ;     switch(NMEA_buffer_rf[NMEA_pointer_rf])
 0109 62D000            mov REG[0xd0],>_NMEA_pointer_rf
 010C 5100              mov A,[_NMEA_pointer_rf]
 010E 62D000            mov REG[0xd0],>__r0
 0111 5300              mov [__r1],A
 0113 550000            mov [__r0],0
 0116 060000            add [__r1],<_NMEA_buffer_rf
 0119 0E0000            adc [__r0],>_NMEA_buffer_rf
 011C 5100              mov A,[__r0]
 011E 60D4              mov REG[0xd4],A
 0120 3E00              mvi A,[__r1]
 0122 5401              mov [X+1],A
 0124 560000            mov [X+0],0
 0127 5201              mov A,[X+1]
 0129 110A              sub A,10
 012B 5300              mov [__rY],A
 012D 5200              mov A,[X+0]
 012F 3180              xor A,-128
 0131 1980              sbb A,(0 ^ 0x80)
 0133 C041              jc L15
 0135 2A00              or A,[__rY]
 0137 A015              jz L19
 0139           X4:
 0139           L20:
 0139 3D0000            cmp [X+0],0
 013C B006              jnz X5
 013E 3D0124            cmp [X+1],36
 0141 A003              jz L18
 0143           X5:
 0143 8031              xjmp L15
 0145           L18:
 0145                   .dbline 143
 0145           ;     {
 0145           ;         case NMEA_START_DELIMITER:
 0145           ;         NMEA_pointer_rf = 0;
 0145 62D000            mov REG[0xd0],>_NMEA_pointer_rf
 0148 550000            mov [_NMEA_pointer_rf],0
 014B                   .dbline 144
 014B           ;         break;
 014B 802E              xjmp L16
 014D           L19:
 014D                   .dbline 147
 014D           ;         
 014D           ;         case NMEA_END_DELIMITER:
 014D           ;         NMEA_cmd_received = NMEA_handle_packet(NMEA_buffer_rf, NMEA_SHFTL);
 014D 5000              mov A,>_NMEA_SHFTL
 014F 08                push A
 0150 5000              mov A,<_NMEA_SHFTL
 0152 08                push A
 0153 5000              mov A,>_NMEA_buffer_rf
 0155 08                push A
 0156 5000              mov A,<_NMEA_buffer_rf
 0158 08                push A
 0159 95C7              xcall _NMEA_handle_packet
 015B 38FC              add SP,-4
 015D 62D000            mov REG[0xd0],>__r0
 0160 5100              mov A,[__r1]
 0162 08                push A
 0163 5100              mov A,[__r0]
 0165 62D000            mov REG[0xd0],>_NMEA_cmd_received
 0168 5300              mov [_NMEA_cmd_received],A
 016A 18                pop A
 016B 5301              mov [_NMEA_cmd_received+1],A
 016D                   .dbline 148
 016D           ;         NMEA_buffer_rf[0] = 0;
 016D 62D000            mov REG[0xd0],>_NMEA_buffer_rf
 0170 550000            mov [_NMEA_buffer_rf],0
 0173                   .dbline 149
 0173           ;         break;
 0173 8006              xjmp L16
 0175           L15:
 0175                   .dbline 152
 0175           ;         
 0175           ;         default:
 0175           ;         NMEA_pointer_rf++;
 0175 62D000            mov REG[0xd0],>_NMEA_pointer_rf
 0178 7600              inc [_NMEA_pointer_rf]
 017A                   .dbline 153
 017A           ;         break;
 017A           L16:
 017A                   .dbline 155
 017A           ;     }
 017A           ;       M8C_EnableGInt;
 017A 7101                      or  F, 01h
 017C           
 017C                   .dbline -2
 017C           L11:
 017C 38FE              add SP,-2
 017E 20                pop X
 017F                   .dbline 0 ; func end
 017F 7F                ret
 0180                   .dbend
 0180                   .dbfunc e main _main fV
 0180           ;              t -> X+0
 0180           _main::
 0180                   .dbline -1
 0180 10                push X
 0181 4F                mov X,SP
 0182 3801              add SP,1
 0184                   .dbline 159
 0184           ; }
 0184           ; 
 0184           ; void main(void)
 0184           ; {
 0184                   .dbline 162
 0184           ;       unsigned char t;
 0184           ;       
 0184           ;       M8C_EnableGInt; // Uncomment this line to enable Global Interrupts
 0184 7101                      or  F, 01h
 0186           
 0186                   .dbline 164
 0186           ; 
 0186           ;       RTC_SetHour(0x08);
 0186 10                push X
 0187 5008              mov A,8
 0189 7C0000            xcall _RTC_SetHour
 018C                   .dbline 165
 018C           ;       RTC_SetMinute(0x00);
 018C 5000              mov A,0
 018E 7C0000            xcall _RTC_SetMinute
 0191                   .dbline 166
 0191           ;       RTC_SetSecond(0x00);
 0191 5000              mov A,0
 0193 7C0000            xcall _RTC_SetSecond
 0196                   .dbline 167
 0196           ;       RTC_Start();
 0196 7C0000            xcall _RTC_Start
 0199                   .dbline 168
 0199           ;       PWM16_CH0_Start();
 0199 7C0000            xcall _PWM16_CH0_Start
 019C                   .dbline 169
 019C           ;       PWM16_CH1_Start();
 019C 7C0000            xcall _PWM16_CH1_Start
 019F                   .dbline 170
 019F           ;       Counter16_PwrUpd_Start();
 019F 7C0000            xcall _Counter16_PwrUpd_Start
 01A2                   .dbline 171
 01A2           ;       Counter8_RF_clk_Start();
 01A2 7C0000            xcall _Counter8_RF_clk_Start
 01A5                   .dbline 172
 01A5           ;       RX8_GPS_Start(RX8_GPS_PARITY_NONE);
 01A5 5000              mov A,0
 01A7 7C0000            xcall _RX8_GPS_Start
 01AA                   .dbline 173
 01AA           ;       RX8_RF_Start(RX8_GPS_PARITY_ODD);
 01AA 5006              mov A,6
 01AC 7C0000            xcall _RX8_RF_Start
 01AF                   .dbline 175
 01AF           ;       
 01AF           ;       TX8_Debug_Start(TX8_Debug_PARITY_NONE);
 01AF 5000              mov A,0
 01B1 7C0000            xcall _TX8_Debug_Start
 01B4                   .dbline 183
 01B4           ;       
 01B4           ; #ifdef DEBUG
 01B4           ;       LCD_Init();
 01B4           ;       LCD_Position(0, 0);
 01B4           ;       LCD_PrCString(" ");
 01B4           ; #endif // DEBUG
 01B4           ;       
 01B4           ;       RX8_GPS_EnableInt();
 01B4 7C0000            xcall _RX8_GPS_EnableInt
 01B7                   .dbline 184
 01B7           ;       RX8_RF_EnableInt();
 01B7 7C0000            xcall _RX8_RF_EnableInt
 01BA                   .dbline 185
 01BA           ;       Counter16_PwrUpd_EnableInt();
 01BA 7C0000            xcall _Counter16_PwrUpd_EnableInt
 01BD                   .dbline 187
 01BD           ;               
 01BD           ;       Counter16_PwrUpd_WritePeriod(POWER_UPDATE_SLOW);
 01BD 5707              mov X,7
 01BF 50D0              mov A,-48
 01C1 7C0000            xcall _Counter16_PwrUpd_WritePeriod
 01C4 20                pop X
 01C5                   .dbline 188
 01C5           ;       set_power(POWER_MAX);
 01C5 5036              mov A,54
 01C7 08                push A
 01C8 50B0              mov A,-80
 01CA 08                push A
 01CB 91F1              xcall _set_power
 01CD 38FE              add SP,-2
 01CF                   .dbline 189
 01CF           ;       LED_Blue_Off();
 01CF 10                push X
 01D0 7C0000            xcall _LED_Blue_Off
 01D3 20                pop X
 01D4 81E2              xjmp L23
 01D6           L22:
 01D6                   .dbline 192
 01D6           ;       
 01D6           ;       while (1)
 01D6           ;       {               
 01D6                   .dbline 194
 01D6           ;               // Handle commands
 01D6           ;               if (NMEA_cmd_received)
 01D6 62D000            mov REG[0xd0],>_NMEA_cmd_received
 01D9 3C0000            cmp [_NMEA_cmd_received],0
 01DC B006              jnz X7
 01DE 3C0100            cmp [_NMEA_cmd_received+1],0
 01E1 A141              jz L25
 01E3           X7:
 01E3                   .dbline 196
 01E3           ;         {
 01E3           ;                       LED_Blue_On();
 01E3                   .dbline 196
 01E3 10                push X
 01E4 7C0000            xcall _LED_Blue_On
 01E7 20                pop X
 01E8                   .dbline 197
 01E8           ;                       NMEA_cmd_received = false;              
 01E8 62D000            mov REG[0xd0],>_NMEA_cmd_received
 01EB 550100            mov [_NMEA_cmd_received+1],0
 01EE 550000            mov [_NMEA_cmd_received],0
 01F1                   .dbline 200
 01F1           ;             
 01F1           ;             // NMEA_SHFTL handle
 01F1           ;                       NMEA_GetField(NMEA_SHFTL, NMEA_FIELD_ID, fld_buf);
 01F1 5000              mov A,>_fld_buf
 01F3 08                push A
 01F4 5000              mov A,<_fld_buf
 01F6 08                push A
 01F7 5002              mov A,2
 01F9 08                push A
 01FA 5000              mov A,>_NMEA_SHFTL
 01FC 08                push A
 01FD 5000              mov A,<_NMEA_SHFTL
 01FF 08                push A
 0200 93E5              xcall _NMEA_GetField
 0202                   .dbline 201
 0202           ;                       if(check_fld(hw_id) || check_fld("0"))  // Check ID
 0202 5000              mov A,>_hw_id
 0204 08                push A
 0205 5000              mov A,<_hw_id
 0207 08                push A
 0208 9390              xcall _check_fld
 020A 38F9              add SP,-7
 020C 62D000            mov REG[0xd0],>__r0
 020F 3C0000            cmp [__r0],0
 0212 B01D              jnz L30
 0214 3C0000            cmp [__r1],0
 0217 B018              jnz L30
 0219           X8:
 0219 501F              mov A,>L29
 021B 08                push A
 021C 501F              mov A,<L29
 021E 08                push A
 021F 9379              xcall _check_fld
 0221 38FE              add SP,-2
 0223 62D000            mov REG[0xd0],>__r0
 0226 3C0000            cmp [__r0],0
 0229 B006              jnz X9
 022B 3C0000            cmp [__r1],0
 022E A0F4              jz L27
 0230           X9:
 0230           L30:
 0230                   .dbline 203
 0230           ;                       {                       
 0230           ;                   NMEA_GetField(NMEA_SHFTL, NMEA_FIELD_CMD, fld_buf);
 0230                   .dbline 203
 0230 5000              mov A,>_fld_buf
 0232 08                push A
 0233 5000              mov A,<_fld_buf
 0235 08                push A
 0236 5001              mov A,1
 0238 08                push A
 0239 5000              mov A,>_NMEA_SHFTL
 023B 08                push A
 023C 5000              mov A,<_NMEA_SHFTL
 023E 08                push A
 023F 93A6              xcall _NMEA_GetField
 0241                   .dbline 204
 0241           ;                   if(check_fld(cmd_on))
 0241 5002              mov A,>_cmd_on
 0243 08                push A
 0244 5002              mov A,<_cmd_on
 0246 08                push A
 0247 9351              xcall _check_fld
 0249 38F9              add SP,-7
 024B 62D000            mov REG[0xd0],>__r0
 024E 3C0000            cmp [__r0],0
 0251 B006              jnz X10
 0253 3C0000            cmp [__r1],0
 0256 A018              jz L31
 0258           X10:
 0258                   .dbline 206
 0258           ;                   {
 0258           ;                       Counter16_PwrUpd_WritePeriod(POWER_UPDATE_SLOW);
 0258                   .dbline 206
 0258 10                push X
 0259 5707              mov X,7
 025B 50D0              mov A,-48
 025D 7C0000            xcall _Counter16_PwrUpd_WritePeriod
 0260 20                pop X
 0261                   .dbline 207
 0261           ;                                       set_power(POWER_MAX);
 0261 5036              mov A,54
 0263 08                push A
 0264 50B0              mov A,-80
 0266 08                push A
 0267 9155              xcall _set_power
 0269 38FE              add SP,-2
 026B                   .dbline 208
 026B           ;                                       override_enable();      
 026B 9170              xcall _override_enable
 026D                   .dbline 209
 026D           ;                   }
 026D 808C              xjmp L32
 026F           L31:
 026F                   .dbline 210
 026F           ;                   else if(check_fld(cmd_off))
 026F 5005              mov A,>_cmd_off
 0271 08                push A
 0272 5005              mov A,<_cmd_off
 0274 08                push A
 0275 9323              xcall _check_fld
 0277 38FE              add SP,-2
 0279 62D000            mov REG[0xd0],>__r0
 027C 3C0000            cmp [__r0],0
 027F B006              jnz X11
 0281 3C0000            cmp [__r1],0
 0284 A016              jz L33
 0286           X11:
 0286                   .dbline 212
 0286           ;                   {
 0286           ;                       Counter16_PwrUpd_WritePeriod(POWER_UPDATE_SLOW);
 0286                   .dbline 212
 0286 10                push X
 0287 5707              mov X,7
 0289 50D0              mov A,-48
 028B 7C0000            xcall _Counter16_PwrUpd_WritePeriod
 028E 20                pop X
 028F                   .dbline 213
 028F           ;                                       set_power(0);
 028F 5000              mov A,0
 0291 08                push A
 0292 08                push A
 0293 9129              xcall _set_power
 0295 38FE              add SP,-2
 0297                   .dbline 214
 0297           ;                                       override_enable();      
 0297 9144              xcall _override_enable
 0299                   .dbline 215
 0299           ;                   }
 0299 8060              xjmp L34
 029B           L33:
 029B                   .dbline 216
 029B           ;                               else if(check_fld(cmd_fon))
 029B 5009              mov A,>_cmd_fon
 029D 08                push A
 029E 5009              mov A,<_cmd_fon
 02A0 08                push A
 02A1 92F7              xcall _check_fld
 02A3 38FE              add SP,-2
 02A5 62D000            mov REG[0xd0],>__r0
 02A8 3C0000            cmp [__r0],0
 02AB B006              jnz X12
 02AD 3C0000            cmp [__r1],0
 02B0 A018              jz L35
 02B2           X12:
 02B2                   .dbline 218
 02B2           ;                   {
 02B2           ;                       Counter16_PwrUpd_WritePeriod(POWER_UPDATE_FAST);
 02B2                   .dbline 218
 02B2 10                push X
 02B3 5700              mov X,0
 02B5 5064              mov A,100
 02B7 7C0000            xcall _Counter16_PwrUpd_WritePeriod
 02BA 20                pop X
 02BB                   .dbline 219
 02BB           ;                                       set_power(POWER_MAX);
 02BB 5036              mov A,54
 02BD 08                push A
 02BE 50B0              mov A,-80
 02C0 08                push A
 02C1 90FB              xcall _set_power
 02C3 38FE              add SP,-2
 02C5                   .dbline 220
 02C5           ;                                       override_enable();      
 02C5 9116              xcall _override_enable
 02C7                   .dbline 221
 02C7           ;                   }
 02C7 8032              xjmp L36
 02C9           L35:
 02C9                   .dbline 222
 02C9           ;                   else if(check_fld(cmd_foff))
 02C9 500D              mov A,>_cmd_foff
 02CB 08                push A
 02CC 500D              mov A,<_cmd_foff
 02CE 08                push A
 02CF 92C9              xcall _check_fld
 02D1 38FE              add SP,-2
 02D3 62D000            mov REG[0xd0],>__r0
 02D6 3C0000            cmp [__r0],0
 02D9 B006              jnz X13
 02DB 3C0000            cmp [__r1],0
 02DE A016              jz L37
 02E0           X13:
 02E0                   .dbline 224
 02E0           ;                   {
 02E0           ;                       Counter16_PwrUpd_WritePeriod(POWER_UPDATE_FAST);
 02E0                   .dbline 224
 02E0 10                push X
 02E1 5700              mov X,0
 02E3 5064              mov A,100
 02E5 7C0000            xcall _Counter16_PwrUpd_WritePeriod
 02E8 20                pop X
 02E9                   .dbline 225
 02E9           ;                                       set_power(0);
 02E9 5000              mov A,0
 02EB 08                push A
 02EC 08                push A
 02ED 90CF              xcall _set_power
 02EF 38FE              add SP,-2
 02F1                   .dbline 226
 02F1           ;                                       override_enable();      
 02F1 90EA              xcall _override_enable
 02F3                   .dbline 227
 02F3           ;                   }
 02F3 8006              xjmp L38
 02F5           L37:
 02F5                   .dbline 228
 02F5           ;                               else LED_Blue_Off();
 02F5 10                push X
 02F6 7C0000            xcall _LED_Blue_Off
 02F9 20                pop X
 02FA           L38:
 02FA           L36:
 02FA           L34:
 02FA           L32:
 02FA                   .dbline 232
 02FA           ;                               
 02FA           ;                               // Debug
 02FA           ;                               //TX8_Debug_CPutString(cmd_foff);
 02FA           ;                               TX8_Debug_PutString(NMEA_SHFTL);
 02FA 10                push X
 02FB 5000              mov A,>_NMEA_SHFTL
 02FD 08                push A
 02FE 5000              mov A,<_NMEA_SHFTL
 0300 5C                mov X,A
 0301 18                pop A
 0302 7C0000            xcall _TX8_Debug_PutString
 0305 20                pop X
 0306                   .dbline 234
 0306           ;                               
 0306           ;                   NMEA_SHFTL[0] = 0;
 0306 62D000            mov REG[0xd0],>_NMEA_SHFTL
 0309 550000            mov [_NMEA_SHFTL],0
 030C                   .dbline 235
 030C           ;                   strncat(NMEA_SHFTL, nmea_shftl_empty, NMEA_MAX_SIZE);
 030C 5000              mov A,0
 030E 08                push A
 030F 5052              mov A,82
 0311 08                push A
 0312 5000              mov A,>_nmea_shftl_empty
 0314 08                push A
 0315 5000              mov A,<_nmea_shftl_empty
 0317 08                push A
 0318 5000              mov A,>_NMEA_SHFTL
 031A 08                push A
 031B 5000              mov A,<_NMEA_SHFTL
 031D 08                push A
 031E 7C0000            xcall _strncat
 0321 38FA              add SP,-6
 0323                   .dbline 236
 0323           ;                       }
 0323           L27:
 0323                   .dbline 237
 0323           ;               }               
 0323           L25:
 0323                   .dbline 253
 0323           ;                       
 0323           ;               #ifdef DEBUG
 0323           ;                       M8C_DisableGInt;
 0323           ;                       LCD_Position(0, 0);
 0323           ;                       LCD_PrHexByte(RTC_bReadHour());
 0323           ;                       LCD_Position(0, 3);
 0323           ;                       LCD_PrHexByte(RTC_bReadMinute());
 0323           ;                       LCD_Position(0, 6);
 0323           ;                       LCD_PrHexByte(RTC_bReadSecond());
 0323           ;                       
 0323           ;                       LCD_Position(1, 0);
 0323           ;                       LCD_PrHexInt(PWM16_CH0_wReadPulseWidth());      
 0323           ;                       M8C_EnableGInt;         
 0323           ;               #endif // DEBUG
 0323           ;                               
 0323           ;               if(!override)
 0323 62D000            mov REG[0xd0],>_override
 0326 3C0000            cmp [_override],0
 0329 B050              jnz L39
 032B 3C0100            cmp [_override+1],0
 032E B04B              jnz L39
 0330           X14:
 0330                   .dbline 256
 0330           ;               {
 0330           ;                       // Get datetime
 0330           ;                       local_datetime.valid = false;
 0330                   .dbline 256
 0330 62D000            mov REG[0xd0],>_local_datetime
 0333 550700            mov [_local_datetime+6+1],0
 0336 550600            mov [_local_datetime+6],0
 0339                   .dbline 257
 0339           ;                       NMEA_GetTimeUTC(NMEA_GPRMC, &gps_datetime);
 0339 5000              mov A,>_gps_datetime
 033B 08                push A
 033C 5000              mov A,<_gps_datetime
 033E 08                push A
 033F 5000              mov A,>_NMEA_GPRMC
 0341 08                push A
 0342 5000              mov A,<_NMEA_GPRMC
 0344 08                push A
 0345 9532              xcall _NMEA_GetTimeUTC
 0347 38FC              add SP,-4
 0349                   .dbline 258
 0349           ;                       if(gps_datetime.valid) 
 0349 62D000            mov REG[0xd0],>_gps_datetime
 034C 3C0600            cmp [_gps_datetime+6],0
 034F B006              jnz X15
 0351 3C0700            cmp [_gps_datetime+6+1],0
 0354 A01A              jz L42
 0356           X15:
 0356                   .dbline 260
 0356           ;                       {
 0356           ;                               utc_to_local(&gps_datetime, &local_datetime);
 0356                   .dbline 260
 0356 5000              mov A,>_local_datetime
 0358 08                push A
 0359 5000              mov A,<_local_datetime
 035B 08                push A
 035C 5000              mov A,>_gps_datetime
 035E 08                push A
 035F 5000              mov A,<_gps_datetime
 0361 08                push A
 0362 7C0B9E            xcall _utc_to_local
 0365                   .dbline 261
 0365           ;                               rtc_update(&local_datetime);
 0365 5000              mov A,>_local_datetime
 0367 08                push A
 0368 5000              mov A,<_local_datetime
 036A 08                push A
 036B 91CB              xcall _rtc_update
 036D 38FA              add SP,-6
 036F                   .dbline 262
 036F           ;                       }
 036F           L42:
 036F                   .dbline 265
 036F           ;                       
 036F           ;                       // Scheduler
 036F           ;                       Counter16_PwrUpd_WritePeriod(POWER_UPDATE_SLOW);
 036F 10                push X
 0370 5707              mov X,7
 0372 50D0              mov A,-48
 0374 7C0000            xcall _Counter16_PwrUpd_WritePeriod
 0377 20                pop X
 0378                   .dbline 266
 0378           ;                       schedule_init();
 0378 9180              xcall _schedule_init
 037A                   .dbline 267
 037A           ;               }
 037A           L39:
 037A                   .dbline 269
 037A           ;               
 037A           ;               Delay10msTimes(WAIT_PERIOD);
 037A 10                push X
 037B 5002              mov A,2
 037D 7C0000            xcall _Delay10msTimes
 0380 20                pop X
 0381                   .dbline 270
 0381           ;               if (override_counter > 0) override_counter--;
 0381 62D000            mov REG[0xd0],>_override_counter
 0384 3C0000            cmp [_override_counter],0
 0387 B010              jnz X16
 0389 3C0100            cmp [_override_counter+1],0
 038C B00B              jnz X16
 038E 3C0200            cmp [_override_counter+2],0
 0391 B006              jnz X16
 0393 3C0300            cmp [_override_counter+3],0
 0396 A012              jz L45
 0398           X16:
 0398                   .dbline 270
 0398 62D000            mov REG[0xd0],>_override_counter
 039B 160301            sub [_override_counter+3],1
 039E 1E0200            sbb [_override_counter+2],0
 03A1 1E0100            sbb [_override_counter+1],0
 03A4 1E0000            sbb [_override_counter],0
 03A7 800A              xjmp L46
 03A9           L45:
 03A9                   .dbline 271
 03A9           ;               else override = false;
 03A9 62D000            mov REG[0xd0],>_override
 03AC 550100            mov [_override+1],0
 03AF 550000            mov [_override],0
 03B2           L46:
 03B2                   .dbline 272
 03B2           ;               LED_Blue_Off();
 03B2 10                push X
 03B3 7C0000            xcall _LED_Blue_Off
 03B6 20                pop X
 03B7                   .dbline 273
 03B7           ;       }
 03B7           L23:
 03B7                   .dbline 191
 03B7 8E1E              xjmp L22
 03B9           X6:
 03B9                   .dbline -2
 03B9           L21:
 03B9 38FF              add SP,-1
 03BB 20                pop X
 03BC                   .dbline 0 ; func end
 03BC 8FFF              jmp .
 03BE                   .dbsym l t 0 c
 03BE                   .dbend
 03BE                   .dbfunc e set_power _set_power fV
 03BE           ;            pwr -> X-5
 03BE           _set_power::
 03BE                   .dbline -1
 03BE 10                push X
 03BF 4F                mov X,SP
 03C0                   .dbline 277
 03C0           ; }
 03C0           ; 
 03C0           ; void set_power(unsigned int pwr)
 03C0           ; {
 03C0                   .dbline 278
 03C0           ;       if(pwr > POWER_MAX) pwr = POWER_MAX;
 03C0 50B0              mov A,-80
 03C2 13FC              sub A,[X-4]
 03C4 5036              mov A,54
 03C6 1BFB              sbb A,[X-5]
 03C8 D007              jnc L48
 03CA           X17:
 03CA                   .dbline 278
 03CA 56FCB0            mov [X-4],-80
 03CD 56FB36            mov [X-5],54
 03D0           L48:
 03D0                   .dbline 279
 03D0           ;       power_target = pwr;
 03D0 62D000            mov REG[0xd0],>_power_target
 03D3 52FC              mov A,[X-4]
 03D5 5301              mov [_power_target+1],A
 03D7 52FB              mov A,[X-5]
 03D9 5300              mov [_power_target],A
 03DB                   .dbline -2
 03DB           L47:
 03DB 20                pop X
 03DC                   .dbline 0 ; func end
 03DC 7F                ret
 03DD                   .dbsym l pwr -5 i
 03DD                   .dbend
 03DD                   .dbfunc e override_enable _override_enable fV
 03DD           _override_enable::
 03DD                   .dbline -1
 03DD                   .dbline 283
 03DD           ; }
 03DD           ; 
 03DD           ; void override_enable(void)
 03DD           ; {
 03DD                   .dbline 284
 03DD           ;       override = true;
 03DD 62D000            mov REG[0xd0],>_override
 03E0 550101            mov [_override+1],1
 03E3 550000            mov [_override],0
 03E6                   .dbline 285
 03E6           ;       override_counter = OVERRIDE_TIMEOUT;
 03E6 62D000            mov REG[0xd0],>_override_counter
 03E9 550000            mov [_override_counter],0
 03EC 550108            mov [_override_counter+1],8
 03EF 55023D            mov [_override_counter+2],61
 03F2 550360            mov [_override_counter+3],96
 03F5                   .dbline -2
 03F5           L50:
 03F5                   .dbline 0 ; func end
 03F5 7F                ret
 03F6                   .dbend
 03F6                   .dbfunc e update_power _update_power fV
 03F6           ;            pwr -> X+0
 03F6           _update_power::
 03F6                   .dbline -1
 03F6 10                push X
 03F7 4F                mov X,SP
 03F8 3802              add SP,2
 03FA                   .dbline 289
 03FA           ; }
 03FA           ; 
 03FA           ; void update_power(void)
 03FA           ; {
 03FA                   .dbline 293
 03FA           ;       unsigned int pwr;
 03FA           ;       
 03FA           ;       // CH0
 03FA           ;       pwr = PWM16_CH0_wReadPulseWidth();
 03FA 10                push X
 03FB 7C0000            xcall _PWM16_CH0_wReadPulseWidth
 03FE 62D000            mov REG[0xd0],>__r0
 0401 5A00              mov [__r0],X
 0403 20                pop X
 0404 5401              mov [X+1],A
 0406 5100              mov A,[__r0]
 0408 5400              mov [X+0],A
 040A                   .dbline 294
 040A           ;       if(pwr < power_target) pwr += POWER_STEP;
 040A 62D000            mov REG[0xd0],>_power_target
 040D 5201              mov A,[X+1]
 040F 1201              sub A,[_power_target+1]
 0411 5200              mov A,[X+0]
 0413 1A00              sbb A,[_power_target]
 0415 D006              jnc L52
 0417           X18:
 0417                   .dbline 294
 0417 7701              inc [X+1]
 0419 0F0000            adc [X+0],0
 041C           L52:
 041C                   .dbline 295
 041C           ;       if(pwr > power_target) pwr -= POWER_STEP;
 041C 62D000            mov REG[0xd0],>_power_target
 041F 5101              mov A,[_power_target+1]
 0421 1301              sub A,[X+1]
 0423 5100              mov A,[_power_target]
 0425 1B00              sbb A,[X+0]
 0427 D006              jnc L54
 0429           X19:
 0429                   .dbline 295
 0429 7B01              dec [X+1]
 042B 1F0000            sbb [X+0],0
 042E           L54:
 042E                   .dbline 296
 042E           ;       PWM16_CH0_WritePulseWidth(pwr);
 042E 10                push X
 042F 5200              mov A,[X+0]
 0431 08                push A
 0432 5201              mov A,[X+1]
 0434 20                pop X
 0435 7C0000            xcall _PWM16_CH0_WritePulseWidth
 0438                   .dbline 299
 0438           ;       
 0438           ;       // CH1
 0438           ;       pwr = PWM16_CH1_wReadPulseWidth();
 0438 7C0000            xcall _PWM16_CH1_wReadPulseWidth
 043B 62D000            mov REG[0xd0],>__r0
 043E 5A00              mov [__r0],X
 0440 20                pop X
 0441 5401              mov [X+1],A
 0443 5100              mov A,[__r0]
 0445 5400              mov [X+0],A
 0447                   .dbline 300
 0447           ;       if(pwr < power_target) pwr += POWER_STEP;
 0447 62D000            mov REG[0xd0],>_power_target
 044A 5201              mov A,[X+1]
 044C 1201              sub A,[_power_target+1]
 044E 5200              mov A,[X+0]
 0450 1A00              sbb A,[_power_target]
 0452 D006              jnc L56
 0454           X20:
 0454                   .dbline 300
 0454 7701              inc [X+1]
 0456 0F0000            adc [X+0],0
 0459           L56:
 0459                   .dbline 301
 0459           ;       if(pwr > power_target) pwr -= POWER_STEP;
 0459 62D000            mov REG[0xd0],>_power_target
 045C 5101              mov A,[_power_target+1]
 045E 1301              sub A,[X+1]
 0460 5100              mov A,[_power_target]
 0462 1B00              sbb A,[X+0]
 0464 D006              jnc L58
 0466           X21:
 0466                   .dbline 301
 0466 7B01              dec [X+1]
 0468 1F0000            sbb [X+0],0
 046B           L58:
 046B                   .dbline 302
 046B           ;       PWM16_CH1_WritePulseWidth(pwr);
 046B 10                push X
 046C 5200              mov A,[X+0]
 046E 08                push A
 046F 5201              mov A,[X+1]
 0471 20                pop X
 0472 7C0000            xcall _PWM16_CH1_WritePulseWidth
 0475 20                pop X
 0476                   .dbline -2
 0476           L51:
 0476 38FE              add SP,-2
 0478 20                pop X
 0479                   .dbline 0 ; func end
 0479 7F                ret
 047A                   .dbsym l pwr 0 i
 047A                   .dbend
 047A                   .dbfunc e schedule_processing _schedule_processing fV
 047A           ;              i -> X+0
 047A           ;           hour -> X-4
 047A           _schedule_processing::
 047A                   .dbline -1
 047A 10                push X
 047B 4F                mov X,SP
 047C 3801              add SP,1
 047E                   .dbline 306
 047E           ; }
 047E           ; 
 047E           ; void schedule_processing(unsigned char hour)
 047E           ; {
 047E                   .dbline 308
 047E           ;     unsigned char i; 
 047E           ;     for(i = 0; i < sizeof(schedule); i++)
 047E 560000            mov [X+0],0
 0481 806F              xjmp L64
 0483           L61:
 0483                   .dbline 309
 0483           ;     {
 0483                   .dbline 310
 0483           ;         if(hour == schedule[i][0])
 0483 62D000            mov REG[0xd0],>__r0
 0486 5200              mov A,[X+0]
 0488 5300              mov [__r1],A
 048A 550000            mov [__r0],0
 048D 6500              asl [__r1]
 048F 6B00              rlc [__r0]
 0491 6500              asl [__r1]
 0493 6B00              rlc [__r0]
 0495 060012            add [__r1],<_schedule
 0498 0E0012            adc [__r0],>_schedule
 049B 5100              mov A,[__r0]
 049D 10                push X
 049E 5800              mov X,[__r1]
 04A0 08                push A
 04A1 28                romx
 04A2 5300              mov [__r0],A
 04A4 18                pop A
 04A5 75                inc X
 04A6 0900              adc A,0
 04A8 28                romx
 04A9 5300              mov [__r1],A
 04AB 20                pop X
 04AC 52FC              mov A,[X-4]
 04AE 5300              mov [__r3],A
 04B0 5000              mov A,0
 04B2 3A00              cmp A,[__r0]
 04B4 B03A              jnz L65
 04B6 5100              mov A,[__r3]
 04B8 3A00              cmp A,[__r1]
 04BA B034              jnz L65
 04BC           X22:
 04BC                   .dbline 312
 04BC           ;         {
 04BC           ;             set_power(schedule[i][1]);
 04BC                   .dbline 312
 04BC 62D000            mov REG[0xd0],>__r0
 04BF 5200              mov A,[X+0]
 04C1 5300              mov [__r1],A
 04C3 550000            mov [__r0],0
 04C6 6500              asl [__r1]
 04C8 6B00              rlc [__r0]
 04CA 6500              asl [__r1]
 04CC 6B00              rlc [__r0]
 04CE 060014            add [__r1],<_schedule+2
 04D1 0E0014            adc [__r0],>_schedule+2
 04D4 5100              mov A,[__r0]
 04D6 10                push X
 04D7 5800              mov X,[__r1]
 04D9 08                push A
 04DA 28                romx
 04DB 5300              mov [__r0],A
 04DD 18                pop A
 04DE 75                inc X
 04DF 0900              adc A,0
 04E1 28                romx
 04E2 5300              mov [__r1],A
 04E4 20                pop X
 04E5 5100              mov A,[__r0]
 04E7 08                push A
 04E8 5100              mov A,[__r1]
 04EA 08                push A
 04EB 9ED1              xcall _set_power
 04ED 38FE              add SP,-2
 04EF                   .dbline 313
 04EF           ;         }
 04EF           L65:
 04EF                   .dbline 314
 04EF           ;     }
 04EF           L62:
 04EF                   .dbline 308
 04EF 7700              inc [X+0]
 04F1           L64:
 04F1                   .dbline 308
 04F1 3D0008            cmp [X+0],8
 04F4 CF8E              jc L61
 04F6           X23:
 04F6                   .dbline -2
 04F6           L60:
 04F6 38FF              add SP,-1
 04F8 20                pop X
 04F9                   .dbline 0 ; func end
 04F9 7F                ret
 04FA                   .dbsym l i 0 c
 04FA                   .dbsym l hour -4 c
 04FA                   .dbend
 04FA                   .dbfunc e schedule_init _schedule_init fV
 04FA           ;           hour -> X+0
 04FA           _schedule_init::
 04FA                   .dbline -1
 04FA 10                push X
 04FB 4F                mov X,SP
 04FC 3801              add SP,1
 04FE                   .dbline 318
 04FE           ; }
 04FE           ; 
 04FE           ; void schedule_init(void)
 04FE           ; {
 04FE                   .dbline 321
 04FE           ;     unsigned char hour;
 04FE           ;       
 04FE           ;       for(hour = 0; hour <= HOUR_MAX; hour++)
 04FE 560000            mov [X+0],0
 0501 800A              xjmp L72
 0503           L69:
 0503                   .dbline 322
 0503           ;     {
 0503                   .dbline 323
 0503           ;         schedule_processing(hour);
 0503 5200              mov A,[X+0]
 0505 08                push A
 0506 9F72              xcall _schedule_processing
 0508 38FF              add SP,-1
 050A                   .dbline 324
 050A           ;     }
 050A           L70:
 050A                   .dbline 321
 050A 7700              inc [X+0]
 050C           L72:
 050C                   .dbline 321
 050C 5017              mov A,23
 050E 3B00              cmp A,[X+0]
 0510 DFF2              jnc L69
 0512           X24:
 0512                   .dbline 325
 0512           ;     for(hour = 0; hour <= bcd_to_byte(RTC_bReadHour()); hour++)
 0512 560000            mov [X+0],0
 0515 800A              xjmp L76
 0517           L73:
 0517                   .dbline 326
 0517           ;     {
 0517                   .dbline 327
 0517           ;         schedule_processing(hour);
 0517 5200              mov A,[X+0]
 0519 08                push A
 051A 9F5E              xcall _schedule_processing
 051C 38FF              add SP,-1
 051E                   .dbline 328
 051E           ;     }
 051E           L74:
 051E                   .dbline 325
 051E 7700              inc [X+0]
 0520           L76:
 0520                   .dbline 325
 0520 10                push X
 0521 7C0000            xcall _RTC_bReadHour
 0524 20                pop X
 0525 62D000            mov REG[0xd0],>__r0
 0528 08                push A
 0529 963C              xcall _bcd_to_byte
 052B 38FF              add SP,-1
 052D 62D000            mov REG[0xd0],>__r0
 0530 3B00              cmp A,[X+0]
 0532 DFE4              jnc L73
 0534           X25:
 0534                   .dbline -2
 0534           L68:
 0534 38FF              add SP,-1
 0536 20                pop X
 0537                   .dbline 0 ; func end
 0537 7F                ret
 0538                   .dbsym l hour 0 c
 0538                   .dbend
 0538                   .dbfunc e rtc_update _rtc_update fV
 0538           ;       datetime -> X-5
 0538           _rtc_update::
 0538                   .dbline -1
 0538 10                push X
 0539 4F                mov X,SP
 053A                   .dbline 332
 053A           ; }
 053A           ; 
 053A           ; void rtc_update(struct datetime *datetime)
 053A           ; {
 053A                   .dbline 333
 053A           ;       RTC_Stop();
 053A 10                push X
 053B 7C0000            xcall _RTC_Stop
 053E 20                pop X
 053F                   .dbline 334
 053F           ;       RTC_SetHour(byte_to_bcd(datetime->hour));
 053F 62D000            mov REG[0xd0],>__r0
 0542 52FC              mov A,[X-4]
 0544 0102              add A,2
 0546 5300              mov [__r1],A
 0548 52FB              mov A,[X-5]
 054A 0900              adc A,0
 054C 60D4              mov REG[0xd4],A
 054E 3E00              mvi A,[__r1]
 0550 08                push A
 0551 95DD              xcall _byte_to_bcd
 0553 38FF              add SP,-1
 0555 62D000            mov REG[0xd0],>__r0
 0558 10                push X
 0559 7C0000            xcall _RTC_SetHour
 055C 20                pop X
 055D                   .dbline 335
 055D           ;       RTC_SetMinute(byte_to_bcd(datetime->min));
 055D 62D000            mov REG[0xd0],>__r0
 0560 52FC              mov A,[X-4]
 0562 0101              add A,1
 0564 5300              mov [__r1],A
 0566 52FB              mov A,[X-5]
 0568 0900              adc A,0
 056A 60D4              mov REG[0xd4],A
 056C 3E00              mvi A,[__r1]
 056E 08                push A
 056F 95BF              xcall _byte_to_bcd
 0571 38FF              add SP,-1
 0573 62D000            mov REG[0xd0],>__r0
 0576 10                push X
 0577 7C0000            xcall _RTC_SetMinute
 057A 20                pop X
 057B                   .dbline 336
 057B           ;       RTC_SetSecond(byte_to_bcd(datetime->sec));
 057B 62D000            mov REG[0xd0],>__r0
 057E 52FC              mov A,[X-4]
 0580 5300              mov [__r1],A
 0582 52FB              mov A,[X-5]
 0584 60D4              mov REG[0xd4],A
 0586 3E00              mvi A,[__r1]
 0588 08                push A
 0589 95A5              xcall _byte_to_bcd
 058B 38FF              add SP,-1
 058D 62D000            mov REG[0xd0],>__r0
 0590 10                push X
 0591 7C0000            xcall _RTC_SetSecond
 0594                   .dbline 337
 0594           ;       RTC_Start();
 0594 7C0000            xcall _RTC_Start
 0597 20                pop X
 0598                   .dbline -2
 0598           L77:
 0598 20                pop X
 0599                   .dbline 0 ; func end
 0599 7F                ret
 059A                   .dbsym l datetime -5 pS[datetime]
 059A                   .dbend
 059A                   .dbfunc e check_fld _check_fld fI
 059A           ;            cmd -> X-5
 059A           _check_fld::
 059A                   .dbline -1
 059A 10                push X
 059B 4F                mov X,SP
 059C 3802              add SP,2
 059E                   .dbline 341
 059E           ; }
 059E           ; 
 059E           ; bool check_fld(const char *cmd)
 059E           ; {
 059E                   .dbline 342
 059E           ;     return !str_cmp_const(fld_buf, cmd, strlen(fld_buf) - 1);
 059E 5000              mov A,>_fld_buf
 05A0 08                push A
 05A1 5000              mov A,<_fld_buf
 05A3 08                push A
 05A4 7C0000            xcall _strlenLMM
 05A7 62D000            mov REG[0xd0],>__r0
 05AA 160001            sub [__r1],1
 05AD 1E0000            sbb [__r0],0
 05B0 5100              mov A,[__r1]
 05B2 08                push A
 05B3 52FB              mov A,[X-5]
 05B5 08                push A
 05B6 52FC              mov A,[X-4]
 05B8 08                push A
 05B9 5000              mov A,>_fld_buf
 05BB 08                push A
 05BC 5000              mov A,<_fld_buf
 05BE 08                push A
 05BF 951D              xcall _str_cmp_const
 05C1 38F9              add SP,-7
 05C3 62D000            mov REG[0xd0],>__r0
 05C6 3900              cmp A,0
 05C8 B009              jnz L80
 05CA 560101            mov [X+1],1
 05CD 560000            mov [X+0],0
 05D0 8007              xjmp L81
 05D2           L80:
 05D2 560100            mov [X+1],0
 05D5 560000            mov [X+0],0
 05D8           L81:
 05D8 62D000            mov REG[0xd0],>__r0
 05DB 5201              mov A,[X+1]
 05DD 5300              mov [__r1],A
 05DF 5200              mov A,[X+0]
 05E1 5300              mov [__r0],A
 05E3                   .dbline -2
 05E3           L78:
 05E3 38FE              add SP,-2
 05E5 20                pop X
 05E6                   .dbline 0 ; func end
 05E6 7F                ret
 05E7                   .dbsym l cmd -5 pkc
 05E7                   .dbend
 05E7                   .dbfunc e NMEA_GetField _NMEA_GetField fV
 05E7           ;          count -> X+1
 05E7           ;              i -> X+0
 05E7           ;         result -> X-8
 05E7           ;          field -> X-6
 05E7           ;         packet -> X-5
 05E7           _NMEA_GetField::
 05E7                   .dbline -1
 05E7 10                push X
 05E8 4F                mov X,SP
 05E9 3806              add SP,6
 05EB                   .dbline 346
 05EB           ; }
 05EB           ; 
 05EB           ; void NMEA_GetField(char *packet, unsigned char field, char *result)
 05EB           ; {
 05EB                   .dbline 348
 05EB           ;     unsigned char i;
 05EB           ;     unsigned char count = 0;
 05EB 560100            mov [X+1],0
 05EE                   .dbline 351
 05EE           ;     
 05EE           ;     // Search field
 05EE           ;     for (i = 0; (i < NMEA_MAX_SIZE) & (count < field); i++)
 05EE 560000            mov [X+0],0
 05F1 803F              xjmp L86
 05F3           L83:
 05F3                   .dbline 352
 05F3           ;     {
 05F3                   .dbline 353
 05F3           ;         if (packet[i] == NMEA_FIELD_DELIMITER) count++;
 05F3 62D000            mov REG[0xd0],>__r0
 05F6 5200              mov A,[X+0]
 05F8 5300              mov [__r1],A
 05FA 550000            mov [__r0],0
 05FD 52FC              mov A,[X-4]
 05FF 0400              add [__r1],A
 0601 52FB              mov A,[X-5]
 0603 0C00              adc [__r0],A
 0605 5100              mov A,[__r0]
 0607 60D4              mov REG[0xd4],A
 0609 3E00              mvi A,[__r1]
 060B 392C              cmp A,44
 060D B003              jnz L89
 060F                   .dbline 353
 060F 7701              inc [X+1]
 0611           L89:
 0611                   .dbline 354
 0611           ;               if (packet[i] == 0) break;
 0611 62D000            mov REG[0xd0],>__r0
 0614 5200              mov A,[X+0]
 0616 5300              mov [__r1],A
 0618 550000            mov [__r0],0
 061B 52FC              mov A,[X-4]
 061D 0400              add [__r1],A
 061F 52FB              mov A,[X-5]
 0621 0C00              adc [__r0],A
 0623 5100              mov A,[__r0]
 0625 60D4              mov REG[0xd4],A
 0627 3E00              mvi A,[__r1]
 0629 3900              cmp A,0
 062B B003              jnz L91
 062D                   .dbline 354
 062D 8040              xjmp L85
 062F           L91:
 062F                   .dbline 355
 062F           ;     }
 062F           L84:
 062F                   .dbline 351
 062F 7700              inc [X+0]
 0631           L86:
 0631                   .dbline 351
 0631 3D0052            cmp [X+0],82
 0634 D009              jnc L93
 0636           X26:
 0636 560301            mov [X+3],1
 0639 560200            mov [X+2],0
 063C 8007              xjmp L94
 063E           L93:
 063E 560300            mov [X+3],0
 0641 560200            mov [X+2],0
 0644           L94:
 0644 5201              mov A,[X+1]
 0646 3BFA              cmp A,[X-6]
 0648 D009              jnc L95
 064A           X27:
 064A 560501            mov [X+5],1
 064D 560400            mov [X+4],0
 0650 8007              xjmp L96
 0652           L95:
 0652 560500            mov [X+5],0
 0655 560400            mov [X+4],0
 0658           L96:
 0658 62D000            mov REG[0xd0],>__r0
 065B 5203              mov A,[X+3]
 065D 2305              and A,[X+5]
 065F 5300              mov [__r1],A
 0661 5202              mov A,[X+2]
 0663 2304              and A,[X+4]
 0665 3900              cmp A,0
 0667 BF8B              jnz L83
 0669 3C0000            cmp [__r1],0
 066C BF86              jnz L83
 066E           X28:
 066E           L85:
 066E                   .dbline 358
 066E           ;     
 066E           ;     // Measure field size
 066E           ;     for (count = 0; count < NMEA_MAX_SIZE; count++)
 066E 560100            mov [X+1],0
 0671 8057              xjmp L100
 0673           L97:
 0673                   .dbline 359
 0673           ;     {
 0673                   .dbline 360
 0673           ;         if (packet[i + count] == NMEA_FIELD_DELIMITER) break;
 0673 62D000            mov REG[0xd0],>__r0
 0676 5201              mov A,[X+1]
 0678 5300              mov [__r1],A
 067A 550000            mov [__r0],0
 067D 5200              mov A,[X+0]
 067F 0200              add A,[__r1]
 0681 5300              mov [__r1],A
 0683 5000              mov A,0
 0685 0A00              adc A,[__r0]
 0687 5300              mov [__r0],A
 0689 52FC              mov A,[X-4]
 068B 0400              add [__r1],A
 068D 52FB              mov A,[X-5]
 068F 0C00              adc [__r0],A
 0691 5100              mov A,[__r0]
 0693 60D4              mov REG[0xd4],A
 0695 3E00              mvi A,[__r1]
 0697 392C              cmp A,44
 0699 B003              jnz L101
 069B                   .dbline 360
 069B 8032              xjmp L99
 069D           L101:
 069D                   .dbline 361
 069D           ;         if (packet[i + count] == 0u) break;
 069D 62D000            mov REG[0xd0],>__r0
 06A0 5201              mov A,[X+1]
 06A2 5300              mov [__r1],A
 06A4 550000            mov [__r0],0
 06A7 5200              mov A,[X+0]
 06A9 0200              add A,[__r1]
 06AB 5300              mov [__r1],A
 06AD 5000              mov A,0
 06AF 0A00              adc A,[__r0]
 06B1 5300              mov [__r0],A
 06B3 52FC              mov A,[X-4]
 06B5 0400              add [__r1],A
 06B7 52FB              mov A,[X-5]
 06B9 0C00              adc [__r0],A
 06BB 5100              mov A,[__r0]
 06BD 60D4              mov REG[0xd4],A
 06BF 3E00              mvi A,[__r1]
 06C1 3900              cmp A,0
 06C3 B003              jnz L103
 06C5                   .dbline 361
 06C5 8008              xjmp L99
 06C7           L103:
 06C7                   .dbline 362
 06C7           ;     }
 06C7           L98:
 06C7                   .dbline 358
 06C7 7701              inc [X+1]
 06C9           L100:
 06C9                   .dbline 358
 06C9 3D0152            cmp [X+1],82
 06CC CFA6              jc L97
 06CE           X29:
 06CE           L99:
 06CE                   .dbline 363
 06CE           ;     strncpy(result, packet + i, count + 1);  // Add 1 to count for null terminator
 06CE 62D000            mov REG[0xd0],>__r0
 06D1 5201              mov A,[X+1]
 06D3 5300              mov [__r1],A
 06D5 550000            mov [__r0],0
 06D8 060001            add [__r1],1
 06DB 0E0000            adc [__r0],0
 06DE 5100              mov A,[__r0]
 06E0 08                push A
 06E1 5100              mov A,[__r1]
 06E3 08                push A
 06E4 5200              mov A,[X+0]
 06E6 5300              mov [__r1],A
 06E8 550000            mov [__r0],0
 06EB 52FC              mov A,[X-4]
 06ED 0400              add [__r1],A
 06EF 52FB              mov A,[X-5]
 06F1 0C00              adc [__r0],A
 06F3 5100              mov A,[__r0]
 06F5 08                push A
 06F6 5100              mov A,[__r1]
 06F8 08                push A
 06F9 52F8              mov A,[X-8]
 06FB 08                push A
 06FC 52F9              mov A,[X-7]
 06FE 08                push A
 06FF 7C0000            xcall _strncpy
 0702 38FA              add SP,-6
 0704                   .dbline 364
 0704           ;       result[count] = 0u;     // Add null terminator
 0704 62D000            mov REG[0xd0],>__r0
 0707 5201              mov A,[X+1]
 0709 5300              mov [__r1],A
 070B 550000            mov [__r0],0
 070E 52F9              mov A,[X-7]
 0710 0400              add [__r1],A
 0712 52F8              mov A,[X-8]
 0714 0C00              adc [__r0],A
 0716 5100              mov A,[__r0]
 0718 60D5              mov REG[0xd5],A
 071A 5000              mov A,0
 071C 3F00              mvi [__r1],A
 071E                   .dbline -2
 071E           L82:
 071E 38FA              add SP,-6
 0720 20                pop X
 0721                   .dbline 0 ; func end
 0721 7F                ret
 0722                   .dbsym l count 1 c
 0722                   .dbsym l i 0 c
 0722                   .dbsym l result -8 pc
 0722                   .dbsym l field -6 c
 0722                   .dbsym l packet -5 pc
 0722                   .dbend
                        .area lit(rom, con, rel, lit)
 001A           L106:
 001A 2530325800        .byte 37,48,50,'X,0
                        .area text(rom, con, rel)
 0722                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0722                   .dbfunc e NMEA_handle_packet _NMEA_handle_packet fI
 0722           ; calculated_checksum -> X+11
 0722           ; checksum_delimiter -> X+9
 0722           ;              n -> X+8
 0722           ; checksum_format -> X+3
 0722           ;       checksum -> X+2
 0722           ;          error -> X+1
 0722           ;              i -> X+0
 0722           ;      NMEA_data -> X-7
 0722           ;         packet -> X-5
 0722           _NMEA_handle_packet::
 0722                   .dbline -1
 0722 10                push X
 0723 4F                mov X,SP
 0724 3814              add SP,20
 0726                   .dbline 368
 0726           ; }
 0726           ; 
 0726           ; bool NMEA_handle_packet(char *packet, char *NMEA_data)
 0726           ; {
 0726                   .dbline 370
 0726           ;     unsigned char i, n;
 0726           ;     unsigned char error = 0;
 0726 560100            mov [X+1],0
 0729                   .dbline 371
 0729           ;     unsigned char checksum = 0;
 0729 560200            mov [X+2],0
 072C                   .dbline 374
 072C           ;     char *checksum_delimiter;
 072C           ;     char calculated_checksum[3];
 072C           ;       char checksum_format[] = "%02X";
 072C 62D000            mov REG[0xd0],>__r0
 072F 55001A            mov [__r1],<L106
 0732 55001A            mov [__r0],>L106
 0735 5A00              mov [__r3],X
 0737 060003            add [__r3],3
 073A 62D503            mov REG[0xd5],3
 073D 10                push X
 073E 550000            mov [__rX],0
 0741 5100              mov A,[__r0]
 0743 5800              mov X,[__r1]
 0745           X30:
 0745 08                push A
 0746 28                romx
 0747 62D000            mov REG[0xd0],>__r0
 074A 3F00              mvi [__r3],A
 074C 18                pop A
 074D 75                inc X
 074E 0900              adc A,0
 0750 7600              inc [__rX]
 0752 3C0005            cmp [__rX],5
 0755 BFEF              jnz X30
 0757 20                pop X
 0758                   .dbline 377
 0758           ;               
 0758           ;     // Check if appropriate packet is handled
 0758           ;       if (str_cmp(packet, NMEA_data, NMEA_HEADER_SIZE) == 0u)
 0758 5003              mov A,3
 075A 08                push A
 075B 52F9              mov A,[X-7]
 075D 08                push A
 075E 52FA              mov A,[X-6]
 0760 08                push A
 0761 52FB              mov A,[X-5]
 0763 08                push A
 0764 52FC              mov A,[X-4]
 0766 08                push A
 0767 9324              xcall _str_cmp
 0769 38FB              add SP,-5
 076B 62D000            mov REG[0xd0],>__r0
 076E 3900              cmp A,0
 0770 B0E9              jnz L107
 0772                   .dbline 380
 0772           ;     {
 0772           ;               // Check for receive errors
 0772           ;         for(i = 0; i < NMEA_MAX_SIZE; i++)
 0772                   .dbline 380
 0772 560000            mov [X+0],0
 0775 80C1              xjmp L112
 0777           L109:
 0777                   .dbline 381
 0777           ;         {
 0777                   .dbline 382
 0777           ;             if ((packet[i] < 32) & (packet[i] != 0x0D) & (packet[i] != NMEA_END_DELIMITER)) 
 0777 62D000            mov REG[0xd0],>__r0
 077A 5200              mov A,[X+0]
 077C 5300              mov [__r1],A
 077E 550000            mov [__r0],0
 0781 52FC              mov A,[X-4]
 0783 0400              add [__r1],A
 0785 52FB              mov A,[X-5]
 0787 0C00              adc [__r0],A
 0789 5100              mov A,[__r0]
 078B 60D4              mov REG[0xd4],A
 078D 3E00              mvi A,[__r1]
 078F 3920              cmp A,32
 0791 D009              jnc L118
 0793           X31:
 0793 560F01            mov [X+15],1
 0796 560E00            mov [X+14],0
 0799 8007              xjmp L119
 079B           L118:
 079B 560F00            mov [X+15],0
 079E 560E00            mov [X+14],0
 07A1           L119:
 07A1 62D000            mov REG[0xd0],>__r0
 07A4 5200              mov A,[X+0]
 07A6 5300              mov [__r1],A
 07A8 550000            mov [__r0],0
 07AB 52FC              mov A,[X-4]
 07AD 0400              add [__r1],A
 07AF 52FB              mov A,[X-5]
 07B1 0C00              adc [__r0],A
 07B3 5100              mov A,[__r0]
 07B5 60D4              mov REG[0xd4],A
 07B7 3E00              mvi A,[__r1]
 07B9 390D              cmp A,13
 07BB A009              jz L120
 07BD 561101            mov [X+17],1
 07C0 561000            mov [X+16],0
 07C3 8007              xjmp L121
 07C5           L120:
 07C5 561100            mov [X+17],0
 07C8 561000            mov [X+16],0
 07CB           L121:
 07CB 62D000            mov REG[0xd0],>__r0
 07CE 5200              mov A,[X+0]
 07D0 5300              mov [__r1],A
 07D2 550000            mov [__r0],0
 07D5 52FC              mov A,[X-4]
 07D7 0400              add [__r1],A
 07D9 52FB              mov A,[X-5]
 07DB 0C00              adc [__r0],A
 07DD 5100              mov A,[__r0]
 07DF 60D4              mov REG[0xd4],A
 07E1 3E00              mvi A,[__r1]
 07E3 390A              cmp A,10
 07E5 A009              jz L122
 07E7 561301            mov [X+19],1
 07EA 561200            mov [X+18],0
 07ED 8007              xjmp L123
 07EF           L122:
 07EF 561300            mov [X+19],0
 07F2 561200            mov [X+18],0
 07F5           L123:
 07F5 62D000            mov REG[0xd0],>__r0
 07F8 520F              mov A,[X+15]
 07FA 2311              and A,[X+17]
 07FC 5300              mov [__r1],A
 07FE 520E              mov A,[X+14]
 0800 2310              and A,[X+16]
 0802 5300              mov [__r0],A
 0804 5213              mov A,[X+19]
 0806 2400              and [__r1],A
 0808 5212              mov A,[X+18]
 080A 2400              and [__r0],A
 080C B006              jnz X32
 080E 3C0000            cmp [__r1],0
 0811 A005              jz L113
 0813           X32:
 0813                   .dbline 384
 0813           ;             {
 0813           ;                 error++;
 0813                   .dbline 384
 0813 7701              inc [X+1]
 0815                   .dbline 385
 0815           ;                 break;
 0815 8026              xjmp L111
 0817           L113:
 0817                   .dbline 387
 0817           ;             }
 0817           ;             if (packet[i] != NMEA_END_DELIMITER) break;
 0817 62D000            mov REG[0xd0],>__r0
 081A 5200              mov A,[X+0]
 081C 5300              mov [__r1],A
 081E 550000            mov [__r0],0
 0821 52FC              mov A,[X-4]
 0823 0400              add [__r1],A
 0825 52FB              mov A,[X-5]
 0827 0C00              adc [__r0],A
 0829 5100              mov A,[__r0]
 082B 60D4              mov REG[0xd4],A
 082D 3E00              mvi A,[__r1]
 082F 390A              cmp A,10
 0831 A003              jz L124
 0833                   .dbline 387
 0833 8008              xjmp L111
 0835           L124:
 0835                   .dbline 388
 0835           ;         }
 0835           L110:
 0835                   .dbline 380
 0835 7700              inc [X+0]
 0837           L112:
 0837                   .dbline 380
 0837 3D0052            cmp [X+0],82
 083A CF3C              jc L109
 083C           X33:
 083C           L111:
 083C                   .dbline 391
 083C           ;               
 083C           ;         // Copy buffer to NMEA packet if no errors found
 083C           ;         if (!error) strncpy(NMEA_data, packet, NMEA_MAX_SIZE); 
 083C 3D0100            cmp [X+1],0
 083F B01C              jnz L108
 0841                   .dbline 391
 0841 5000              mov A,0
 0843 08                push A
 0844 5052              mov A,82
 0846 08                push A
 0847 52FB              mov A,[X-5]
 0849 08                push A
 084A 52FC              mov A,[X-4]
 084C 08                push A
 084D 52F9              mov A,[X-7]
 084F 08                push A
 0850 52FA              mov A,[X-6]
 0852 08                push A
 0853 7C0000            xcall _strncpy
 0856 38FA              add SP,-6
 0858                   .dbline 409
 0858           ;               
 0858           ;               /*
 0858           ;               // Validate checksum and cut packet if no receive errors
 0858           ;         if (!error)
 0858           ;         {
 0858           ;             // Find checksum field
 0858           ;             checksum_delimiter = memchr(packet, NMEA_CHECKSUM_DELIMITER, NMEA_MAX_SIZE);
 0858           ;             i = (unsigned char)(checksum_delimiter - packet);
 0858           ;             
 0858           ;             // Calculate checksum and compare
 0858           ;             for (n = 0; n < i; n++) checksum ^= packet[n];
 0858           ;             sprintf(calculated_checksum, checksum_format, checksum);
 0858           ;             
 0858           ;             packet[i] = 0; // Cut string to NMEA_CHECKSUM_DELIMITER
 0858           ;             if(strncmp(calculated_checksum, checksum_delimiter + 1, sizeof(calculated_checksum) - 1)) error++;
 0858           ;         }
 0858           ;               */
 0858           ;     }
 0858 8003              xjmp L108
 085A           L107:
 085A                   .dbline 410
 085A           ;       else error++;
 085A 7701              inc [X+1]
 085C           L108:
 085C                   .dbline 412
 085C           ;       
 085C           ;       if(error) return false;
 085C 3D0100            cmp [X+1],0
 085F A00C              jz L128
 0861                   .dbline 412
 0861 62D000            mov REG[0xd0],>__r0
 0864 550000            mov [__r1],0
 0867 550000            mov [__r0],0
 086A 800A              xjmp L105
 086C           L128:
 086C                   .dbline 413
 086C           ;       else return true;       
 086C 62D000            mov REG[0xd0],>__r0
 086F 550001            mov [__r1],1
 0872 550000            mov [__r0],0
 0875                   .dbline -2
 0875           L105:
 0875 38EC              add SP,-20
 0877 20                pop X
 0878                   .dbline 0 ; func end
 0878 7F                ret
 0879                   .dbsym l calculated_checksum 11 A[3:3]c
 0879                   .dbsym l checksum_delimiter 9 pc
 0879                   .dbsym l n 8 c
 0879                   .dbsym l checksum_format 3 A[5:5]c
 0879                   .dbsym l checksum 2 c
 0879                   .dbsym l error 1 c
 0879                   .dbsym l i 0 c
 0879                   .dbsym l NMEA_data -7 pc
 0879                   .dbsym l packet -5 pc
 0879                   .dbend
 0879                   .dbfunc e NMEA_GetTimeUTC _NMEA_GetTimeUTC fV
 0879           ;          field -> X+82
 0879           ;            buf -> X+0
 0879           ;   gps_datetime -> X-7
 0879           ;          gprmc -> X-5
 0879           _NMEA_GetTimeUTC::
 0879                   .dbline -1
 0879 10                push X
 087A 4F                mov X,SP
 087B 38A4              add SP,-92
 087D                   .dbline 417
 087D           ; }
 087D           ; 
 087D           ; void NMEA_GetTimeUTC(char *gprmc, struct datetime *gps_datetime)
 087D           ; {
 087D                   .dbline 429
 087D           ;       #define POS_SIZE        2
 087D           ;       #define POS_HOUR        0
 087D           ;       #define POS_MIN         2
 087D           ;       #define POS_SEC         4       
 087D           ;       #define POS_DAY         0
 087D           ;       #define POS_MON         2
 087D           ;       #define POS_YEAR        4
 087D           ;       
 087D           ;       char field[NMEA_MAX_SIZE];
 087D           ;       char buf[NMEA_MAX_SIZE];
 087D           ;       
 087D           ;       NMEA_GetField(gprmc, NMEA_GPRMC_UTC, field);
 087D 62D000            mov REG[0xd0],>__r0
 0880 5A00              mov [__r1],X
 0882 060052            add [__r1],82
 0885 5003              mov A,3
 0887 08                push A
 0888 5100              mov A,[__r1]
 088A 08                push A
 088B 5001              mov A,1
 088D 08                push A
 088E 52FB              mov A,[X-5]
 0890 08                push A
 0891 52FC              mov A,[X-4]
 0893 08                push A
 0894 9D51              xcall _NMEA_GetField
 0896 38FB              add SP,-5
 0898                   .dbline 430
 0898           ;       if (field[0] != 0)
 0898 3D5200            cmp [X+82],0
 089B A0D0              jz L131
 089D                   .dbline 433
 089D           ;       {
 089D           ;               // Hour
 089D           ;               strncpy(buf, field + POS_HOUR, POS_SIZE);
 089D                   .dbline 433
 089D 5000              mov A,0
 089F 08                push A
 08A0 5002              mov A,2
 08A2 08                push A
 08A3 62D000            mov REG[0xd0],>__r0
 08A6 5A00              mov [__r1],X
 08A8 060052            add [__r1],82
 08AB 5003              mov A,3
 08AD 08                push A
 08AE 5100              mov A,[__r1]
 08B0 08                push A
 08B1 5003              mov A,3
 08B3 08                push A
 08B4 10                push X
 08B5 7C0000            xcall _strncpy
 08B8                   .dbline 434
 08B8           ;               buf[POS_SIZE] = 0;      // Add null terminator
 08B8 560200            mov [X+2],0
 08BB                   .dbline 435
 08BB           ;               gps_datetime->hour = atoi(buf);
 08BB 62D000            mov REG[0xd0],>__r0
 08BE 5003              mov A,3
 08C0 08                push A
 08C1 10                push X
 08C2 7C0000            xcall _atoi
 08C5 38F8              add SP,-8
 08C7 62D000            mov REG[0xd0],>__r0
 08CA 5100              mov A,[__r1]
 08CC 5300              mov [__r0],A
 08CE 52FA              mov A,[X-6]
 08D0 0102              add A,2
 08D2 5300              mov [__r3],A
 08D4 52F9              mov A,[X-7]
 08D6 0900              adc A,0
 08D8 60D5              mov REG[0xd5],A
 08DA 5100              mov A,[__r0]
 08DC 3F00              mvi [__r3],A
 08DE                   .dbline 438
 08DE           ;               
 08DE           ;               // Minutes
 08DE           ;               strncpy(buf, field + POS_MIN, POS_SIZE);
 08DE 5000              mov A,0
 08E0 08                push A
 08E1 5002              mov A,2
 08E3 08                push A
 08E4 5A00              mov [__r1],X
 08E6 060054            add [__r1],84
 08E9 5003              mov A,3
 08EB 08                push A
 08EC 5100              mov A,[__r1]
 08EE 08                push A
 08EF 5003              mov A,3
 08F1 08                push A
 08F2 10                push X
 08F3 7C0000            xcall _strncpy
 08F6                   .dbline 439
 08F6           ;               buf[POS_SIZE] = 0;      // Add null terminator
 08F6 560200            mov [X+2],0
 08F9                   .dbline 440
 08F9           ;               gps_datetime->min = atoi(buf);
 08F9 62D000            mov REG[0xd0],>__r0
 08FC 5003              mov A,3
 08FE 08                push A
 08FF 10                push X
 0900 7C0000            xcall _atoi
 0903 38F8              add SP,-8
 0905 62D000            mov REG[0xd0],>__r0
 0908 5100              mov A,[__r1]
 090A 5300              mov [__r0],A
 090C 52FA              mov A,[X-6]
 090E 0101              add A,1
 0910 5300              mov [__r3],A
 0912 52F9              mov A,[X-7]
 0914 0900              adc A,0
 0916 60D5              mov REG[0xd5],A
 0918 5100              mov A,[__r0]
 091A 3F00              mvi [__r3],A
 091C                   .dbline 443
 091C           ;               
 091C           ;               // Seconds
 091C           ;               strncpy(buf, field + POS_SEC, POS_SIZE);
 091C 5000              mov A,0
 091E 08                push A
 091F 5002              mov A,2
 0921 08                push A
 0922 5A00              mov [__r1],X
 0924 060056            add [__r1],86
 0927 5003              mov A,3
 0929 08                push A
 092A 5100              mov A,[__r1]
 092C 08                push A
 092D 5003              mov A,3
 092F 08                push A
 0930 10                push X
 0931 7C0000            xcall _strncpy
 0934                   .dbline 444
 0934           ;               buf[POS_SIZE] = 0;      // Add null terminator
 0934 560200            mov [X+2],0
 0937                   .dbline 445
 0937           ;               gps_datetime->sec = atoi(buf);
 0937 62D000            mov REG[0xd0],>__r0
 093A 5003              mov A,3
 093C 08                push A
 093D 10                push X
 093E 7C0000            xcall _atoi
 0941 38F8              add SP,-8
 0943 62D000            mov REG[0xd0],>__r0
 0946 5100              mov A,[__r1]
 0948 5300              mov [__r0],A
 094A 52FA              mov A,[X-6]
 094C 5300              mov [__r3],A
 094E 52F9              mov A,[X-7]
 0950 60D5              mov REG[0xd5],A
 0952 5100              mov A,[__r0]
 0954 3F00              mvi [__r3],A
 0956                   .dbline 447
 0956           ;               
 0956           ;               gps_datetime->valid = true;
 0956 52FA              mov A,[X-6]
 0958 0106              add A,6
 095A 5300              mov [__r1],A
 095C 52F9              mov A,[X-7]
 095E 0900              adc A,0
 0960 60D5              mov REG[0xd5],A
 0962 5000              mov A,0
 0964 3F00              mvi [__r1],A
 0966 5001              mov A,1
 0968 3F00              mvi [__r1],A
 096A                   .dbline 448
 096A           ;       }
 096A 8016              xjmp L132
 096C           L131:
 096C                   .dbline 449
 096C           ;       else gps_datetime->valid = false;
 096C 62D000            mov REG[0xd0],>__r0
 096F 52FA              mov A,[X-6]
 0971 0106              add A,6
 0973 5300              mov [__r1],A
 0975 52F9              mov A,[X-7]
 0977 0900              adc A,0
 0979 60D5              mov REG[0xd5],A
 097B 5000              mov A,0
 097D 3F00              mvi [__r1],A
 097F 3F00              mvi [__r1],A
 0981           L132:
 0981                   .dbline 451
 0981           ;       
 0981           ;       NMEA_GetField(gprmc, NMEA_GPRMC_DATE, field);
 0981 62D000            mov REG[0xd0],>__r0
 0984 5A00              mov [__r1],X
 0986 060052            add [__r1],82
 0989 5003              mov A,3
 098B 08                push A
 098C 5100              mov A,[__r1]
 098E 08                push A
 098F 5007              mov A,7
 0991 08                push A
 0992 52FB              mov A,[X-5]
 0994 08                push A
 0995 52FC              mov A,[X-4]
 0997 08                push A
 0998 9C4D              xcall _NMEA_GetField
 099A 38FB              add SP,-5
 099C                   .dbline 452
 099C           ;       if (field[0] != 0)
 099C 3D5200            cmp [X+82],0
 099F A0D4              jz L138
 09A1                   .dbline 455
 09A1           ;       {
 09A1           ;               // Day
 09A1           ;               strncpy(buf, field + POS_DAY, POS_SIZE);
 09A1                   .dbline 455
 09A1 5000              mov A,0
 09A3 08                push A
 09A4 5002              mov A,2
 09A6 08                push A
 09A7 62D000            mov REG[0xd0],>__r0
 09AA 5A00              mov [__r1],X
 09AC 060052            add [__r1],82
 09AF 5003              mov A,3
 09B1 08                push A
 09B2 5100              mov A,[__r1]
 09B4 08                push A
 09B5 5003              mov A,3
 09B7 08                push A
 09B8 10                push X
 09B9 7C0000            xcall _strncpy
 09BC                   .dbline 456
 09BC           ;               buf[POS_SIZE] = 0;      // Add null terminator
 09BC 560200            mov [X+2],0
 09BF                   .dbline 457
 09BF           ;               gps_datetime->day = atoi(buf);
 09BF 62D000            mov REG[0xd0],>__r0
 09C2 5003              mov A,3
 09C4 08                push A
 09C5 10                push X
 09C6 7C0000            xcall _atoi
 09C9 38F8              add SP,-8
 09CB 62D000            mov REG[0xd0],>__r0
 09CE 5100              mov A,[__r1]
 09D0 5300              mov [__r0],A
 09D2 52FA              mov A,[X-6]
 09D4 0103              add A,3
 09D6 5300              mov [__r3],A
 09D8 52F9              mov A,[X-7]
 09DA 0900              adc A,0
 09DC 60D5              mov REG[0xd5],A
 09DE 5100              mov A,[__r0]
 09E0 3F00              mvi [__r3],A
 09E2                   .dbline 460
 09E2           ;               
 09E2           ;               // Month
 09E2           ;               strncpy(buf, field + POS_MON, POS_SIZE);
 09E2 5000              mov A,0
 09E4 08                push A
 09E5 5002              mov A,2
 09E7 08                push A
 09E8 5A00              mov [__r1],X
 09EA 060054            add [__r1],84
 09ED 5003              mov A,3
 09EF 08                push A
 09F0 5100              mov A,[__r1]
 09F2 08                push A
 09F3 5003              mov A,3
 09F5 08                push A
 09F6 10                push X
 09F7 7C0000            xcall _strncpy
 09FA                   .dbline 461
 09FA           ;               buf[POS_SIZE] = 0;      // Add null terminator
 09FA 560200            mov [X+2],0
 09FD                   .dbline 462
 09FD           ;               gps_datetime->month = atoi(buf);
 09FD 62D000            mov REG[0xd0],>__r0
 0A00 5003              mov A,3
 0A02 08                push A
 0A03 10                push X
 0A04 7C0000            xcall _atoi
 0A07 38F8              add SP,-8
 0A09 62D000            mov REG[0xd0],>__r0
 0A0C 5100              mov A,[__r1]
 0A0E 5300              mov [__r0],A
 0A10 52FA              mov A,[X-6]
 0A12 0104              add A,4
 0A14 5300              mov [__r3],A
 0A16 52F9              mov A,[X-7]
 0A18 0900              adc A,0
 0A1A 60D5              mov REG[0xd5],A
 0A1C 5100              mov A,[__r0]
 0A1E 3F00              mvi [__r3],A
 0A20                   .dbline 465
 0A20           ;               
 0A20           ;               // Year
 0A20           ;               strncpy(buf, field + POS_YEAR, POS_SIZE);
 0A20 5000              mov A,0
 0A22 08                push A
 0A23 5002              mov A,2
 0A25 08                push A
 0A26 5A00              mov [__r1],X
 0A28 060056            add [__r1],86
 0A2B 5003              mov A,3
 0A2D 08                push A
 0A2E 5100              mov A,[__r1]
 0A30 08                push A
 0A31 5003              mov A,3
 0A33 08                push A
 0A34 10                push X
 0A35 7C0000            xcall _strncpy
 0A38                   .dbline 466
 0A38           ;               buf[POS_SIZE] = 0;      // Add null terminator
 0A38 560200            mov [X+2],0
 0A3B                   .dbline 467
 0A3B           ;               gps_datetime->year = atoi(buf);
 0A3B 62D000            mov REG[0xd0],>__r0
 0A3E 5003              mov A,3
 0A40 08                push A
 0A41 10                push X
 0A42 7C0000            xcall _atoi
 0A45 38F8              add SP,-8
 0A47 62D000            mov REG[0xd0],>__r0
 0A4A 5100              mov A,[__r1]
 0A4C 5300              mov [__r0],A
 0A4E 52FA              mov A,[X-6]
 0A50 0105              add A,5
 0A52 5300              mov [__r3],A
 0A54 52F9              mov A,[X-7]
 0A56 0900              adc A,0
 0A58 60D5              mov REG[0xd5],A
 0A5A 5100              mov A,[__r0]
 0A5C 3F00              mvi [__r3],A
 0A5E                   .dbline 469
 0A5E           ;               
 0A5E           ;               gps_datetime->valid = true;
 0A5E 52FA              mov A,[X-6]
 0A60 0106              add A,6
 0A62 5300              mov [__r1],A
 0A64 52F9              mov A,[X-7]
 0A66 0900              adc A,0
 0A68 60D5              mov REG[0xd5],A
 0A6A 5000              mov A,0
 0A6C 3F00              mvi [__r1],A
 0A6E 5001              mov A,1
 0A70 3F00              mvi [__r1],A
 0A72                   .dbline 470
 0A72           ;       }
 0A72 8016              xjmp L139
 0A74           L138:
 0A74                   .dbline 471
 0A74           ;       else gps_datetime->valid = false;
 0A74 62D000            mov REG[0xd0],>__r0
 0A77 52FA              mov A,[X-6]
 0A79 0106              add A,6
 0A7B 5300              mov [__r1],A
 0A7D 52F9              mov A,[X-7]
 0A7F 0900              adc A,0
 0A81 60D5              mov REG[0xd5],A
 0A83 5000              mov A,0
 0A85 3F00              mvi [__r1],A
 0A87 3F00              mvi [__r1],A
 0A89           L139:
 0A89                   .dbline -2
 0A89           L130:
 0A89 385C              add SP,-164
 0A8B 20                pop X
 0A8C                   .dbline 0 ; func end
 0A8C 7F                ret
 0A8D                   .dbsym l field 82 A[82:82]c
 0A8D                   .dbsym l buf 0 A[82:82]c
 0A8D                   .dbsym l gps_datetime -7 pS[datetime]
 0A8D                   .dbsym l gprmc -5 pc
 0A8D                   .dbend
 0A8D                   .dbfunc e str_cmp _str_cmp fc
 0A8D           ;              i -> X+0
 0A8D           ;           stop -> X-8
 0A8D           ;           str2 -> X-7
 0A8D           ;           str1 -> X-5
 0A8D           _str_cmp::
 0A8D                   .dbline -1
 0A8D 10                push X
 0A8E 4F                mov X,SP
 0A8F 3801              add SP,1
 0A91                   .dbline 475
 0A91           ; }
 0A91           ; 
 0A91           ; unsigned char str_cmp(char *str1, char *str2, unsigned char stop)
 0A91           ; {
 0A91                   .dbline 477
 0A91           ;     unsigned char i;
 0A91           ;     for(i = 0u; i <= stop; i++)
 0A91 560000            mov [X+0],0
 0A94 803A              xjmp L149
 0A96           L146:
 0A96                   .dbline 478
 0A96           ;     {
 0A96                   .dbline 479
 0A96           ;         if (str1[i] != str2[i]) return 1u;
 0A96 62D000            mov REG[0xd0],>__r0
 0A99 5200              mov A,[X+0]
 0A9B 5300              mov [__r1],A
 0A9D 550000            mov [__r0],0
 0AA0 52FA              mov A,[X-6]
 0AA2 0400              add [__r1],A
 0AA4 52F9              mov A,[X-7]
 0AA6 0C00              adc [__r0],A
 0AA8 5100              mov A,[__r0]
 0AAA 60D4              mov REG[0xd4],A
 0AAC 3E00              mvi A,[__r1]
 0AAE 5300              mov [__r0],A
 0AB0 5200              mov A,[X+0]
 0AB2 5300              mov [__r3],A
 0AB4 550000            mov [__r2],0
 0AB7 52FC              mov A,[X-4]
 0AB9 0400              add [__r3],A
 0ABB 52FB              mov A,[X-5]
 0ABD 0C00              adc [__r2],A
 0ABF 5100              mov A,[__r2]
 0AC1 60D4              mov REG[0xd4],A
 0AC3 3E00              mvi A,[__r3]
 0AC5 3A00              cmp A,[__r0]
 0AC7 A005              jz L150
 0AC9                   .dbline 479
 0AC9 5001              mov A,1
 0ACB 800E              xjmp L145
 0ACD           L150:
 0ACD                   .dbline 480
 0ACD           ;     }
 0ACD           L147:
 0ACD                   .dbline 477
 0ACD 7700              inc [X+0]
 0ACF           L149:
 0ACF                   .dbline 477
 0ACF 52F8              mov A,[X-8]
 0AD1 3B00              cmp A,[X+0]
 0AD3 DFC2              jnc L146
 0AD5           X34:
 0AD5                   .dbline 481
 0AD5           ;     return 0u;
 0AD5 62D000            mov REG[0xd0],>__r0
 0AD8 5000              mov A,0
 0ADA                   .dbline -2
 0ADA           L145:
 0ADA 38FF              add SP,-1
 0ADC 20                pop X
 0ADD                   .dbline 0 ; func end
 0ADD 7F                ret
 0ADE                   .dbsym l i 0 c
 0ADE                   .dbsym l stop -8 c
 0ADE                   .dbsym l str2 -7 pc
 0ADE                   .dbsym l str1 -5 pc
 0ADE                   .dbend
 0ADE                   .dbfunc e str_cmp_const _str_cmp_const fc
 0ADE           ;              i -> X+0
 0ADE           ;           stop -> X-8
 0ADE           ;           str2 -> X-7
 0ADE           ;           str1 -> X-5
 0ADE           _str_cmp_const::
 0ADE                   .dbline -1
 0ADE 10                push X
 0ADF 4F                mov X,SP
 0AE0 3801              add SP,1
 0AE2                   .dbline 485
 0AE2           ; }
 0AE2           ; 
 0AE2           ; unsigned char str_cmp_const(char *str1, const char *str2, unsigned char stop)
 0AE2           ; {
 0AE2                   .dbline 487
 0AE2           ;     unsigned char i;
 0AE2           ;     for(i = 0u; i <= stop; i++)
 0AE2 560000            mov [X+0],0
 0AE5 803B              xjmp L156
 0AE7           L153:
 0AE7                   .dbline 488
 0AE7           ;     {
 0AE7                   .dbline 489
 0AE7           ;         if (str1[i] != str2[i]) return 1u;
 0AE7 62D000            mov REG[0xd0],>__r0
 0AEA 5200              mov A,[X+0]
 0AEC 5300              mov [__r1],A
 0AEE 550000            mov [__r0],0
 0AF1 52FA              mov A,[X-6]
 0AF3 0400              add [__r1],A
 0AF5 52F9              mov A,[X-7]
 0AF7 0C00              adc [__r0],A
 0AF9 5100              mov A,[__r0]
 0AFB 10                push X
 0AFC 5800              mov X,[__r1]
 0AFE 28                romx
 0AFF 20                pop X
 0B00 5300              mov [__r0],A
 0B02 5200              mov A,[X+0]
 0B04 5300              mov [__r3],A
 0B06 550000            mov [__r2],0
 0B09 52FC              mov A,[X-4]
 0B0B 0400              add [__r3],A
 0B0D 52FB              mov A,[X-5]
 0B0F 0C00              adc [__r2],A
 0B11 5100              mov A,[__r2]
 0B13 60D4              mov REG[0xd4],A
 0B15 3E00              mvi A,[__r3]
 0B17 3A00              cmp A,[__r0]
 0B19 A005              jz L157
 0B1B                   .dbline 489
 0B1B 5001              mov A,1
 0B1D 800E              xjmp L152
 0B1F           L157:
 0B1F                   .dbline 490
 0B1F           ;     }
 0B1F           L154:
 0B1F                   .dbline 487
 0B1F 7700              inc [X+0]
 0B21           L156:
 0B21                   .dbline 487
 0B21 52F8              mov A,[X-8]
 0B23 3B00              cmp A,[X+0]
 0B25 DFC1              jnc L153
 0B27           X35:
 0B27                   .dbline 491
 0B27           ;     return 0u;
 0B27 62D000            mov REG[0xd0],>__r0
 0B2A 5000              mov A,0
 0B2C                   .dbline -2
 0B2C           L152:
 0B2C 38FF              add SP,-1
 0B2E 20                pop X
 0B2F                   .dbline 0 ; func end
 0B2F 7F                ret
 0B30                   .dbsym l i 0 c
 0B30                   .dbsym l stop -8 c
 0B30                   .dbsym l str2 -7 pkc
 0B30                   .dbsym l str1 -5 pc
 0B30                   .dbend
 0B30                   .dbfunc e byte_to_bcd _byte_to_bcd fc
 0B30           ;            reg -> X+2
 0B30           ;            low -> X+1
 0B30           ;           high -> X+0
 0B30           ;           byte -> X-4
 0B30           _byte_to_bcd::
 0B30                   .dbline -1
 0B30 10                push X
 0B31 4F                mov X,SP
 0B32 3803              add SP,3
 0B34                   .dbline 495
 0B34           ; }
 0B34           ; 
 0B34           ; unsigned char byte_to_bcd(unsigned char byte)
 0B34           ; {
 0B34                   .dbline 498
 0B34           ;     unsigned char high, low, reg;
 0B34           ;     
 0B34           ;     high = byte / DECIMAL_COUNT_SYSTEM_BASIS;
 0B34 500A              mov A,10
 0B36 08                push A
 0B37 52FC              mov A,[X-4]
 0B39 08                push A
 0B3A 62D000            mov REG[0xd0],>__r0
 0B3D 7C0000            xcall __divmodu_8X8_8
 0B40 18                pop A
 0B41 5400              mov [X+0],A
 0B43 38FF              add SP,-1
 0B45                   .dbline 499
 0B45           ;     low = byte - high * DECIMAL_COUNT_SYSTEM_BASIS;
 0B45 5200              mov A,[X+0]
 0B47 60E8              mov REG[0xe8],A
 0B49 62E90A            mov REG[0xe9],10
 0B4C 40                nop
 0B4D 5DEB              mov A,REG[0xeb]
 0B4F 5300              mov [__r0],A
 0B51 52FC              mov A,[X-4]
 0B53 1200              sub A,[__r0]
 0B55 5401              mov [X+1],A
 0B57                   .dbline 500
 0B57           ;     reg = (high << DECIMAL_NUMBER_SIZE) + low;
 0B57 5200              mov A,[X+0]
 0B59 64                asl A
 0B5A 64                asl A
 0B5B 64                asl A
 0B5C 64                asl A
 0B5D 0301              add A,[X+1]
 0B5F 5402              mov [X+2],A
 0B61                   .dbline 502
 0B61           ;     
 0B61           ;     return reg;
 0B61 5202              mov A,[X+2]
 0B63                   .dbline -2
 0B63           L159:
 0B63 38FD              add SP,-3
 0B65 20                pop X
 0B66                   .dbline 0 ; func end
 0B66 7F                ret
 0B67                   .dbsym l reg 2 c
 0B67                   .dbsym l low 1 c
 0B67                   .dbsym l high 0 c
 0B67                   .dbsym l byte -4 c
 0B67                   .dbend
 0B67                   .dbfunc e bcd_to_byte _bcd_to_byte fc
 0B67           ;           byte -> X+2
 0B67           ;            low -> X+1
 0B67           ;           high -> X+0
 0B67           ;            reg -> X-4
 0B67           _bcd_to_byte::
 0B67                   .dbline -1
 0B67 10                push X
 0B68 4F                mov X,SP
 0B69 3803              add SP,3
 0B6B                   .dbline 506
 0B6B           ; }
 0B6B           ; 
 0B6B           ; unsigned char bcd_to_byte(unsigned char reg)
 0B6B           ; {
 0B6B                   .dbline 509
 0B6B           ;     unsigned char high, low, byte;
 0B6B           ;     
 0B6B           ;     high = (reg >> DECIMAL_NUMBER_SIZE);
 0B6B 52FC              mov A,[X-4]
 0B6D 62D000            mov REG[0xd0],>__r0
 0B70 67                asr A
 0B71 67                asr A
 0B72 67                asr A
 0B73 67                asr A
 0B74 210F              and A,15
 0B76 5400              mov [X+0],A
 0B78                   .dbline 510
 0B78           ;     low = reg - (high << DECIMAL_NUMBER_SIZE);
 0B78 5200              mov A,[X+0]
 0B7A 64                asl A
 0B7B 64                asl A
 0B7C 64                asl A
 0B7D 64                asl A
 0B7E 5300              mov [__r0],A
 0B80 52FC              mov A,[X-4]
 0B82 1200              sub A,[__r0]
 0B84 5401              mov [X+1],A
 0B86                   .dbline 511
 0B86           ;     byte = low + high * DECIMAL_COUNT_SYSTEM_BASIS;
 0B86 5200              mov A,[X+0]
 0B88 60E8              mov REG[0xe8],A
 0B8A 62E90A            mov REG[0xe9],10
 0B8D 40                nop
 0B8E 5DEB              mov A,REG[0xeb]
 0B90 5300              mov [__r0],A
 0B92 5201              mov A,[X+1]
 0B94 0200              add A,[__r0]
 0B96 5402              mov [X+2],A
 0B98                   .dbline 513
 0B98           ; 
 0B98           ;     return byte;
 0B98 5202              mov A,[X+2]
 0B9A                   .dbline -2
 0B9A           L160:
 0B9A 38FD              add SP,-3
 0B9C 20                pop X
 0B9D                   .dbline 0 ; func end
 0B9D 7F                ret
 0B9E                   .dbsym l byte 2 c
 0B9E                   .dbsym l low 1 c
 0B9E                   .dbsym l high 0 c
 0B9E                   .dbsym l reg -4 c
 0B9E                   .dbend
 0B9E                   .dbfunc e utc_to_local _utc_to_local fV
 0B9E           ; local_datetime -> X-7
 0B9E           ;   utc_datetime -> X-5
 0B9E           _utc_to_local::
 0B9E                   .dbline -1
 0B9E 10                push X
 0B9F 4F                mov X,SP
 0BA0                   .dbline 517
 0BA0           ; }
 0BA0           ; 
 0BA0           ; void utc_to_local(struct datetime *utc_datetime, struct datetime *local_datetime)
 0BA0           ; {
 0BA0                   .dbline 518
 0BA0           ;       local_datetime->valid = utc_datetime->valid;
 0BA0 62D000            mov REG[0xd0],>__r0
 0BA3 52FC              mov A,[X-4]
 0BA5 0106              add A,6
 0BA7 5300              mov [__r1],A
 0BA9 52FB              mov A,[X-5]
 0BAB 0900              adc A,0
 0BAD 60D4              mov REG[0xd4],A
 0BAF 3E00              mvi A,[__r1]
 0BB1 5300              mov [__r0],A
 0BB3 3E00              mvi A,[__r1]
 0BB5 5300              mov [__r1],A
 0BB7 52FA              mov A,[X-6]
 0BB9 0106              add A,6
 0BBB 5300              mov [__r3],A
 0BBD 52F9              mov A,[X-7]
 0BBF 0900              adc A,0
 0BC1 60D5              mov REG[0xd5],A
 0BC3 5100              mov A,[__r0]
 0BC5 3F00              mvi [__r3],A
 0BC7 5100              mov A,[__r1]
 0BC9 3F00              mvi [__r3],A
 0BCB                   .dbline 519
 0BCB           ;       local_datetime->sec = utc_datetime->sec;
 0BCB 52FC              mov A,[X-4]
 0BCD 5300              mov [__r1],A
 0BCF 52FB              mov A,[X-5]
 0BD1 60D4              mov REG[0xd4],A
 0BD3 3E00              mvi A,[__r1]
 0BD5 5300              mov [__r0],A
 0BD7 52FA              mov A,[X-6]
 0BD9 5300              mov [__r3],A
 0BDB 52F9              mov A,[X-7]
 0BDD 60D5              mov REG[0xd5],A
 0BDF 5100              mov A,[__r0]
 0BE1 3F00              mvi [__r3],A
 0BE3                   .dbline 520
 0BE3           ;       local_datetime->min = utc_datetime->min;
 0BE3 52FC              mov A,[X-4]
 0BE5 0101              add A,1
 0BE7 5300              mov [__r1],A
 0BE9 52FB              mov A,[X-5]
 0BEB 0900              adc A,0
 0BED 60D4              mov REG[0xd4],A
 0BEF 3E00              mvi A,[__r1]
 0BF1 5300              mov [__r0],A
 0BF3 52FA              mov A,[X-6]
 0BF5 0101              add A,1
 0BF7 5300              mov [__r3],A
 0BF9 52F9              mov A,[X-7]
 0BFB 0900              adc A,0
 0BFD 60D5              mov REG[0xd5],A
 0BFF 5100              mov A,[__r0]
 0C01 3F00              mvi [__r3],A
 0C03                   .dbline 521
 0C03           ;       local_datetime->hour = utc_datetime->hour + GMT_OFFSET;
 0C03 52FC              mov A,[X-4]
 0C05 0102              add A,2
 0C07 5300              mov [__r1],A
 0C09 52FB              mov A,[X-5]
 0C0B 0900              adc A,0
 0C0D 60D4              mov REG[0xd4],A
 0C0F 3E00              mvi A,[__r1]
 0C11 5300              mov [__r0],A
 0C13 060003            add [__r0],3
 0C16 52FA              mov A,[X-6]
 0C18 0102              add A,2
 0C1A 5300              mov [__r3],A
 0C1C 52F9              mov A,[X-7]
 0C1E 0900              adc A,0
 0C20 60D5              mov REG[0xd5],A
 0C22 5100              mov A,[__r0]
 0C24 3F00              mvi [__r3],A
 0C26                   .dbline 522
 0C26           ;       if (local_datetime->hour > HOUR_MAX) local_datetime->hour -= (HOUR_MAX + 1);
 0C26 52FA              mov A,[X-6]
 0C28 0102              add A,2
 0C2A 5300              mov [__r1],A
 0C2C 52F9              mov A,[X-7]
 0C2E 0900              adc A,0
 0C30 60D4              mov REG[0xd4],A
 0C32 3E00              mvi A,[__r1]
 0C34 5300              mov [__r0],A
 0C36 5017              mov A,23
 0C38 3A00              cmp A,[__r0]
 0C3A D023              jnc L162
 0C3C           X36:
 0C3C                   .dbline 522
 0C3C 62D000            mov REG[0xd0],>__r0
 0C3F 52FA              mov A,[X-6]
 0C41 0102              add A,2
 0C43 5300              mov [__r1],A
 0C45 52F9              mov A,[X-7]
 0C47 0900              adc A,0
 0C49 5300              mov [__r0],A
 0C4B 60D4              mov REG[0xd4],A
 0C4D 3E00              mvi A,[__r1]
 0C4F 7A00              dec [__r1]
 0C51 5300              mov [__r2],A
 0C53 160018            sub [__r2],24
 0C56 5100              mov A,[__r0]
 0C58 60D5              mov REG[0xd5],A
 0C5A 5100              mov A,[__r2]
 0C5C 3F00              mvi [__r1],A
 0C5E           L162:
 0C5E                   .dbline -2
 0C5E           L161:
 0C5E 20                pop X
 0C5F                   .dbline 0 ; func end
 0C5F 7F                ret
 0C60                   .dbsym l local_datetime -7 pS[datetime]
 0C60                   .dbsym l utc_datetime -5 pS[datetime]
 0C60                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _NMEA_pointer_rf::
 0000 00                .byte 0
 0001                   .dbsym e NMEA_pointer_rf _NMEA_pointer_rf c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _NMEA_pointer_gps::
 0000 00                .byte 0
 0001                   .dbsym e NMEA_pointer_gps _NMEA_pointer_gps c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _override_counter::
 0000 00000000          .byte 0,0,0,0
 0004                   .dbsym e override_counter _override_counter l
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _fld_buf::
 0000 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 003C 00000000000000000000      .word 0,0,0,0,0
 0046 00000000000000000000      .word 0,0,0,0,0
 0050 0000              .byte 0,0
 0052                   .dbsym e fld_buf _fld_buf A[82:82]c
                        .area lit(rom, con, rel, lit)
 001F           L29:
 001F 3000              .byte 48,0
