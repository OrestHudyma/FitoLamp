 0000                   cpu LMM
                        .module main.c
                        .area text(rom, con, rel)
 0000                   .dbfile ./main.c
                        .area lit(rom, con, rel, lit)
 0000           _hw_id::
 0000 3100              .byte 49,0
 0002                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0002                   .dbsym e hw_id _hw_id A[2:2]kc
 0002           _cmd_on::
 0002 4F4E00            .byte 'O,'N,0
 0005                   .dbsym e cmd_on _cmd_on A[3:3]kc
 0005           _cmd_off::
 0005 4F464600          .byte 'O,'F,'F,0
 0009                   .dbsym e cmd_off _cmd_off A[4:4]kc
 0009           _cmd_fon::
 0009 464F4E00          .byte 'F,'O,'N,0
 000D                   .dbsym e cmd_fon _cmd_fon A[4:4]kc
 000D           _cmd_foff::
 000D 464F464600        .byte 'F,'O,'F,'F,0
 0012                   .dbsym e cmd_foff _cmd_foff A[5:5]kc
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _nmea_gprmc_empty::
 0000 4750524D4300      .byte 'G,'P,'R,'M,'C,0
 0006                   .dbsym e nmea_gprmc_empty _nmea_gprmc_empty A[6:6]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _nmea_shftl_empty::
 0000 534846544C00      .byte 'S,'H,'F,'T,'L,0
 0006                   .dbsym e nmea_shftl_empty _nmea_shftl_empty A[6:6]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _override::
 0000 0000              .word 0
 0002                   .dbsym e override _override I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area lit(rom, con, rel, lit)
 0012           _schedule::
 0012 0005              .word 5
 0014 36B0              .word 14000
 0016 0014              .word 20
 0018 0000              .word 0
 001A                   .dbsym e schedule _schedule A[8:2:2]ki
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _power_target::
 0000 0000              .word 0
 0002                   .dbsym e power_target _power_target i
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _NMEA_buffer_gps::
 0000 4E4D45415F6275666665725F67707300  .byte 'N,'M,'E,'A,95,'b,'u,'f,'f,'e,'r,95,'g,'p,'s,0
 0010 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 004C 000000000000      .byte 0,0,0,0,0,0
 0052                   .dbsym e NMEA_buffer_gps _NMEA_buffer_gps A[82:82]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _NMEA_buffer_rf::
 0000 4E4D45415F6275666665725F726600    .byte 'N,'M,'E,'A,95,'b,'u,'f,'f,'e,'r,95,'r,'f,0
 000F 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 004B 00000000000000    .byte 0,0,0,0,0,0,0
 0052                   .dbsym e NMEA_buffer_rf _NMEA_buffer_rf A[82:82]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _NMEA_GPRMC::
 0000 4750524D4300      .byte 'G,'P,'R,'M,'C,0
 0006 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 0042 00000000000000000000      .word 0,0,0,0,0
 004C 000000000000      .byte 0,0,0,0,0,0
 0052                   .dbsym e NMEA_GPRMC _NMEA_GPRMC A[82:82]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _NMEA_SHFTL::
 0000 534846544C00      .byte 'S,'H,'F,'T,'L,0
 0006 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 0042 00000000000000000000      .word 0,0,0,0,0
 004C 000000000000      .byte 0,0,0,0,0,0
 0052                   .dbsym e NMEA_SHFTL _NMEA_SHFTL A[82:82]c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _NMEA_cmd_received::
 0000 0000              .word 0
 0002                   .dbsym e NMEA_cmd_received _NMEA_cmd_received I
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _gps_datetime::
 0000 00                .byte 0
 0001 00                .byte 0
 0002 00                .byte 0
 0003 00                .byte 0
 0004 00                .byte 0
 0005 00                .byte 0
 0006 0000              .word 0
 0008                   .dbstruct 0 8 datetime
 0008                   .dbfield 0 sec c
 0008                   .dbfield 1 min c
 0008                   .dbfield 2 hour c
 0008                   .dbfield 3 day c
 0008                   .dbfield 4 month c
 0008                   .dbfield 5 year c
 0008                   .dbfield 6 valid I
 0008                   .dbend
 0008                   .dbsym e gps_datetime _gps_datetime S[datetime]
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _local_datetime::
 0000 00                .byte 0
 0001 00                .byte 0
 0002 00                .byte 0
 0003 00                .byte 0
 0004 00                .byte 0
 0005 00                .byte 0
 0006 0000              .word 0
 0008                   .dbsym e local_datetime _local_datetime S[datetime]
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
                        .area text(rom, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000                   .dbfunc e gps_signal _gps_signal fV
 0000           _gps_signal::
 0000                   .dbline -1
 0000 10                push X
 0001 4F                mov X,SP
 0002 3802              add SP,2
 0004                   .dbline 112
 0004           ; //----------------------------------------------------------------------------
 0004           ; // C main line
 0004           ; //----------------------------------------------------------------------------
 0004           ; 
 0004           ; #include <m8c.h>        // part specific constants and macros
 0004           ; #include "PSoCAPI.h"    // PSoC API definitions for all User Modules
 0004           ; #include "delay.h"
 0004           ; #include <stdlib.h>
 0004           ; #include <stdio.h>
 0004           ; #include <math.h> 
 0004           ; #include <stdbool.h>
 0004           ; #include <string.h>
 0004           ; 
 0004           ; //#define DEBUG
 0004           ; 
 0004           ; #define DECIMAL_COUNT_SYSTEM_BASIS  10
 0004           ; #define DECIMAL_NUMBER_SIZE         4
 0004           ; #define HOUR_MAX                          23
 0004           ; 
 0004           ; // NMEA definitions
 0004           ; #define NMEA_MAX_SIZE             82
 0004           ; #define NMEA_START_DELIMITER      '$'
 0004           ; #define NMEA_END_DELIMITER        0x0A
 0004           ; #define NMEA_CHECKSUM_DELIMITER   '*'
 0004           ; #define NMEA_FIELD_DELIMITER      ','
 0004           ; #define NMEA_HEADER_SIZE          3
 0004           ; 
 0004           ; #define NMEA_GPRMC_UTC              1
 0004           ; #define NMEA_GPRMC_DATE               7
 0004           ; #define NMEA_GPRMC_HDOP             8
 0004           ; #define NMEA_GPRMC_ALTITUDE         9
 0004           ; 
 0004           ; #define NMEA_GPRMC_VALID            'A'
 0004           ; #define NMEA_GPRMC_INVALID          'V'
 0004           ; 
 0004           ; // System settings
 0004           ; #define POWER_MAX     14000
 0004           ; #define POWER_STEP    1
 0004           ; #define GMT_OFFSET    3
 0004           ; #define WAIT_PERIOD                   2                       // Global non critical tasks execution period in x10 miliseconds
 0004           ; #define OVERRIDE_TIMEOUT      540000          // x20 miliseconds (540000 = 3 hours)
 0004           ; #define POWER_UPDATE_SLOW   2000
 0004           ; #define POWER_UPDATE_FAST   100
 0004           ; #define HW_ID                         "1"
 0004           ; 
 0004           ; #define NMEA_GPRMC_EMPTY            "GPRMC"
 0004           ; #define NMEA_SHFTL_EMPTY            "SHFTL"
 0004           ; #define NMEA_FIELD_CMD              1
 0004           ; #define NMEA_FIELD_ID               2
 0004           ; 
 0004           ; const char hw_id[] = HW_ID;
 0004           ; 
 0004           ; const char cmd_on[] = "ON";
 0004           ; const char cmd_off[] = "OFF";
 0004           ; const char cmd_fon[] = "FON";
 0004           ; const char cmd_foff[] = "FOFF";
 0004           ; char nmea_gprmc_empty[] = NMEA_GPRMC_EMPTY;
 0004           ; char nmea_shftl_empty[] = NMEA_SHFTL_EMPTY;
 0004           ; char fld_buf[NMEA_MAX_SIZE];
 0004           ; bool override = false;
 0004           ; unsigned long override_counter;
 0004           ; 
 0004           ; unsigned int const schedule[2][2] = {
 0004           ;                                               {5, POWER_MAX},
 0004           ;                                               {20, 0}
 0004           ;                                               };
 0004           ; 
 0004           ; struct datetime {
 0004           ;       unsigned char sec;
 0004           ;       unsigned char min;
 0004           ;       unsigned char hour;
 0004           ;       unsigned char day;
 0004           ;       unsigned char month;
 0004           ;       unsigned char year;
 0004           ;       bool valid;
 0004           ; };
 0004           ; 
 0004           ; unsigned int power_target = 0;
 0004           ; 
 0004           ; // NMEA variables
 0004           ; char NMEA_buffer_gps[NMEA_MAX_SIZE] = "NMEA_buffer_gps";
 0004           ; char NMEA_buffer_rf[NMEA_MAX_SIZE] = "NMEA_buffer_rf";
 0004           ; char NMEA_GPRMC[NMEA_MAX_SIZE] = NMEA_GPRMC_EMPTY;
 0004           ; char NMEA_SHFTL[NMEA_MAX_SIZE] = NMEA_SHFTL_EMPTY;
 0004           ; bool NMEA_cmd_received = false;
 0004           ; unsigned char NMEA_pointer_gps;
 0004           ; unsigned char NMEA_pointer_rf;
 0004           ; 
 0004           ; struct datetime gps_datetime = {0, 0, 0, 0, 0, 0, false};
 0004           ; struct datetime local_datetime = {0, 0, 0, 0, 0, 0, false};
 0004           ; 
 0004           ; void set_power(unsigned int pwr);
 0004           ; void override_enable(void);
 0004           ; void update_power(void);
 0004           ; void schedule_processing(unsigned char hour);
 0004           ; void schedule_init(void);
 0004           ; void rtc_update(struct datetime *datetime);
 0004           ; bool check_fld(const char *cmd);
 0004           ; 
 0004           ; // NMEA functions
 0004           ; bool NMEA_handle_packet(char *packet, char *NMEA_data);
 0004           ; void NMEA_GetField(char *packet, unsigned char field, char *result);
 0004           ; void NMEA_GetTimeUTC(char *gprmc, struct datetime *gps_datetime);
 0004           ; 
 0004           ; unsigned char str_cmp(char *str1, char *str2, unsigned char stop);
 0004           ; unsigned char str_cmp_const(char *str1, const char *str2, unsigned char stop);
 0004           ; unsigned char byte_to_bcd(unsigned char byte);
 0004           ; unsigned char bcd_to_byte(unsigned char reg);
 0004           ; void utc_to_local(struct datetime *gps_datetime, struct datetime *local_datetime);
 0004           ; 
 0004           ; void gps_signal(void)
 0004           ; {
 0004                   .dbline 113
 0004           ;       M8C_DisableGInt;
 0004 70FE                      and F, FEh
 0006           
 0006                   .dbline 114
 0006           ;       if (NMEA_pointer_gps >= NMEA_MAX_SIZE) NMEA_pointer_gps = 0;
 0006 62D000            mov REG[0xd0],>_NMEA_pointer_gps
 0009 3C0052            cmp [_NMEA_pointer_gps],82
 000C C007              jc L2
 000E           X0:
 000E                   .dbline 114
 000E 62D000            mov REG[0xd0],>_NMEA_pointer_gps
 0011 550000            mov [_NMEA_pointer_gps],0
 0014           L2:
 0014                   .dbline 115
 0014           ;     NMEA_buffer_gps[NMEA_pointer_gps] = RX8_GPS_bReadRxData();        
 0014 10                push X
 0015 7C0000            xcall _RX8_GPS_bReadRxData
 0018 20                pop X
 0019 62D000            mov REG[0xd0],>__r0
 001C 5300              mov [__r0],A
 001E 62D000            mov REG[0xd0],>_NMEA_pointer_gps
 0021 5100              mov A,[_NMEA_pointer_gps]
 0023 62D000            mov REG[0xd0],>__r0
 0026 5300              mov [__r3],A
 0028 550000            mov [__r2],0
 002B 060000            add [__r3],<_NMEA_buffer_gps
 002E 0E0000            adc [__r2],>_NMEA_buffer_gps
 0031 5100              mov A,[__r2]
 0033 60D5              mov REG[0xd5],A
 0035 5100              mov A,[__r0]
 0037 3F00              mvi [__r3],A
 0039                   .dbline 116
 0039           ;     NMEA_buffer_gps[NMEA_pointer_gps + 1] = 0;        
 0039 62D000            mov REG[0xd0],>_NMEA_pointer_gps
 003C 5100              mov A,[_NMEA_pointer_gps]
 003E 62D000            mov REG[0xd0],>__r0
 0041 5300              mov [__r1],A
 0043 550000            mov [__r0],0
 0046 060001            add [__r1],<_NMEA_buffer_gps+1
 0049 0E0001            adc [__r0],>_NMEA_buffer_gps+1
 004C 5100              mov A,[__r0]
 004E 60D5              mov REG[0xd5],A
 0050 5000              mov A,0
 0052 3F00              mvi [__r1],A
 0054                   .dbline 117
 0054           ;     switch(NMEA_buffer_gps[NMEA_pointer_gps])
 0054 62D000            mov REG[0xd0],>_NMEA_pointer_gps
 0057 5100              mov A,[_NMEA_pointer_gps]
 0059 62D000            mov REG[0xd0],>__r0
 005C 5300              mov [__r1],A
 005E 550000            mov [__r0],0
 0061 060000            add [__r1],<_NMEA_buffer_gps
 0064 0E0000            adc [__r0],>_NMEA_buffer_gps
 0067 5100              mov A,[__r0]
 0069 60D4              mov REG[0xd4],A
 006B 3E00              mvi A,[__r1]
 006D 5401              mov [X+1],A
 006F 560000            mov [X+0],0
 0072 5201              mov A,[X+1]
 0074 110A              sub A,10
 0076 5300              mov [__rY],A
 0078 5200              mov A,[X+0]
 007A 3180              xor A,-128
 007C 1980              sbb A,(0 ^ 0x80)
 007E C02B              jc L5
 0080 2A00              or A,[__rY]
 0082 A015              jz L9
 0084           X1:
 0084           L10:
 0084 3D0000            cmp [X+0],0
 0087 B006              jnz X2
 0089 3D0124            cmp [X+1],36
 008C A003              jz L8
 008E           X2:
 008E 801B              xjmp L5
 0090           L8:
 0090                   .dbline 120
 0090           ;     {
 0090           ;         case NMEA_START_DELIMITER:
 0090           ;         NMEA_pointer_gps = 0;
 0090 62D000            mov REG[0xd0],>_NMEA_pointer_gps
 0093 550000            mov [_NMEA_pointer_gps],0
 0096                   .dbline 121
 0096           ;         break;
 0096 8018              xjmp L6
 0098           L9:
 0098                   .dbline 124
 0098           ;         
 0098           ;         case NMEA_END_DELIMITER:
 0098           ;         NMEA_handle_packet(NMEA_buffer_gps, NMEA_GPRMC);
 0098 5000              mov A,>_NMEA_GPRMC
 009A 08                push A
 009B 5000              mov A,<_NMEA_GPRMC
 009D 08                push A
 009E 5000              mov A,>_NMEA_buffer_gps
 00A0 08                push A
 00A1 5000              mov A,<_NMEA_buffer_gps
 00A3 08                push A
 00A4 966B              xcall _NMEA_handle_packet
 00A6 38FC              add SP,-4
 00A8                   .dbline 125
 00A8           ;         break;
 00A8 8006              xjmp L6
 00AA           L5:
 00AA                   .dbline 128
 00AA           ;         
 00AA           ;         default:
 00AA           ;         NMEA_pointer_gps++;
 00AA 62D000            mov REG[0xd0],>_NMEA_pointer_gps
 00AD 7600              inc [_NMEA_pointer_gps]
 00AF                   .dbline 129
 00AF           ;         break;
 00AF           L6:
 00AF                   .dbline 131
 00AF           ;     }
 00AF           ;       M8C_EnableGInt;
 00AF 7101                      or  F, 01h
 00B1           
 00B1                   .dbline -2
 00B1           L1:
 00B1 38FE              add SP,-2
 00B3 20                pop X
 00B4                   .dbline 0 ; func end
 00B4 7F                ret
 00B5                   .dbend
 00B5                   .dbfunc e rf_signal _rf_signal fV
 00B5           _rf_signal::
 00B5                   .dbline -1
 00B5 10                push X
 00B6 4F                mov X,SP
 00B7 3802              add SP,2
 00B9                   .dbline 135
 00B9           ; }
 00B9           ; 
 00B9           ; void rf_signal(void)
 00B9           ; {     
 00B9                   .dbline 136
 00B9           ;       M8C_DisableGInt;
 00B9 70FE                      and F, FEh
 00BB           
 00BB                   .dbline 137
 00BB           ;       if (NMEA_pointer_rf >= NMEA_MAX_SIZE) NMEA_pointer_rf = 0;
 00BB 62D000            mov REG[0xd0],>_NMEA_pointer_rf
 00BE 3C0052            cmp [_NMEA_pointer_rf],82
 00C1 C007              jc L12
 00C3           X3:
 00C3                   .dbline 137
 00C3 62D000            mov REG[0xd0],>_NMEA_pointer_rf
 00C6 550000            mov [_NMEA_pointer_rf],0
 00C9           L12:
 00C9                   .dbline 138
 00C9           ;     NMEA_buffer_rf[NMEA_pointer_rf] = RX8_RF_bReadRxData();   
 00C9 10                push X
 00CA 7C0000            xcall _RX8_RF_bReadRxData
 00CD 20                pop X
 00CE 62D000            mov REG[0xd0],>__r0
 00D1 5300              mov [__r0],A
 00D3 62D000            mov REG[0xd0],>_NMEA_pointer_rf
 00D6 5100              mov A,[_NMEA_pointer_rf]
 00D8 62D000            mov REG[0xd0],>__r0
 00DB 5300              mov [__r3],A
 00DD 550000            mov [__r2],0
 00E0 060000            add [__r3],<_NMEA_buffer_rf
 00E3 0E0000            adc [__r2],>_NMEA_buffer_rf
 00E6 5100              mov A,[__r2]
 00E8 60D5              mov REG[0xd5],A
 00EA 5100              mov A,[__r0]
 00EC 3F00              mvi [__r3],A
 00EE                   .dbline 139
 00EE           ;     NMEA_buffer_rf[NMEA_pointer_rf + 1] = 0;  
 00EE 62D000            mov REG[0xd0],>_NMEA_pointer_rf
 00F1 5100              mov A,[_NMEA_pointer_rf]
 00F3 62D000            mov REG[0xd0],>__r0
 00F6 5300              mov [__r1],A
 00F8 550000            mov [__r0],0
 00FB 060001            add [__r1],<_NMEA_buffer_rf+1
 00FE 0E0001            adc [__r0],>_NMEA_buffer_rf+1
 0101 5100              mov A,[__r0]
 0103 60D5              mov REG[0xd5],A
 0105 5000              mov A,0
 0107 3F00              mvi [__r1],A
 0109                   .dbline 140
 0109           ;     switch(NMEA_buffer_rf[NMEA_pointer_rf])
 0109 62D000            mov REG[0xd0],>_NMEA_pointer_rf
 010C 5100              mov A,[_NMEA_pointer_rf]
 010E 62D000            mov REG[0xd0],>__r0
 0111 5300              mov [__r1],A
 0113 550000            mov [__r0],0
 0116 060000            add [__r1],<_NMEA_buffer_rf
 0119 0E0000            adc [__r0],>_NMEA_buffer_rf
 011C 5100              mov A,[__r0]
 011E 60D4              mov REG[0xd4],A
 0120 3E00              mvi A,[__r1]
 0122 5401              mov [X+1],A
 0124 560000            mov [X+0],0
 0127 5201              mov A,[X+1]
 0129 110A              sub A,10
 012B 5300              mov [__rY],A
 012D 5200              mov A,[X+0]
 012F 3180              xor A,-128
 0131 1980              sbb A,(0 ^ 0x80)
 0133 C041              jc L15
 0135 2A00              or A,[__rY]
 0137 A015              jz L19
 0139           X4:
 0139           L20:
 0139 3D0000            cmp [X+0],0
 013C B006              jnz X5
 013E 3D0124            cmp [X+1],36
 0141 A003              jz L18
 0143           X5:
 0143 8031              xjmp L15
 0145           L18:
 0145                   .dbline 143
 0145           ;     {
 0145           ;         case NMEA_START_DELIMITER:
 0145           ;         NMEA_pointer_rf = 0;
 0145 62D000            mov REG[0xd0],>_NMEA_pointer_rf
 0148 550000            mov [_NMEA_pointer_rf],0
 014B                   .dbline 144
 014B           ;         break;
 014B 802E              xjmp L16
 014D           L19:
 014D                   .dbline 147
 014D           ;         
 014D           ;         case NMEA_END_DELIMITER:
 014D           ;         NMEA_cmd_received = NMEA_handle_packet(NMEA_buffer_rf, NMEA_SHFTL);
 014D 5000              mov A,>_NMEA_SHFTL
 014F 08                push A
 0150 5000              mov A,<_NMEA_SHFTL
 0152 08                push A
 0153 5000              mov A,>_NMEA_buffer_rf
 0155 08                push A
 0156 5000              mov A,<_NMEA_buffer_rf
 0158 08                push A
 0159 95B6              xcall _NMEA_handle_packet
 015B 38FC              add SP,-4
 015D 62D000            mov REG[0xd0],>__r0
 0160 5100              mov A,[__r1]
 0162 08                push A
 0163 5100              mov A,[__r0]
 0165 62D000            mov REG[0xd0],>_NMEA_cmd_received
 0168 5300              mov [_NMEA_cmd_received],A
 016A 18                pop A
 016B 5301              mov [_NMEA_cmd_received+1],A
 016D                   .dbline 148
 016D           ;         NMEA_buffer_rf[0] = 0;
 016D 62D000            mov REG[0xd0],>_NMEA_buffer_rf
 0170 550000            mov [_NMEA_buffer_rf],0
 0173                   .dbline 149
 0173           ;         break;
 0173 8006              xjmp L16
 0175           L15:
 0175                   .dbline 152
 0175           ;         
 0175           ;         default:
 0175           ;         NMEA_pointer_rf++;
 0175 62D000            mov REG[0xd0],>_NMEA_pointer_rf
 0178 7600              inc [_NMEA_pointer_rf]
 017A                   .dbline 153
 017A           ;         break;
 017A           L16:
 017A                   .dbline 155
 017A           ;     }
 017A           ;       M8C_EnableGInt;
 017A 7101                      or  F, 01h
 017C           
 017C                   .dbline -2
 017C           L11:
 017C 38FE              add SP,-2
 017E 20                pop X
 017F                   .dbline 0 ; func end
 017F 7F                ret
 0180                   .dbend
 0180                   .dbfunc e main _main fV
 0180           ;              t -> X+0
 0180           _main::
 0180                   .dbline -1
 0180 10                push X
 0181 4F                mov X,SP
 0182 3801              add SP,1
 0184                   .dbline 159
 0184           ; }
 0184           ; 
 0184           ; void main(void)
 0184           ; {
 0184                   .dbline 162
 0184           ;       unsigned char t;
 0184           ;       
 0184           ;       M8C_EnableGInt; // Uncomment this line to enable Global Interrupts
 0184 7101                      or  F, 01h
 0186           
 0186                   .dbline 164
 0186           ; 
 0186           ;       RTC_SetHour(0x08);
 0186 10                push X
 0187 5008              mov A,8
 0189 7C0000            xcall _RTC_SetHour
 018C                   .dbline 165
 018C           ;       RTC_SetMinute(0x00);
 018C 5000              mov A,0
 018E 7C0000            xcall _RTC_SetMinute
 0191                   .dbline 166
 0191           ;       RTC_SetSecond(0x00);
 0191 5000              mov A,0
 0193 7C0000            xcall _RTC_SetSecond
 0196                   .dbline 167
 0196           ;       RTC_Start();
 0196 7C0000            xcall _RTC_Start
 0199                   .dbline 168
 0199           ;       PWM16_CH0_Start();
 0199 7C0000            xcall _PWM16_CH0_Start
 019C                   .dbline 169
 019C           ;       PWM16_CH1_Start();
 019C 7C0000            xcall _PWM16_CH1_Start
 019F                   .dbline 170
 019F           ;       Counter16_PwrUpd_Start();
 019F 7C0000            xcall _Counter16_PwrUpd_Start
 01A2                   .dbline 171
 01A2           ;       Counter8_RF_clk_Start();
 01A2 7C0000            xcall _Counter8_RF_clk_Start
 01A5                   .dbline 172
 01A5           ;       RX8_GPS_Start(RX8_GPS_PARITY_NONE);
 01A5 5000              mov A,0
 01A7 7C0000            xcall _RX8_GPS_Start
 01AA                   .dbline 173
 01AA           ;       RX8_RF_Start(RX8_GPS_PARITY_ODD);
 01AA 5006              mov A,6
 01AC 7C0000            xcall _RX8_RF_Start
 01AF                   .dbline 175
 01AF           ;       
 01AF           ;       RX8_GPS_EnableInt();
 01AF 7C0000            xcall _RX8_GPS_EnableInt
 01B2                   .dbline 176
 01B2           ;       RX8_RF_EnableInt();
 01B2 7C0000            xcall _RX8_RF_EnableInt
 01B5                   .dbline 177
 01B5           ;       Counter16_PwrUpd_EnableInt();
 01B5 7C0000            xcall _Counter16_PwrUpd_EnableInt
 01B8                   .dbline 179
 01B8           ;               
 01B8           ;       Counter16_PwrUpd_WritePeriod(POWER_UPDATE_SLOW);
 01B8 5707              mov X,7
 01BA 50D0              mov A,-48
 01BC 7C0000            xcall _Counter16_PwrUpd_WritePeriod
 01BF 20                pop X
 01C0                   .dbline 180
 01C0           ;       set_power(POWER_MAX);
 01C0 5036              mov A,54
 01C2 08                push A
 01C3 50B0              mov A,-80
 01C5 08                push A
 01C6 91E5              xcall _set_power
 01C8 38FE              add SP,-2
 01CA                   .dbline 181
 01CA           ;       LED_Blue_Off();
 01CA 10                push X
 01CB 7C0000            xcall _LED_Blue_Off
 01CE 20                pop X
 01CF 81D6              xjmp L23
 01D1           L22:
 01D1                   .dbline 184
 01D1           ;       
 01D1           ;       while (1)
 01D1           ;       {               
 01D1                   .dbline 186
 01D1           ;               // Handle commands
 01D1           ;               if (NMEA_cmd_received)
 01D1 62D000            mov REG[0xd0],>_NMEA_cmd_received
 01D4 3C0000            cmp [_NMEA_cmd_received],0
 01D7 B006              jnz X7
 01D9 3C0100            cmp [_NMEA_cmd_received+1],0
 01DC A135              jz L25
 01DE           X7:
 01DE                   .dbline 188
 01DE           ;         {
 01DE           ;                       LED_Blue_On();
 01DE                   .dbline 188
 01DE 10                push X
 01DF 7C0000            xcall _LED_Blue_On
 01E2 20                pop X
 01E3                   .dbline 189
 01E3           ;                       NMEA_cmd_received = false;              
 01E3 62D000            mov REG[0xd0],>_NMEA_cmd_received
 01E6 550100            mov [_NMEA_cmd_received+1],0
 01E9 550000            mov [_NMEA_cmd_received],0
 01EC                   .dbline 192
 01EC           ;             
 01EC           ;             // NMEA_SHFTL handle
 01EC           ;                       NMEA_GetField(NMEA_SHFTL, NMEA_FIELD_ID, fld_buf);
 01EC 5000              mov A,>_fld_buf
 01EE 08                push A
 01EF 5000              mov A,<_fld_buf
 01F1 08                push A
 01F2 5002              mov A,2
 01F4 08                push A
 01F5 5000              mov A,>_NMEA_SHFTL
 01F7 08                push A
 01F8 5000              mov A,<_NMEA_SHFTL
 01FA 08                push A
 01FB 93D9              xcall _NMEA_GetField
 01FD                   .dbline 193
 01FD           ;                       if(check_fld(hw_id) || check_fld("0"))  // Check ID
 01FD 5000              mov A,>_hw_id
 01FF 08                push A
 0200 5000              mov A,<_hw_id
 0202 08                push A
 0203 9384              xcall _check_fld
 0205 38F9              add SP,-7
 0207 62D000            mov REG[0xd0],>__r0
 020A 3C0000            cmp [__r0],0
 020D B01D              jnz L30
 020F 3C0000            cmp [__r1],0
 0212 B018              jnz L30
 0214           X8:
 0214 501A              mov A,>L29
 0216 08                push A
 0217 501A              mov A,<L29
 0219 08                push A
 021A 936D              xcall _check_fld
 021C 38FE              add SP,-2
 021E 62D000            mov REG[0xd0],>__r0
 0221 3C0000            cmp [__r0],0
 0224 B006              jnz X9
 0226 3C0000            cmp [__r1],0
 0229 A0E8              jz L27
 022B           X9:
 022B           L30:
 022B                   .dbline 195
 022B           ;                       {                       
 022B           ;                   NMEA_GetField(NMEA_SHFTL, NMEA_FIELD_CMD, fld_buf);
 022B                   .dbline 195
 022B 5000              mov A,>_fld_buf
 022D 08                push A
 022E 5000              mov A,<_fld_buf
 0230 08                push A
 0231 5001              mov A,1
 0233 08                push A
 0234 5000              mov A,>_NMEA_SHFTL
 0236 08                push A
 0237 5000              mov A,<_NMEA_SHFTL
 0239 08                push A
 023A 939A              xcall _NMEA_GetField
 023C                   .dbline 196
 023C           ;                   if(check_fld(cmd_on))
 023C 5002              mov A,>_cmd_on
 023E 08                push A
 023F 5002              mov A,<_cmd_on
 0241 08                push A
 0242 9345              xcall _check_fld
 0244 38F9              add SP,-7
 0246 62D000            mov REG[0xd0],>__r0
 0249 3C0000            cmp [__r0],0
 024C B006              jnz X10
 024E 3C0000            cmp [__r1],0
 0251 A018              jz L31
 0253           X10:
 0253                   .dbline 198
 0253           ;                   {
 0253           ;                       Counter16_PwrUpd_WritePeriod(POWER_UPDATE_SLOW);
 0253                   .dbline 198
 0253 10                push X
 0254 5707              mov X,7
 0256 50D0              mov A,-48
 0258 7C0000            xcall _Counter16_PwrUpd_WritePeriod
 025B 20                pop X
 025C                   .dbline 199
 025C           ;                                       set_power(POWER_MAX);
 025C 5036              mov A,54
 025E 08                push A
 025F 50B0              mov A,-80
 0261 08                push A
 0262 9149              xcall _set_power
 0264 38FE              add SP,-2
 0266                   .dbline 200
 0266           ;                                       override_enable();      
 0266 9164              xcall _override_enable
 0268                   .dbline 201
 0268           ;                   }
 0268 808C              xjmp L32
 026A           L31:
 026A                   .dbline 202
 026A           ;                   else if(check_fld(cmd_off))
 026A 5005              mov A,>_cmd_off
 026C 08                push A
 026D 5005              mov A,<_cmd_off
 026F 08                push A
 0270 9317              xcall _check_fld
 0272 38FE              add SP,-2
 0274 62D000            mov REG[0xd0],>__r0
 0277 3C0000            cmp [__r0],0
 027A B006              jnz X11
 027C 3C0000            cmp [__r1],0
 027F A016              jz L33
 0281           X11:
 0281                   .dbline 204
 0281           ;                   {
 0281           ;                       Counter16_PwrUpd_WritePeriod(POWER_UPDATE_SLOW);
 0281                   .dbline 204
 0281 10                push X
 0282 5707              mov X,7
 0284 50D0              mov A,-48
 0286 7C0000            xcall _Counter16_PwrUpd_WritePeriod
 0289 20                pop X
 028A                   .dbline 205
 028A           ;                                       set_power(0);
 028A 5000              mov A,0
 028C 08                push A
 028D 08                push A
 028E 911D              xcall _set_power
 0290 38FE              add SP,-2
 0292                   .dbline 206
 0292           ;                                       override_enable();      
 0292 9138              xcall _override_enable
 0294                   .dbline 207
 0294           ;                   }
 0294 8060              xjmp L34
 0296           L33:
 0296                   .dbline 208
 0296           ;                               else if(check_fld(cmd_fon))
 0296 5009              mov A,>_cmd_fon
 0298 08                push A
 0299 5009              mov A,<_cmd_fon
 029B 08                push A
 029C 92EB              xcall _check_fld
 029E 38FE              add SP,-2
 02A0 62D000            mov REG[0xd0],>__r0
 02A3 3C0000            cmp [__r0],0
 02A6 B006              jnz X12
 02A8 3C0000            cmp [__r1],0
 02AB A018              jz L35
 02AD           X12:
 02AD                   .dbline 210
 02AD           ;                   {
 02AD           ;                       Counter16_PwrUpd_WritePeriod(POWER_UPDATE_FAST);
 02AD                   .dbline 210
 02AD 10                push X
 02AE 5700              mov X,0
 02B0 5064              mov A,100
 02B2 7C0000            xcall _Counter16_PwrUpd_WritePeriod
 02B5 20                pop X
 02B6                   .dbline 211
 02B6           ;                                       set_power(POWER_MAX);
 02B6 5036              mov A,54
 02B8 08                push A
 02B9 50B0              mov A,-80
 02BB 08                push A
 02BC 90EF              xcall _set_power
 02BE 38FE              add SP,-2
 02C0                   .dbline 212
 02C0           ;                                       override_enable();      
 02C0 910A              xcall _override_enable
 02C2                   .dbline 213
 02C2           ;                   }
 02C2 8032              xjmp L36
 02C4           L35:
 02C4                   .dbline 214
 02C4           ;                   else if(check_fld(cmd_foff))
 02C4 500D              mov A,>_cmd_foff
 02C6 08                push A
 02C7 500D              mov A,<_cmd_foff
 02C9 08                push A
 02CA 92BD              xcall _check_fld
 02CC 38FE              add SP,-2
 02CE 62D000            mov REG[0xd0],>__r0
 02D1 3C0000            cmp [__r0],0
 02D4 B006              jnz X13
 02D6 3C0000            cmp [__r1],0
 02D9 A016              jz L37
 02DB           X13:
 02DB                   .dbline 216
 02DB           ;                   {
 02DB           ;                       Counter16_PwrUpd_WritePeriod(POWER_UPDATE_FAST);
 02DB                   .dbline 216
 02DB 10                push X
 02DC 5700              mov X,0
 02DE 5064              mov A,100
 02E0 7C0000            xcall _Counter16_PwrUpd_WritePeriod
 02E3 20                pop X
 02E4                   .dbline 217
 02E4           ;                                       set_power(0);
 02E4 5000              mov A,0
 02E6 08                push A
 02E7 08                push A
 02E8 90C3              xcall _set_power
 02EA 38FE              add SP,-2
 02EC                   .dbline 218
 02EC           ;                                       override_enable();      
 02EC 90DE              xcall _override_enable
 02EE                   .dbline 219
 02EE           ;                   }
 02EE 8006              xjmp L38
 02F0           L37:
 02F0                   .dbline 220
 02F0           ;                               else LED_Blue_Off();
 02F0 10                push X
 02F1 7C0000            xcall _LED_Blue_Off
 02F4 20                pop X
 02F5           L38:
 02F5           L36:
 02F5           L34:
 02F5           L32:
 02F5                   .dbline 222
 02F5           ;                               
 02F5           ;                   NMEA_SHFTL[0] = 0;
 02F5 62D000            mov REG[0xd0],>_NMEA_SHFTL
 02F8 550000            mov [_NMEA_SHFTL],0
 02FB                   .dbline 223
 02FB           ;                   strncat(NMEA_SHFTL, nmea_shftl_empty, NMEA_MAX_SIZE);
 02FB 5000              mov A,0
 02FD 08                push A
 02FE 5052              mov A,82
 0300 08                push A
 0301 5000              mov A,>_nmea_shftl_empty
 0303 08                push A
 0304 5000              mov A,<_nmea_shftl_empty
 0306 08                push A
 0307 5000              mov A,>_NMEA_SHFTL
 0309 08                push A
 030A 5000              mov A,<_NMEA_SHFTL
 030C 08                push A
 030D 7C0000            xcall _strncat
 0310 38FA              add SP,-6
 0312                   .dbline 224
 0312           ;                       }
 0312           L27:
 0312                   .dbline 225
 0312           ;               }               
 0312           L25:
 0312                   .dbline 227
 0312           ;                               
 0312           ;               if(!override)
 0312 62D000            mov REG[0xd0],>_override
 0315 3C0000            cmp [_override],0
 0318 B050              jnz L39
 031A 3C0100            cmp [_override+1],0
 031D B04B              jnz L39
 031F           X14:
 031F                   .dbline 230
 031F           ;               {
 031F           ;                       // Get datetime
 031F           ;                       local_datetime.valid = false;
 031F                   .dbline 230
 031F 62D000            mov REG[0xd0],>_local_datetime
 0322 550700            mov [_local_datetime+6+1],0
 0325 550600            mov [_local_datetime+6],0
 0328                   .dbline 231
 0328           ;                       NMEA_GetTimeUTC(NMEA_GPRMC, &gps_datetime);
 0328 5000              mov A,>_gps_datetime
 032A 08                push A
 032B 5000              mov A,<_gps_datetime
 032D 08                push A
 032E 5000              mov A,>_NMEA_GPRMC
 0330 08                push A
 0331 5000              mov A,<_NMEA_GPRMC
 0333 08                push A
 0334 9503              xcall _NMEA_GetTimeUTC
 0336 38FC              add SP,-4
 0338                   .dbline 232
 0338           ;                       if(gps_datetime.valid) 
 0338 62D000            mov REG[0xd0],>_gps_datetime
 033B 3C0600            cmp [_gps_datetime+6],0
 033E B006              jnz X15
 0340 3C0700            cmp [_gps_datetime+6+1],0
 0343 A01A              jz L42
 0345           X15:
 0345                   .dbline 234
 0345           ;                       {
 0345           ;                               utc_to_local(&gps_datetime, &local_datetime);
 0345                   .dbline 234
 0345 5000              mov A,>_local_datetime
 0347 08                push A
 0348 5000              mov A,<_local_datetime
 034A 08                push A
 034B 5000              mov A,>_gps_datetime
 034D 08                push A
 034E 5000              mov A,<_gps_datetime
 0350 08                push A
 0351 7C0B5E            xcall _utc_to_local
 0354                   .dbline 235
 0354           ;                               rtc_update(&local_datetime);
 0354 5000              mov A,>_local_datetime
 0356 08                push A
 0357 5000              mov A,<_local_datetime
 0359 08                push A
 035A 91CB              xcall _rtc_update
 035C 38FA              add SP,-6
 035E                   .dbline 236
 035E           ;                       }
 035E           L42:
 035E                   .dbline 239
 035E           ;                       
 035E           ;                       // Scheduler
 035E           ;                       Counter16_PwrUpd_WritePeriod(POWER_UPDATE_SLOW);
 035E 10                push X
 035F 5707              mov X,7
 0361 50D0              mov A,-48
 0363 7C0000            xcall _Counter16_PwrUpd_WritePeriod
 0366 20                pop X
 0367                   .dbline 240
 0367           ;                       schedule_init();
 0367 9180              xcall _schedule_init
 0369                   .dbline 241
 0369           ;               }
 0369           L39:
 0369                   .dbline 243
 0369           ;               
 0369           ;               Delay10msTimes(WAIT_PERIOD);
 0369 10                push X
 036A 5002              mov A,2
 036C 7C0000            xcall _Delay10msTimes
 036F 20                pop X
 0370                   .dbline 244
 0370           ;               if (override_counter > 0) override_counter--;
 0370 62D000            mov REG[0xd0],>_override_counter
 0373 3C0000            cmp [_override_counter],0
 0376 B010              jnz X16
 0378 3C0100            cmp [_override_counter+1],0
 037B B00B              jnz X16
 037D 3C0200            cmp [_override_counter+2],0
 0380 B006              jnz X16
 0382 3C0300            cmp [_override_counter+3],0
 0385 A012              jz L45
 0387           X16:
 0387                   .dbline 244
 0387 62D000            mov REG[0xd0],>_override_counter
 038A 160301            sub [_override_counter+3],1
 038D 1E0200            sbb [_override_counter+2],0
 0390 1E0100            sbb [_override_counter+1],0
 0393 1E0000            sbb [_override_counter],0
 0396 800A              xjmp L46
 0398           L45:
 0398                   .dbline 245
 0398           ;               else override = false;
 0398 62D000            mov REG[0xd0],>_override
 039B 550100            mov [_override+1],0
 039E 550000            mov [_override],0
 03A1           L46:
 03A1                   .dbline 246
 03A1           ;               LED_Blue_Off();
 03A1 10                push X
 03A2 7C0000            xcall _LED_Blue_Off
 03A5 20                pop X
 03A6                   .dbline 247
 03A6           ;       }
 03A6           L23:
 03A6                   .dbline 183
 03A6 8E2A              xjmp L22
 03A8           X6:
 03A8                   .dbline -2
 03A8           L21:
 03A8 38FF              add SP,-1
 03AA 20                pop X
 03AB                   .dbline 0 ; func end
 03AB 8FFF              jmp .
 03AD                   .dbsym l t 0 c
 03AD                   .dbend
 03AD                   .dbfunc e set_power _set_power fV
 03AD           ;            pwr -> X-5
 03AD           _set_power::
 03AD                   .dbline -1
 03AD 10                push X
 03AE 4F                mov X,SP
 03AF                   .dbline 251
 03AF           ; }
 03AF           ; 
 03AF           ; void set_power(unsigned int pwr)
 03AF           ; {
 03AF                   .dbline 252
 03AF           ;       if(pwr > POWER_MAX) pwr = POWER_MAX;
 03AF 50B0              mov A,-80
 03B1 13FC              sub A,[X-4]
 03B3 5036              mov A,54
 03B5 1BFB              sbb A,[X-5]
 03B7 D007              jnc L48
 03B9           X17:
 03B9                   .dbline 252
 03B9 56FCB0            mov [X-4],-80
 03BC 56FB36            mov [X-5],54
 03BF           L48:
 03BF                   .dbline 253
 03BF           ;       power_target = pwr;
 03BF 62D000            mov REG[0xd0],>_power_target
 03C2 52FC              mov A,[X-4]
 03C4 5301              mov [_power_target+1],A
 03C6 52FB              mov A,[X-5]
 03C8 5300              mov [_power_target],A
 03CA                   .dbline -2
 03CA           L47:
 03CA 20                pop X
 03CB                   .dbline 0 ; func end
 03CB 7F                ret
 03CC                   .dbsym l pwr -5 i
 03CC                   .dbend
 03CC                   .dbfunc e override_enable _override_enable fV
 03CC           _override_enable::
 03CC                   .dbline -1
 03CC                   .dbline 257
 03CC           ; }
 03CC           ; 
 03CC           ; void override_enable(void)
 03CC           ; {
 03CC                   .dbline 258
 03CC           ;       override = true;
 03CC 62D000            mov REG[0xd0],>_override
 03CF 550101            mov [_override+1],1
 03D2 550000            mov [_override],0
 03D5                   .dbline 259
 03D5           ;       override_counter = OVERRIDE_TIMEOUT;
 03D5 62D000            mov REG[0xd0],>_override_counter
 03D8 550000            mov [_override_counter],0
 03DB 550108            mov [_override_counter+1],8
 03DE 55023D            mov [_override_counter+2],61
 03E1 550360            mov [_override_counter+3],96
 03E4                   .dbline -2
 03E4           L50:
 03E4                   .dbline 0 ; func end
 03E4 7F                ret
 03E5                   .dbend
 03E5                   .dbfunc e update_power _update_power fV
 03E5           ;            pwr -> X+0
 03E5           _update_power::
 03E5                   .dbline -1
 03E5 10                push X
 03E6 4F                mov X,SP
 03E7 3802              add SP,2
 03E9                   .dbline 263
 03E9           ; }
 03E9           ; 
 03E9           ; void update_power(void)
 03E9           ; {
 03E9                   .dbline 267
 03E9           ;       unsigned int pwr;
 03E9           ;       
 03E9           ;       // CH0
 03E9           ;       pwr = PWM16_CH0_wReadPulseWidth();
 03E9 10                push X
 03EA 7C0000            xcall _PWM16_CH0_wReadPulseWidth
 03ED 62D000            mov REG[0xd0],>__r0
 03F0 5A00              mov [__r0],X
 03F2 20                pop X
 03F3 5401              mov [X+1],A
 03F5 5100              mov A,[__r0]
 03F7 5400              mov [X+0],A
 03F9                   .dbline 268
 03F9           ;       if(pwr < power_target) pwr += POWER_STEP;
 03F9 62D000            mov REG[0xd0],>_power_target
 03FC 5201              mov A,[X+1]
 03FE 1201              sub A,[_power_target+1]
 0400 5200              mov A,[X+0]
 0402 1A00              sbb A,[_power_target]
 0404 D006              jnc L52
 0406           X18:
 0406                   .dbline 268
 0406 7701              inc [X+1]
 0408 0F0000            adc [X+0],0
 040B           L52:
 040B                   .dbline 269
 040B           ;       if(pwr > power_target) pwr -= POWER_STEP;
 040B 62D000            mov REG[0xd0],>_power_target
 040E 5101              mov A,[_power_target+1]
 0410 1301              sub A,[X+1]
 0412 5100              mov A,[_power_target]
 0414 1B00              sbb A,[X+0]
 0416 D006              jnc L54
 0418           X19:
 0418                   .dbline 269
 0418 7B01              dec [X+1]
 041A 1F0000            sbb [X+0],0
 041D           L54:
 041D                   .dbline 270
 041D           ;       PWM16_CH0_WritePulseWidth(pwr);
 041D 10                push X
 041E 5200              mov A,[X+0]
 0420 08                push A
 0421 5201              mov A,[X+1]
 0423 20                pop X
 0424 7C0000            xcall _PWM16_CH0_WritePulseWidth
 0427                   .dbline 273
 0427           ;       
 0427           ;       // CH1
 0427           ;       pwr = PWM16_CH1_wReadPulseWidth();
 0427 7C0000            xcall _PWM16_CH1_wReadPulseWidth
 042A 62D000            mov REG[0xd0],>__r0
 042D 5A00              mov [__r0],X
 042F 20                pop X
 0430 5401              mov [X+1],A
 0432 5100              mov A,[__r0]
 0434 5400              mov [X+0],A
 0436                   .dbline 274
 0436           ;       if(pwr < power_target) pwr += POWER_STEP;
 0436 62D000            mov REG[0xd0],>_power_target
 0439 5201              mov A,[X+1]
 043B 1201              sub A,[_power_target+1]
 043D 5200              mov A,[X+0]
 043F 1A00              sbb A,[_power_target]
 0441 D006              jnc L56
 0443           X20:
 0443                   .dbline 274
 0443 7701              inc [X+1]
 0445 0F0000            adc [X+0],0
 0448           L56:
 0448                   .dbline 275
 0448           ;       if(pwr > power_target) pwr -= POWER_STEP;
 0448 62D000            mov REG[0xd0],>_power_target
 044B 5101              mov A,[_power_target+1]
 044D 1301              sub A,[X+1]
 044F 5100              mov A,[_power_target]
 0451 1B00              sbb A,[X+0]
 0453 D006              jnc L58
 0455           X21:
 0455                   .dbline 275
 0455 7B01              dec [X+1]
 0457 1F0000            sbb [X+0],0
 045A           L58:
 045A                   .dbline 276
 045A           ;       PWM16_CH1_WritePulseWidth(pwr);
 045A 10                push X
 045B 5200              mov A,[X+0]
 045D 08                push A
 045E 5201              mov A,[X+1]
 0460 20                pop X
 0461 7C0000            xcall _PWM16_CH1_WritePulseWidth
 0464 20                pop X
 0465                   .dbline -2
 0465           L51:
 0465 38FE              add SP,-2
 0467 20                pop X
 0468                   .dbline 0 ; func end
 0468 7F                ret
 0469                   .dbsym l pwr 0 i
 0469                   .dbend
 0469                   .dbfunc e schedule_processing _schedule_processing fV
 0469           ;              i -> X+0
 0469           ;           hour -> X-4
 0469           _schedule_processing::
 0469                   .dbline -1
 0469 10                push X
 046A 4F                mov X,SP
 046B 3801              add SP,1
 046D                   .dbline 280
 046D           ; }
 046D           ; 
 046D           ; void schedule_processing(unsigned char hour)
 046D           ; {
 046D                   .dbline 282
 046D           ;     unsigned char i; 
 046D           ;     for(i = 0; i < sizeof(schedule); i++)
 046D 560000            mov [X+0],0
 0470 806F              xjmp L64
 0472           L61:
 0472                   .dbline 283
 0472           ;     {
 0472                   .dbline 284
 0472           ;         if(hour == schedule[i][0])
 0472 62D000            mov REG[0xd0],>__r0
 0475 5200              mov A,[X+0]
 0477 5300              mov [__r1],A
 0479 550000            mov [__r0],0
 047C 6500              asl [__r1]
 047E 6B00              rlc [__r0]
 0480 6500              asl [__r1]
 0482 6B00              rlc [__r0]
 0484 060012            add [__r1],<_schedule
 0487 0E0012            adc [__r0],>_schedule
 048A 5100              mov A,[__r0]
 048C 10                push X
 048D 5800              mov X,[__r1]
 048F 08                push A
 0490 28                romx
 0491 5300              mov [__r0],A
 0493 18                pop A
 0494 75                inc X
 0495 0900              adc A,0
 0497 28                romx
 0498 5300              mov [__r1],A
 049A 20                pop X
 049B 52FC              mov A,[X-4]
 049D 5300              mov [__r3],A
 049F 5000              mov A,0
 04A1 3A00              cmp A,[__r0]
 04A3 B03A              jnz L65
 04A5 5100              mov A,[__r3]
 04A7 3A00              cmp A,[__r1]
 04A9 B034              jnz L65
 04AB           X22:
 04AB                   .dbline 286
 04AB           ;         {
 04AB           ;             set_power(schedule[i][1]);
 04AB                   .dbline 286
 04AB 62D000            mov REG[0xd0],>__r0
 04AE 5200              mov A,[X+0]
 04B0 5300              mov [__r1],A
 04B2 550000            mov [__r0],0
 04B5 6500              asl [__r1]
 04B7 6B00              rlc [__r0]
 04B9 6500              asl [__r1]
 04BB 6B00              rlc [__r0]
 04BD 060014            add [__r1],<_schedule+2
 04C0 0E0014            adc [__r0],>_schedule+2
 04C3 5100              mov A,[__r0]
 04C5 10                push X
 04C6 5800              mov X,[__r1]
 04C8 08                push A
 04C9 28                romx
 04CA 5300              mov [__r0],A
 04CC 18                pop A
 04CD 75                inc X
 04CE 0900              adc A,0
 04D0 28                romx
 04D1 5300              mov [__r1],A
 04D3 20                pop X
 04D4 5100              mov A,[__r0]
 04D6 08                push A
 04D7 5100              mov A,[__r1]
 04D9 08                push A
 04DA 9ED1              xcall _set_power
 04DC 38FE              add SP,-2
 04DE                   .dbline 287
 04DE           ;         }
 04DE           L65:
 04DE                   .dbline 288
 04DE           ;     }
 04DE           L62:
 04DE                   .dbline 282
 04DE 7700              inc [X+0]
 04E0           L64:
 04E0                   .dbline 282
 04E0 3D0008            cmp [X+0],8
 04E3 CF8E              jc L61
 04E5           X23:
 04E5                   .dbline -2
 04E5           L60:
 04E5 38FF              add SP,-1
 04E7 20                pop X
 04E8                   .dbline 0 ; func end
 04E8 7F                ret
 04E9                   .dbsym l i 0 c
 04E9                   .dbsym l hour -4 c
 04E9                   .dbend
 04E9                   .dbfunc e schedule_init _schedule_init fV
 04E9           ;           hour -> X+0
 04E9           _schedule_init::
 04E9                   .dbline -1
 04E9 10                push X
 04EA 4F                mov X,SP
 04EB 3801              add SP,1
 04ED                   .dbline 292
 04ED           ; }
 04ED           ; 
 04ED           ; void schedule_init(void)
 04ED           ; {
 04ED                   .dbline 295
 04ED           ;     unsigned char hour;
 04ED           ;       
 04ED           ;       for(hour = 0; hour <= HOUR_MAX; hour++)
 04ED 560000            mov [X+0],0
 04F0 800A              xjmp L72
 04F2           L69:
 04F2                   .dbline 296
 04F2           ;     {
 04F2                   .dbline 297
 04F2           ;         schedule_processing(hour);
 04F2 5200              mov A,[X+0]
 04F4 08                push A
 04F5 9F72              xcall _schedule_processing
 04F7 38FF              add SP,-1
 04F9                   .dbline 298
 04F9           ;     }
 04F9           L70:
 04F9                   .dbline 295
 04F9 7700              inc [X+0]
 04FB           L72:
 04FB                   .dbline 295
 04FB 5017              mov A,23
 04FD 3B00              cmp A,[X+0]
 04FF DFF2              jnc L69
 0501           X24:
 0501                   .dbline 299
 0501           ;     for(hour = 0; hour <= bcd_to_byte(RTC_bReadHour()); hour++)
 0501 560000            mov [X+0],0
 0504 800A              xjmp L76
 0506           L73:
 0506                   .dbline 300
 0506           ;     {
 0506                   .dbline 301
 0506           ;         schedule_processing(hour);
 0506 5200              mov A,[X+0]
 0508 08                push A
 0509 9F5E              xcall _schedule_processing
 050B 38FF              add SP,-1
 050D                   .dbline 302
 050D           ;     }
 050D           L74:
 050D                   .dbline 299
 050D 7700              inc [X+0]
 050F           L76:
 050F                   .dbline 299
 050F 10                push X
 0510 7C0000            xcall _RTC_bReadHour
 0513 20                pop X
 0514 62D000            mov REG[0xd0],>__r0
 0517 08                push A
 0518 960D              xcall _bcd_to_byte
 051A 38FF              add SP,-1
 051C 62D000            mov REG[0xd0],>__r0
 051F 3B00              cmp A,[X+0]
 0521 DFE4              jnc L73
 0523           X25:
 0523                   .dbline -2
 0523           L68:
 0523 38FF              add SP,-1
 0525 20                pop X
 0526                   .dbline 0 ; func end
 0526 7F                ret
 0527                   .dbsym l hour 0 c
 0527                   .dbend
 0527                   .dbfunc e rtc_update _rtc_update fV
 0527           ;       datetime -> X-5
 0527           _rtc_update::
 0527                   .dbline -1
 0527 10                push X
 0528 4F                mov X,SP
 0529                   .dbline 306
 0529           ; }
 0529           ; 
 0529           ; void rtc_update(struct datetime *datetime)
 0529           ; {
 0529                   .dbline 307
 0529           ;       RTC_Stop();
 0529 10                push X
 052A 7C0000            xcall _RTC_Stop
 052D 20                pop X
 052E                   .dbline 308
 052E           ;       RTC_SetHour(byte_to_bcd(datetime->hour));
 052E 62D000            mov REG[0xd0],>__r0
 0531 52FC              mov A,[X-4]
 0533 0102              add A,2
 0535 5300              mov [__r1],A
 0537 52FB              mov A,[X-5]
 0539 0900              adc A,0
 053B 60D4              mov REG[0xd4],A
 053D 3E00              mvi A,[__r1]
 053F 08                push A
 0540 95AE              xcall _byte_to_bcd
 0542 38FF              add SP,-1
 0544 62D000            mov REG[0xd0],>__r0
 0547 10                push X
 0548 7C0000            xcall _RTC_SetHour
 054B 20                pop X
 054C                   .dbline 309
 054C           ;       RTC_SetMinute(byte_to_bcd(datetime->min));
 054C 62D000            mov REG[0xd0],>__r0
 054F 52FC              mov A,[X-4]
 0551 0101              add A,1
 0553 5300              mov [__r1],A
 0555 52FB              mov A,[X-5]
 0557 0900              adc A,0
 0559 60D4              mov REG[0xd4],A
 055B 3E00              mvi A,[__r1]
 055D 08                push A
 055E 9590              xcall _byte_to_bcd
 0560 38FF              add SP,-1
 0562 62D000            mov REG[0xd0],>__r0
 0565 10                push X
 0566 7C0000            xcall _RTC_SetMinute
 0569 20                pop X
 056A                   .dbline 310
 056A           ;       RTC_SetSecond(byte_to_bcd(datetime->sec));
 056A 62D000            mov REG[0xd0],>__r0
 056D 52FC              mov A,[X-4]
 056F 5300              mov [__r1],A
 0571 52FB              mov A,[X-5]
 0573 60D4              mov REG[0xd4],A
 0575 3E00              mvi A,[__r1]
 0577 08                push A
 0578 9576              xcall _byte_to_bcd
 057A 38FF              add SP,-1
 057C 62D000            mov REG[0xd0],>__r0
 057F 10                push X
 0580 7C0000            xcall _RTC_SetSecond
 0583                   .dbline 311
 0583           ;       RTC_Start();
 0583 7C0000            xcall _RTC_Start
 0586 20                pop X
 0587                   .dbline -2
 0587           L77:
 0587 20                pop X
 0588                   .dbline 0 ; func end
 0588 7F                ret
 0589                   .dbsym l datetime -5 pS[datetime]
 0589                   .dbend
 0589                   .dbfunc e check_fld _check_fld fI
 0589           ;            cmd -> X-5
 0589           _check_fld::
 0589                   .dbline -1
 0589 10                push X
 058A 4F                mov X,SP
 058B 3802              add SP,2
 058D                   .dbline 315
 058D           ; }
 058D           ; 
 058D           ; bool check_fld(const char *cmd)
 058D           ; {
 058D                   .dbline 316
 058D           ;     return !str_cmp_const(fld_buf, cmd, strlen(fld_buf) - 1);
 058D 5000              mov A,>_fld_buf
 058F 08                push A
 0590 5000              mov A,<_fld_buf
 0592 08                push A
 0593 7C0000            xcall _strlenLMM
 0596 62D000            mov REG[0xd0],>__r0
 0599 160001            sub [__r1],1
 059C 1E0000            sbb [__r0],0
 059F 5100              mov A,[__r1]
 05A1 08                push A
 05A2 52FB              mov A,[X-5]
 05A4 08                push A
 05A5 52FC              mov A,[X-4]
 05A7 08                push A
 05A8 5000              mov A,>_fld_buf
 05AA 08                push A
 05AB 5000              mov A,<_fld_buf
 05AD 08                push A
 05AE 94EE              xcall _str_cmp_const
 05B0 38F9              add SP,-7
 05B2 62D000            mov REG[0xd0],>__r0
 05B5 3900              cmp A,0
 05B7 B009              jnz L80
 05B9 560101            mov [X+1],1
 05BC 560000            mov [X+0],0
 05BF 8007              xjmp L81
 05C1           L80:
 05C1 560100            mov [X+1],0
 05C4 560000            mov [X+0],0
 05C7           L81:
 05C7 62D000            mov REG[0xd0],>__r0
 05CA 5201              mov A,[X+1]
 05CC 5300              mov [__r1],A
 05CE 5200              mov A,[X+0]
 05D0 5300              mov [__r0],A
 05D2                   .dbline -2
 05D2           L78:
 05D2 38FE              add SP,-2
 05D4 20                pop X
 05D5                   .dbline 0 ; func end
 05D5 7F                ret
 05D6                   .dbsym l cmd -5 pkc
 05D6                   .dbend
 05D6                   .dbfunc e NMEA_GetField _NMEA_GetField fV
 05D6           ;          count -> X+1
 05D6           ;              i -> X+0
 05D6           ;         result -> X-8
 05D6           ;          field -> X-6
 05D6           ;         packet -> X-5
 05D6           _NMEA_GetField::
 05D6                   .dbline -1
 05D6 10                push X
 05D7 4F                mov X,SP
 05D8 3806              add SP,6
 05DA                   .dbline 320
 05DA           ; }
 05DA           ; 
 05DA           ; void NMEA_GetField(char *packet, unsigned char field, char *result)
 05DA           ; {
 05DA                   .dbline 322
 05DA           ;     unsigned char i;
 05DA           ;     unsigned char count = 0;
 05DA 560100            mov [X+1],0
 05DD                   .dbline 325
 05DD           ;     
 05DD           ;     // Search field
 05DD           ;     for (i = 0; (i < NMEA_MAX_SIZE) & (count < field); i++)
 05DD 560000            mov [X+0],0
 05E0 803F              xjmp L86
 05E2           L83:
 05E2                   .dbline 326
 05E2           ;     {
 05E2                   .dbline 327
 05E2           ;         if (packet[i] == NMEA_FIELD_DELIMITER) count++;
 05E2 62D000            mov REG[0xd0],>__r0
 05E5 5200              mov A,[X+0]
 05E7 5300              mov [__r1],A
 05E9 550000            mov [__r0],0
 05EC 52FC              mov A,[X-4]
 05EE 0400              add [__r1],A
 05F0 52FB              mov A,[X-5]
 05F2 0C00              adc [__r0],A
 05F4 5100              mov A,[__r0]
 05F6 60D4              mov REG[0xd4],A
 05F8 3E00              mvi A,[__r1]
 05FA 392C              cmp A,44
 05FC B003              jnz L89
 05FE                   .dbline 327
 05FE 7701              inc [X+1]
 0600           L89:
 0600                   .dbline 328
 0600           ;               if (packet[i] == 0) break;
 0600 62D000            mov REG[0xd0],>__r0
 0603 5200              mov A,[X+0]
 0605 5300              mov [__r1],A
 0607 550000            mov [__r0],0
 060A 52FC              mov A,[X-4]
 060C 0400              add [__r1],A
 060E 52FB              mov A,[X-5]
 0610 0C00              adc [__r0],A
 0612 5100              mov A,[__r0]
 0614 60D4              mov REG[0xd4],A
 0616 3E00              mvi A,[__r1]
 0618 3900              cmp A,0
 061A B003              jnz L91
 061C                   .dbline 328
 061C 8040              xjmp L85
 061E           L91:
 061E                   .dbline 329
 061E           ;     }
 061E           L84:
 061E                   .dbline 325
 061E 7700              inc [X+0]
 0620           L86:
 0620                   .dbline 325
 0620 3D0052            cmp [X+0],82
 0623 D009              jnc L93
 0625           X26:
 0625 560301            mov [X+3],1
 0628 560200            mov [X+2],0
 062B 8007              xjmp L94
 062D           L93:
 062D 560300            mov [X+3],0
 0630 560200            mov [X+2],0
 0633           L94:
 0633 5201              mov A,[X+1]
 0635 3BFA              cmp A,[X-6]
 0637 D009              jnc L95
 0639           X27:
 0639 560501            mov [X+5],1
 063C 560400            mov [X+4],0
 063F 8007              xjmp L96
 0641           L95:
 0641 560500            mov [X+5],0
 0644 560400            mov [X+4],0
 0647           L96:
 0647 62D000            mov REG[0xd0],>__r0
 064A 5203              mov A,[X+3]
 064C 2305              and A,[X+5]
 064E 5300              mov [__r1],A
 0650 5202              mov A,[X+2]
 0652 2304              and A,[X+4]
 0654 3900              cmp A,0
 0656 BF8B              jnz L83
 0658 3C0000            cmp [__r1],0
 065B BF86              jnz L83
 065D           X28:
 065D           L85:
 065D                   .dbline 332
 065D           ;     
 065D           ;     // Measure field size
 065D           ;     for (count = 0; count < NMEA_MAX_SIZE; count++)
 065D 560100            mov [X+1],0
 0660 8057              xjmp L100
 0662           L97:
 0662                   .dbline 333
 0662           ;     {
 0662                   .dbline 334
 0662           ;         if (packet[i + count] == NMEA_FIELD_DELIMITER) break;
 0662 62D000            mov REG[0xd0],>__r0
 0665 5201              mov A,[X+1]
 0667 5300              mov [__r1],A
 0669 550000            mov [__r0],0
 066C 5200              mov A,[X+0]
 066E 0200              add A,[__r1]
 0670 5300              mov [__r1],A
 0672 5000              mov A,0
 0674 0A00              adc A,[__r0]
 0676 5300              mov [__r0],A
 0678 52FC              mov A,[X-4]
 067A 0400              add [__r1],A
 067C 52FB              mov A,[X-5]
 067E 0C00              adc [__r0],A
 0680 5100              mov A,[__r0]
 0682 60D4              mov REG[0xd4],A
 0684 3E00              mvi A,[__r1]
 0686 392C              cmp A,44
 0688 B003              jnz L101
 068A                   .dbline 334
 068A 8032              xjmp L99
 068C           L101:
 068C                   .dbline 335
 068C           ;         if (packet[i + count] == 0u) break;
 068C 62D000            mov REG[0xd0],>__r0
 068F 5201              mov A,[X+1]
 0691 5300              mov [__r1],A
 0693 550000            mov [__r0],0
 0696 5200              mov A,[X+0]
 0698 0200              add A,[__r1]
 069A 5300              mov [__r1],A
 069C 5000              mov A,0
 069E 0A00              adc A,[__r0]
 06A0 5300              mov [__r0],A
 06A2 52FC              mov A,[X-4]
 06A4 0400              add [__r1],A
 06A6 52FB              mov A,[X-5]
 06A8 0C00              adc [__r0],A
 06AA 5100              mov A,[__r0]
 06AC 60D4              mov REG[0xd4],A
 06AE 3E00              mvi A,[__r1]
 06B0 3900              cmp A,0
 06B2 B003              jnz L103
 06B4                   .dbline 335
 06B4 8008              xjmp L99
 06B6           L103:
 06B6                   .dbline 336
 06B6           ;     }
 06B6           L98:
 06B6                   .dbline 332
 06B6 7701              inc [X+1]
 06B8           L100:
 06B8                   .dbline 332
 06B8 3D0152            cmp [X+1],82
 06BB CFA6              jc L97
 06BD           X29:
 06BD           L99:
 06BD                   .dbline 337
 06BD           ;     strncpy(result, packet + i, count + 1);  // Add 1 to count for null terminator
 06BD 62D000            mov REG[0xd0],>__r0
 06C0 5201              mov A,[X+1]
 06C2 5300              mov [__r1],A
 06C4 550000            mov [__r0],0
 06C7 060001            add [__r1],1
 06CA 0E0000            adc [__r0],0
 06CD 5100              mov A,[__r0]
 06CF 08                push A
 06D0 5100              mov A,[__r1]
 06D2 08                push A
 06D3 5200              mov A,[X+0]
 06D5 5300              mov [__r1],A
 06D7 550000            mov [__r0],0
 06DA 52FC              mov A,[X-4]
 06DC 0400              add [__r1],A
 06DE 52FB              mov A,[X-5]
 06E0 0C00              adc [__r0],A
 06E2 5100              mov A,[__r0]
 06E4 08                push A
 06E5 5100              mov A,[__r1]
 06E7 08                push A
 06E8 52F8              mov A,[X-8]
 06EA 08                push A
 06EB 52F9              mov A,[X-7]
 06ED 08                push A
 06EE 7C0000            xcall _strncpy
 06F1 38FA              add SP,-6
 06F3                   .dbline 338
 06F3           ;       result[count] = 0u;     // Add null terminator
 06F3 62D000            mov REG[0xd0],>__r0
 06F6 5201              mov A,[X+1]
 06F8 5300              mov [__r1],A
 06FA 550000            mov [__r0],0
 06FD 52F9              mov A,[X-7]
 06FF 0400              add [__r1],A
 0701 52F8              mov A,[X-8]
 0703 0C00              adc [__r0],A
 0705 5100              mov A,[__r0]
 0707 60D5              mov REG[0xd5],A
 0709 5000              mov A,0
 070B 3F00              mvi [__r1],A
 070D                   .dbline -2
 070D           L82:
 070D 38FA              add SP,-6
 070F 20                pop X
 0710                   .dbline 0 ; func end
 0710 7F                ret
 0711                   .dbsym l count 1 c
 0711                   .dbsym l i 0 c
 0711                   .dbsym l result -8 pc
 0711                   .dbsym l field -6 c
 0711                   .dbsym l packet -5 pc
 0711                   .dbend
 0711                   .dbfunc e NMEA_handle_packet _NMEA_handle_packet fI
 0711           ;              n -> X+2
 0711           ;          error -> X+1
 0711           ;              i -> X+0
 0711           ;      NMEA_data -> X-7
 0711           ;         packet -> X-5
 0711           _NMEA_handle_packet::
 0711                   .dbline -1
 0711 10                push X
 0712 4F                mov X,SP
 0713 3809              add SP,9
 0715                   .dbline 342
 0715           ; }
 0715           ; 
 0715           ; bool NMEA_handle_packet(char *packet, char *NMEA_data)
 0715           ; {
 0715                   .dbline 344
 0715           ;     unsigned char i, n;
 0715           ;     unsigned char error = 0;
 0715 560100            mov [X+1],0
 0718                   .dbline 347
 0718           ;               
 0718           ;     // Check if appropriate packet is handled
 0718           ;       if (str_cmp(packet, NMEA_data, NMEA_HEADER_SIZE) == 0u)
 0718 5003              mov A,3
 071A 08                push A
 071B 52F9              mov A,[X-7]
 071D 08                push A
 071E 52FA              mov A,[X-6]
 0720 08                push A
 0721 52FB              mov A,[X-5]
 0723 08                push A
 0724 52FC              mov A,[X-4]
 0726 08                push A
 0727 9324              xcall _str_cmp
 0729 38FB              add SP,-5
 072B 62D000            mov REG[0xd0],>__r0
 072E 3900              cmp A,0
 0730 B0E9              jnz L106
 0732                   .dbline 350
 0732           ;     {
 0732           ;               // Check for receive errors
 0732           ;         for(i = 0; i < NMEA_MAX_SIZE; i++)
 0732                   .dbline 350
 0732 560000            mov [X+0],0
 0735 80C1              xjmp L111
 0737           L108:
 0737                   .dbline 351
 0737           ;         {
 0737                   .dbline 352
 0737           ;             if ((packet[i] < 32) & (packet[i] != 0x0D) & (packet[i] != NMEA_END_DELIMITER)) 
 0737 62D000            mov REG[0xd0],>__r0
 073A 5200              mov A,[X+0]
 073C 5300              mov [__r1],A
 073E 550000            mov [__r0],0
 0741 52FC              mov A,[X-4]
 0743 0400              add [__r1],A
 0745 52FB              mov A,[X-5]
 0747 0C00              adc [__r0],A
 0749 5100              mov A,[__r0]
 074B 60D4              mov REG[0xd4],A
 074D 3E00              mvi A,[__r1]
 074F 3920              cmp A,32
 0751 D009              jnc L117
 0753           X30:
 0753 560401            mov [X+4],1
 0756 560300            mov [X+3],0
 0759 8007              xjmp L118
 075B           L117:
 075B 560400            mov [X+4],0
 075E 560300            mov [X+3],0
 0761           L118:
 0761 62D000            mov REG[0xd0],>__r0
 0764 5200              mov A,[X+0]
 0766 5300              mov [__r1],A
 0768 550000            mov [__r0],0
 076B 52FC              mov A,[X-4]
 076D 0400              add [__r1],A
 076F 52FB              mov A,[X-5]
 0771 0C00              adc [__r0],A
 0773 5100              mov A,[__r0]
 0775 60D4              mov REG[0xd4],A
 0777 3E00              mvi A,[__r1]
 0779 390D              cmp A,13
 077B A009              jz L119
 077D 560601            mov [X+6],1
 0780 560500            mov [X+5],0
 0783 8007              xjmp L120
 0785           L119:
 0785 560600            mov [X+6],0
 0788 560500            mov [X+5],0
 078B           L120:
 078B 62D000            mov REG[0xd0],>__r0
 078E 5200              mov A,[X+0]
 0790 5300              mov [__r1],A
 0792 550000            mov [__r0],0
 0795 52FC              mov A,[X-4]
 0797 0400              add [__r1],A
 0799 52FB              mov A,[X-5]
 079B 0C00              adc [__r0],A
 079D 5100              mov A,[__r0]
 079F 60D4              mov REG[0xd4],A
 07A1 3E00              mvi A,[__r1]
 07A3 390A              cmp A,10
 07A5 A009              jz L121
 07A7 560801            mov [X+8],1
 07AA 560700            mov [X+7],0
 07AD 8007              xjmp L122
 07AF           L121:
 07AF 560800            mov [X+8],0
 07B2 560700            mov [X+7],0
 07B5           L122:
 07B5 62D000            mov REG[0xd0],>__r0
 07B8 5204              mov A,[X+4]
 07BA 2306              and A,[X+6]
 07BC 5300              mov [__r1],A
 07BE 5203              mov A,[X+3]
 07C0 2305              and A,[X+5]
 07C2 5300              mov [__r0],A
 07C4 5208              mov A,[X+8]
 07C6 2400              and [__r1],A
 07C8 5207              mov A,[X+7]
 07CA 2400              and [__r0],A
 07CC B006              jnz X31
 07CE 3C0000            cmp [__r1],0
 07D1 A005              jz L112
 07D3           X31:
 07D3                   .dbline 354
 07D3           ;             {
 07D3           ;                 error++;
 07D3                   .dbline 354
 07D3 7701              inc [X+1]
 07D5                   .dbline 355
 07D5           ;                 break;
 07D5 8026              xjmp L110
 07D7           L112:
 07D7                   .dbline 357
 07D7           ;             }
 07D7           ;             if (packet[i] != NMEA_END_DELIMITER) break;
 07D7 62D000            mov REG[0xd0],>__r0
 07DA 5200              mov A,[X+0]
 07DC 5300              mov [__r1],A
 07DE 550000            mov [__r0],0
 07E1 52FC              mov A,[X-4]
 07E3 0400              add [__r1],A
 07E5 52FB              mov A,[X-5]
 07E7 0C00              adc [__r0],A
 07E9 5100              mov A,[__r0]
 07EB 60D4              mov REG[0xd4],A
 07ED 3E00              mvi A,[__r1]
 07EF 390A              cmp A,10
 07F1 A003              jz L123
 07F3                   .dbline 357
 07F3 8008              xjmp L110
 07F5           L123:
 07F5                   .dbline 358
 07F5           ;         }
 07F5           L109:
 07F5                   .dbline 350
 07F5 7700              inc [X+0]
 07F7           L111:
 07F7                   .dbline 350
 07F7 3D0052            cmp [X+0],82
 07FA CF3C              jc L108
 07FC           X32:
 07FC           L110:
 07FC                   .dbline 361
 07FC           ;               
 07FC           ;         // Copy buffer to NMEA packet if no errors found
 07FC           ;         if (!error) strncpy(NMEA_data, packet, NMEA_MAX_SIZE); 
 07FC 3D0100            cmp [X+1],0
 07FF B01C              jnz L107
 0801                   .dbline 361
 0801 5000              mov A,0
 0803 08                push A
 0804 5052              mov A,82
 0806 08                push A
 0807 52FB              mov A,[X-5]
 0809 08                push A
 080A 52FC              mov A,[X-4]
 080C 08                push A
 080D 52F9              mov A,[X-7]
 080F 08                push A
 0810 52FA              mov A,[X-6]
 0812 08                push A
 0813 7C0000            xcall _strncpy
 0816 38FA              add SP,-6
 0818                   .dbline 362
 0818           ;     }
 0818 8003              xjmp L107
 081A           L106:
 081A                   .dbline 363
 081A           ;       else error++;
 081A 7701              inc [X+1]
 081C           L107:
 081C                   .dbline 365
 081C           ;       
 081C           ;       if(error) return false;
 081C 3D0100            cmp [X+1],0
 081F A00C              jz L127
 0821                   .dbline 365
 0821 62D000            mov REG[0xd0],>__r0
 0824 550000            mov [__r1],0
 0827 550000            mov [__r0],0
 082A 800A              xjmp L105
 082C           L127:
 082C                   .dbline 366
 082C           ;       else return true;       
 082C 62D000            mov REG[0xd0],>__r0
 082F 550001            mov [__r1],1
 0832 550000            mov [__r0],0
 0835                   .dbline -2
 0835           L105:
 0835 38F7              add SP,-9
 0837 20                pop X
 0838                   .dbline 0 ; func end
 0838 7F                ret
 0839                   .dbsym l n 2 c
 0839                   .dbsym l error 1 c
 0839                   .dbsym l i 0 c
 0839                   .dbsym l NMEA_data -7 pc
 0839                   .dbsym l packet -5 pc
 0839                   .dbend
 0839                   .dbfunc e NMEA_GetTimeUTC _NMEA_GetTimeUTC fV
 0839           ;          field -> X+82
 0839           ;            buf -> X+0
 0839           ;   gps_datetime -> X-7
 0839           ;          gprmc -> X-5
 0839           _NMEA_GetTimeUTC::
 0839                   .dbline -1
 0839 10                push X
 083A 4F                mov X,SP
 083B 38A4              add SP,-92
 083D                   .dbline 370
 083D           ; }
 083D           ; 
 083D           ; void NMEA_GetTimeUTC(char *gprmc, struct datetime *gps_datetime)
 083D           ; {
 083D                   .dbline 382
 083D           ;       #define POS_SIZE        2
 083D           ;       #define POS_HOUR        0
 083D           ;       #define POS_MIN         2
 083D           ;       #define POS_SEC         4       
 083D           ;       #define POS_DAY         0
 083D           ;       #define POS_MON         2
 083D           ;       #define POS_YEAR        4
 083D           ;       
 083D           ;       char field[NMEA_MAX_SIZE];
 083D           ;       char buf[NMEA_MAX_SIZE];
 083D           ;       
 083D           ;       NMEA_GetField(gprmc, NMEA_GPRMC_UTC, field);
 083D 62D000            mov REG[0xd0],>__r0
 0840 5A00              mov [__r1],X
 0842 060052            add [__r1],82
 0845 5003              mov A,3
 0847 08                push A
 0848 5100              mov A,[__r1]
 084A 08                push A
 084B 5001              mov A,1
 084D 08                push A
 084E 52FB              mov A,[X-5]
 0850 08                push A
 0851 52FC              mov A,[X-4]
 0853 08                push A
 0854 9D80              xcall _NMEA_GetField
 0856 38FB              add SP,-5
 0858                   .dbline 383
 0858           ;       if (field[0] != 0)
 0858 3D5200            cmp [X+82],0
 085B A0D0              jz L130
 085D                   .dbline 386
 085D           ;       {
 085D           ;               // Hour
 085D           ;               strncpy(buf, field + POS_HOUR, POS_SIZE);
 085D                   .dbline 386
 085D 5000              mov A,0
 085F 08                push A
 0860 5002              mov A,2
 0862 08                push A
 0863 62D000            mov REG[0xd0],>__r0
 0866 5A00              mov [__r1],X
 0868 060052            add [__r1],82
 086B 5003              mov A,3
 086D 08                push A
 086E 5100              mov A,[__r1]
 0870 08                push A
 0871 5003              mov A,3
 0873 08                push A
 0874 10                push X
 0875 7C0000            xcall _strncpy
 0878                   .dbline 387
 0878           ;               buf[POS_SIZE] = 0;      // Add null terminator
 0878 560200            mov [X+2],0
 087B                   .dbline 388
 087B           ;               gps_datetime->hour = atoi(buf);
 087B 62D000            mov REG[0xd0],>__r0
 087E 5003              mov A,3
 0880 08                push A
 0881 10                push X
 0882 7C0000            xcall _atoi
 0885 38F8              add SP,-8
 0887 62D000            mov REG[0xd0],>__r0
 088A 5100              mov A,[__r1]
 088C 5300              mov [__r0],A
 088E 52FA              mov A,[X-6]
 0890 0102              add A,2
 0892 5300              mov [__r3],A
 0894 52F9              mov A,[X-7]
 0896 0900              adc A,0
 0898 60D5              mov REG[0xd5],A
 089A 5100              mov A,[__r0]
 089C 3F00              mvi [__r3],A
 089E                   .dbline 391
 089E           ;               
 089E           ;               // Minutes
 089E           ;               strncpy(buf, field + POS_MIN, POS_SIZE);
 089E 5000              mov A,0
 08A0 08                push A
 08A1 5002              mov A,2
 08A3 08                push A
 08A4 5A00              mov [__r1],X
 08A6 060054            add [__r1],84
 08A9 5003              mov A,3
 08AB 08                push A
 08AC 5100              mov A,[__r1]
 08AE 08                push A
 08AF 5003              mov A,3
 08B1 08                push A
 08B2 10                push X
 08B3 7C0000            xcall _strncpy
 08B6                   .dbline 392
 08B6           ;               buf[POS_SIZE] = 0;      // Add null terminator
 08B6 560200            mov [X+2],0
 08B9                   .dbline 393
 08B9           ;               gps_datetime->min = atoi(buf);
 08B9 62D000            mov REG[0xd0],>__r0
 08BC 5003              mov A,3
 08BE 08                push A
 08BF 10                push X
 08C0 7C0000            xcall _atoi
 08C3 38F8              add SP,-8
 08C5 62D000            mov REG[0xd0],>__r0
 08C8 5100              mov A,[__r1]
 08CA 5300              mov [__r0],A
 08CC 52FA              mov A,[X-6]
 08CE 0101              add A,1
 08D0 5300              mov [__r3],A
 08D2 52F9              mov A,[X-7]
 08D4 0900              adc A,0
 08D6 60D5              mov REG[0xd5],A
 08D8 5100              mov A,[__r0]
 08DA 3F00              mvi [__r3],A
 08DC                   .dbline 396
 08DC           ;               
 08DC           ;               // Seconds
 08DC           ;               strncpy(buf, field + POS_SEC, POS_SIZE);
 08DC 5000              mov A,0
 08DE 08                push A
 08DF 5002              mov A,2
 08E1 08                push A
 08E2 5A00              mov [__r1],X
 08E4 060056            add [__r1],86
 08E7 5003              mov A,3
 08E9 08                push A
 08EA 5100              mov A,[__r1]
 08EC 08                push A
 08ED 5003              mov A,3
 08EF 08                push A
 08F0 10                push X
 08F1 7C0000            xcall _strncpy
 08F4                   .dbline 397
 08F4           ;               buf[POS_SIZE] = 0;      // Add null terminator
 08F4 560200            mov [X+2],0
 08F7                   .dbline 398
 08F7           ;               gps_datetime->sec = atoi(buf);
 08F7 62D000            mov REG[0xd0],>__r0
 08FA 5003              mov A,3
 08FC 08                push A
 08FD 10                push X
 08FE 7C0000            xcall _atoi
 0901 38F8              add SP,-8
 0903 62D000            mov REG[0xd0],>__r0
 0906 5100              mov A,[__r1]
 0908 5300              mov [__r0],A
 090A 52FA              mov A,[X-6]
 090C 5300              mov [__r3],A
 090E 52F9              mov A,[X-7]
 0910 60D5              mov REG[0xd5],A
 0912 5100              mov A,[__r0]
 0914 3F00              mvi [__r3],A
 0916                   .dbline 400
 0916           ;               
 0916           ;               gps_datetime->valid = true;
 0916 52FA              mov A,[X-6]
 0918 0106              add A,6
 091A 5300              mov [__r1],A
 091C 52F9              mov A,[X-7]
 091E 0900              adc A,0
 0920 60D5              mov REG[0xd5],A
 0922 5000              mov A,0
 0924 3F00              mvi [__r1],A
 0926 5001              mov A,1
 0928 3F00              mvi [__r1],A
 092A                   .dbline 401
 092A           ;       }
 092A 8016              xjmp L131
 092C           L130:
 092C                   .dbline 402
 092C           ;       else gps_datetime->valid = false;
 092C 62D000            mov REG[0xd0],>__r0
 092F 52FA              mov A,[X-6]
 0931 0106              add A,6
 0933 5300              mov [__r1],A
 0935 52F9              mov A,[X-7]
 0937 0900              adc A,0
 0939 60D5              mov REG[0xd5],A
 093B 5000              mov A,0
 093D 3F00              mvi [__r1],A
 093F 3F00              mvi [__r1],A
 0941           L131:
 0941                   .dbline 404
 0941           ;       
 0941           ;       NMEA_GetField(gprmc, NMEA_GPRMC_DATE, field);
 0941 62D000            mov REG[0xd0],>__r0
 0944 5A00              mov [__r1],X
 0946 060052            add [__r1],82
 0949 5003              mov A,3
 094B 08                push A
 094C 5100              mov A,[__r1]
 094E 08                push A
 094F 5007              mov A,7
 0951 08                push A
 0952 52FB              mov A,[X-5]
 0954 08                push A
 0955 52FC              mov A,[X-4]
 0957 08                push A
 0958 9C7C              xcall _NMEA_GetField
 095A 38FB              add SP,-5
 095C                   .dbline 405
 095C           ;       if (field[0] != 0)
 095C 3D5200            cmp [X+82],0
 095F A0D4              jz L137
 0961                   .dbline 408
 0961           ;       {
 0961           ;               // Day
 0961           ;               strncpy(buf, field + POS_DAY, POS_SIZE);
 0961                   .dbline 408
 0961 5000              mov A,0
 0963 08                push A
 0964 5002              mov A,2
 0966 08                push A
 0967 62D000            mov REG[0xd0],>__r0
 096A 5A00              mov [__r1],X
 096C 060052            add [__r1],82
 096F 5003              mov A,3
 0971 08                push A
 0972 5100              mov A,[__r1]
 0974 08                push A
 0975 5003              mov A,3
 0977 08                push A
 0978 10                push X
 0979 7C0000            xcall _strncpy
 097C                   .dbline 409
 097C           ;               buf[POS_SIZE] = 0;      // Add null terminator
 097C 560200            mov [X+2],0
 097F                   .dbline 410
 097F           ;               gps_datetime->day = atoi(buf);
 097F 62D000            mov REG[0xd0],>__r0
 0982 5003              mov A,3
 0984 08                push A
 0985 10                push X
 0986 7C0000            xcall _atoi
 0989 38F8              add SP,-8
 098B 62D000            mov REG[0xd0],>__r0
 098E 5100              mov A,[__r1]
 0990 5300              mov [__r0],A
 0992 52FA              mov A,[X-6]
 0994 0103              add A,3
 0996 5300              mov [__r3],A
 0998 52F9              mov A,[X-7]
 099A 0900              adc A,0
 099C 60D5              mov REG[0xd5],A
 099E 5100              mov A,[__r0]
 09A0 3F00              mvi [__r3],A
 09A2                   .dbline 413
 09A2           ;               
 09A2           ;               // Month
 09A2           ;               strncpy(buf, field + POS_MON, POS_SIZE);
 09A2 5000              mov A,0
 09A4 08                push A
 09A5 5002              mov A,2
 09A7 08                push A
 09A8 5A00              mov [__r1],X
 09AA 060054            add [__r1],84
 09AD 5003              mov A,3
 09AF 08                push A
 09B0 5100              mov A,[__r1]
 09B2 08                push A
 09B3 5003              mov A,3
 09B5 08                push A
 09B6 10                push X
 09B7 7C0000            xcall _strncpy
 09BA                   .dbline 414
 09BA           ;               buf[POS_SIZE] = 0;      // Add null terminator
 09BA 560200            mov [X+2],0
 09BD                   .dbline 415
 09BD           ;               gps_datetime->month = atoi(buf);
 09BD 62D000            mov REG[0xd0],>__r0
 09C0 5003              mov A,3
 09C2 08                push A
 09C3 10                push X
 09C4 7C0000            xcall _atoi
 09C7 38F8              add SP,-8
 09C9 62D000            mov REG[0xd0],>__r0
 09CC 5100              mov A,[__r1]
 09CE 5300              mov [__r0],A
 09D0 52FA              mov A,[X-6]
 09D2 0104              add A,4
 09D4 5300              mov [__r3],A
 09D6 52F9              mov A,[X-7]
 09D8 0900              adc A,0
 09DA 60D5              mov REG[0xd5],A
 09DC 5100              mov A,[__r0]
 09DE 3F00              mvi [__r3],A
 09E0                   .dbline 418
 09E0           ;               
 09E0           ;               // Year
 09E0           ;               strncpy(buf, field + POS_YEAR, POS_SIZE);
 09E0 5000              mov A,0
 09E2 08                push A
 09E3 5002              mov A,2
 09E5 08                push A
 09E6 5A00              mov [__r1],X
 09E8 060056            add [__r1],86
 09EB 5003              mov A,3
 09ED 08                push A
 09EE 5100              mov A,[__r1]
 09F0 08                push A
 09F1 5003              mov A,3
 09F3 08                push A
 09F4 10                push X
 09F5 7C0000            xcall _strncpy
 09F8                   .dbline 419
 09F8           ;               buf[POS_SIZE] = 0;      // Add null terminator
 09F8 560200            mov [X+2],0
 09FB                   .dbline 420
 09FB           ;               gps_datetime->year = atoi(buf);
 09FB 62D000            mov REG[0xd0],>__r0
 09FE 5003              mov A,3
 0A00 08                push A
 0A01 10                push X
 0A02 7C0000            xcall _atoi
 0A05 38F8              add SP,-8
 0A07 62D000            mov REG[0xd0],>__r0
 0A0A 5100              mov A,[__r1]
 0A0C 5300              mov [__r0],A
 0A0E 52FA              mov A,[X-6]
 0A10 0105              add A,5
 0A12 5300              mov [__r3],A
 0A14 52F9              mov A,[X-7]
 0A16 0900              adc A,0
 0A18 60D5              mov REG[0xd5],A
 0A1A 5100              mov A,[__r0]
 0A1C 3F00              mvi [__r3],A
 0A1E                   .dbline 422
 0A1E           ;               
 0A1E           ;               gps_datetime->valid = true;
 0A1E 52FA              mov A,[X-6]
 0A20 0106              add A,6
 0A22 5300              mov [__r1],A
 0A24 52F9              mov A,[X-7]
 0A26 0900              adc A,0
 0A28 60D5              mov REG[0xd5],A
 0A2A 5000              mov A,0
 0A2C 3F00              mvi [__r1],A
 0A2E 5001              mov A,1
 0A30 3F00              mvi [__r1],A
 0A32                   .dbline 423
 0A32           ;       }
 0A32 8016              xjmp L138
 0A34           L137:
 0A34                   .dbline 424
 0A34           ;       else gps_datetime->valid = false;
 0A34 62D000            mov REG[0xd0],>__r0
 0A37 52FA              mov A,[X-6]
 0A39 0106              add A,6
 0A3B 5300              mov [__r1],A
 0A3D 52F9              mov A,[X-7]
 0A3F 0900              adc A,0
 0A41 60D5              mov REG[0xd5],A
 0A43 5000              mov A,0
 0A45 3F00              mvi [__r1],A
 0A47 3F00              mvi [__r1],A
 0A49           L138:
 0A49                   .dbline -2
 0A49           L129:
 0A49 385C              add SP,-164
 0A4B 20                pop X
 0A4C                   .dbline 0 ; func end
 0A4C 7F                ret
 0A4D                   .dbsym l field 82 A[82:82]c
 0A4D                   .dbsym l buf 0 A[82:82]c
 0A4D                   .dbsym l gps_datetime -7 pS[datetime]
 0A4D                   .dbsym l gprmc -5 pc
 0A4D                   .dbend
 0A4D                   .dbfunc e str_cmp _str_cmp fc
 0A4D           ;              i -> X+0
 0A4D           ;           stop -> X-8
 0A4D           ;           str2 -> X-7
 0A4D           ;           str1 -> X-5
 0A4D           _str_cmp::
 0A4D                   .dbline -1
 0A4D 10                push X
 0A4E 4F                mov X,SP
 0A4F 3801              add SP,1
 0A51                   .dbline 428
 0A51           ; }
 0A51           ; 
 0A51           ; unsigned char str_cmp(char *str1, char *str2, unsigned char stop)
 0A51           ; {
 0A51                   .dbline 430
 0A51           ;     unsigned char i;
 0A51           ;     for(i = 0u; i <= stop; i++)
 0A51 560000            mov [X+0],0
 0A54 803A              xjmp L148
 0A56           L145:
 0A56                   .dbline 431
 0A56           ;     {
 0A56                   .dbline 432
 0A56           ;         if (str1[i] != str2[i]) return 1u;
 0A56 62D000            mov REG[0xd0],>__r0
 0A59 5200              mov A,[X+0]
 0A5B 5300              mov [__r1],A
 0A5D 550000            mov [__r0],0
 0A60 52FA              mov A,[X-6]
 0A62 0400              add [__r1],A
 0A64 52F9              mov A,[X-7]
 0A66 0C00              adc [__r0],A
 0A68 5100              mov A,[__r0]
 0A6A 60D4              mov REG[0xd4],A
 0A6C 3E00              mvi A,[__r1]
 0A6E 5300              mov [__r0],A
 0A70 5200              mov A,[X+0]
 0A72 5300              mov [__r3],A
 0A74 550000            mov [__r2],0
 0A77 52FC              mov A,[X-4]
 0A79 0400              add [__r3],A
 0A7B 52FB              mov A,[X-5]
 0A7D 0C00              adc [__r2],A
 0A7F 5100              mov A,[__r2]
 0A81 60D4              mov REG[0xd4],A
 0A83 3E00              mvi A,[__r3]
 0A85 3A00              cmp A,[__r0]
 0A87 A005              jz L149
 0A89                   .dbline 432
 0A89 5001              mov A,1
 0A8B 800E              xjmp L144
 0A8D           L149:
 0A8D                   .dbline 433
 0A8D           ;     }
 0A8D           L146:
 0A8D                   .dbline 430
 0A8D 7700              inc [X+0]
 0A8F           L148:
 0A8F                   .dbline 430
 0A8F 52F8              mov A,[X-8]
 0A91 3B00              cmp A,[X+0]
 0A93 DFC2              jnc L145
 0A95           X33:
 0A95                   .dbline 434
 0A95           ;     return 0u;
 0A95 62D000            mov REG[0xd0],>__r0
 0A98 5000              mov A,0
 0A9A                   .dbline -2
 0A9A           L144:
 0A9A 38FF              add SP,-1
 0A9C 20                pop X
 0A9D                   .dbline 0 ; func end
 0A9D 7F                ret
 0A9E                   .dbsym l i 0 c
 0A9E                   .dbsym l stop -8 c
 0A9E                   .dbsym l str2 -7 pc
 0A9E                   .dbsym l str1 -5 pc
 0A9E                   .dbend
 0A9E                   .dbfunc e str_cmp_const _str_cmp_const fc
 0A9E           ;              i -> X+0
 0A9E           ;           stop -> X-8
 0A9E           ;           str2 -> X-7
 0A9E           ;           str1 -> X-5
 0A9E           _str_cmp_const::
 0A9E                   .dbline -1
 0A9E 10                push X
 0A9F 4F                mov X,SP
 0AA0 3801              add SP,1
 0AA2                   .dbline 438
 0AA2           ; }
 0AA2           ; 
 0AA2           ; unsigned char str_cmp_const(char *str1, const char *str2, unsigned char stop)
 0AA2           ; {
 0AA2                   .dbline 440
 0AA2           ;     unsigned char i;
 0AA2           ;     for(i = 0u; i <= stop; i++)
 0AA2 560000            mov [X+0],0
 0AA5 803B              xjmp L155
 0AA7           L152:
 0AA7                   .dbline 441
 0AA7           ;     {
 0AA7                   .dbline 442
 0AA7           ;         if (str1[i] != str2[i]) return 1u;
 0AA7 62D000            mov REG[0xd0],>__r0
 0AAA 5200              mov A,[X+0]
 0AAC 5300              mov [__r1],A
 0AAE 550000            mov [__r0],0
 0AB1 52FA              mov A,[X-6]
 0AB3 0400              add [__r1],A
 0AB5 52F9              mov A,[X-7]
 0AB7 0C00              adc [__r0],A
 0AB9 5100              mov A,[__r0]
 0ABB 10                push X
 0ABC 5800              mov X,[__r1]
 0ABE 28                romx
 0ABF 20                pop X
 0AC0 5300              mov [__r0],A
 0AC2 5200              mov A,[X+0]
 0AC4 5300              mov [__r3],A
 0AC6 550000            mov [__r2],0
 0AC9 52FC              mov A,[X-4]
 0ACB 0400              add [__r3],A
 0ACD 52FB              mov A,[X-5]
 0ACF 0C00              adc [__r2],A
 0AD1 5100              mov A,[__r2]
 0AD3 60D4              mov REG[0xd4],A
 0AD5 3E00              mvi A,[__r3]
 0AD7 3A00              cmp A,[__r0]
 0AD9 A005              jz L156
 0ADB                   .dbline 442
 0ADB 5001              mov A,1
 0ADD 800E              xjmp L151
 0ADF           L156:
 0ADF                   .dbline 443
 0ADF           ;     }
 0ADF           L153:
 0ADF                   .dbline 440
 0ADF 7700              inc [X+0]
 0AE1           L155:
 0AE1                   .dbline 440
 0AE1 52F8              mov A,[X-8]
 0AE3 3B00              cmp A,[X+0]
 0AE5 DFC1              jnc L152
 0AE7           X34:
 0AE7                   .dbline 444
 0AE7           ;     return 0u;
 0AE7 62D000            mov REG[0xd0],>__r0
 0AEA 5000              mov A,0
 0AEC                   .dbline -2
 0AEC           L151:
 0AEC 38FF              add SP,-1
 0AEE 20                pop X
 0AEF                   .dbline 0 ; func end
 0AEF 7F                ret
 0AF0                   .dbsym l i 0 c
 0AF0                   .dbsym l stop -8 c
 0AF0                   .dbsym l str2 -7 pkc
 0AF0                   .dbsym l str1 -5 pc
 0AF0                   .dbend
 0AF0                   .dbfunc e byte_to_bcd _byte_to_bcd fc
 0AF0           ;            reg -> X+2
 0AF0           ;            low -> X+1
 0AF0           ;           high -> X+0
 0AF0           ;           byte -> X-4
 0AF0           _byte_to_bcd::
 0AF0                   .dbline -1
 0AF0 10                push X
 0AF1 4F                mov X,SP
 0AF2 3803              add SP,3
 0AF4                   .dbline 448
 0AF4           ; }
 0AF4           ; 
 0AF4           ; unsigned char byte_to_bcd(unsigned char byte)
 0AF4           ; {
 0AF4                   .dbline 451
 0AF4           ;     unsigned char high, low, reg;
 0AF4           ;     
 0AF4           ;     high = byte / DECIMAL_COUNT_SYSTEM_BASIS;
 0AF4 500A              mov A,10
 0AF6 08                push A
 0AF7 52FC              mov A,[X-4]
 0AF9 08                push A
 0AFA 62D000            mov REG[0xd0],>__r0
 0AFD 7C0000            xcall __divmodu_8X8_8
 0B00 18                pop A
 0B01 5400              mov [X+0],A
 0B03 38FF              add SP,-1
 0B05                   .dbline 452
 0B05           ;     low = byte - high * DECIMAL_COUNT_SYSTEM_BASIS;
 0B05 5200              mov A,[X+0]
 0B07 60E8              mov REG[0xe8],A
 0B09 62E90A            mov REG[0xe9],10
 0B0C 40                nop
 0B0D 5DEB              mov A,REG[0xeb]
 0B0F 5300              mov [__r0],A
 0B11 52FC              mov A,[X-4]
 0B13 1200              sub A,[__r0]
 0B15 5401              mov [X+1],A
 0B17                   .dbline 453
 0B17           ;     reg = (high << DECIMAL_NUMBER_SIZE) + low;
 0B17 5200              mov A,[X+0]
 0B19 64                asl A
 0B1A 64                asl A
 0B1B 64                asl A
 0B1C 64                asl A
 0B1D 0301              add A,[X+1]
 0B1F 5402              mov [X+2],A
 0B21                   .dbline 455
 0B21           ;     
 0B21           ;     return reg;
 0B21 5202              mov A,[X+2]
 0B23                   .dbline -2
 0B23           L158:
 0B23 38FD              add SP,-3
 0B25 20                pop X
 0B26                   .dbline 0 ; func end
 0B26 7F                ret
 0B27                   .dbsym l reg 2 c
 0B27                   .dbsym l low 1 c
 0B27                   .dbsym l high 0 c
 0B27                   .dbsym l byte -4 c
 0B27                   .dbend
 0B27                   .dbfunc e bcd_to_byte _bcd_to_byte fc
 0B27           ;           byte -> X+2
 0B27           ;            low -> X+1
 0B27           ;           high -> X+0
 0B27           ;            reg -> X-4
 0B27           _bcd_to_byte::
 0B27                   .dbline -1
 0B27 10                push X
 0B28 4F                mov X,SP
 0B29 3803              add SP,3
 0B2B                   .dbline 459
 0B2B           ; }
 0B2B           ; 
 0B2B           ; unsigned char bcd_to_byte(unsigned char reg)
 0B2B           ; {
 0B2B                   .dbline 462
 0B2B           ;     unsigned char high, low, byte;
 0B2B           ;     
 0B2B           ;     high = (reg >> DECIMAL_NUMBER_SIZE);
 0B2B 52FC              mov A,[X-4]
 0B2D 62D000            mov REG[0xd0],>__r0
 0B30 67                asr A
 0B31 67                asr A
 0B32 67                asr A
 0B33 67                asr A
 0B34 210F              and A,15
 0B36 5400              mov [X+0],A
 0B38                   .dbline 463
 0B38           ;     low = reg - (high << DECIMAL_NUMBER_SIZE);
 0B38 5200              mov A,[X+0]
 0B3A 64                asl A
 0B3B 64                asl A
 0B3C 64                asl A
 0B3D 64                asl A
 0B3E 5300              mov [__r0],A
 0B40 52FC              mov A,[X-4]
 0B42 1200              sub A,[__r0]
 0B44 5401              mov [X+1],A
 0B46                   .dbline 464
 0B46           ;     byte = low + high * DECIMAL_COUNT_SYSTEM_BASIS;
 0B46 5200              mov A,[X+0]
 0B48 60E8              mov REG[0xe8],A
 0B4A 62E90A            mov REG[0xe9],10
 0B4D 40                nop
 0B4E 5DEB              mov A,REG[0xeb]
 0B50 5300              mov [__r0],A
 0B52 5201              mov A,[X+1]
 0B54 0200              add A,[__r0]
 0B56 5402              mov [X+2],A
 0B58                   .dbline 466
 0B58           ; 
 0B58           ;     return byte;
 0B58 5202              mov A,[X+2]
 0B5A                   .dbline -2
 0B5A           L159:
 0B5A 38FD              add SP,-3
 0B5C 20                pop X
 0B5D                   .dbline 0 ; func end
 0B5D 7F                ret
 0B5E                   .dbsym l byte 2 c
 0B5E                   .dbsym l low 1 c
 0B5E                   .dbsym l high 0 c
 0B5E                   .dbsym l reg -4 c
 0B5E                   .dbend
 0B5E                   .dbfunc e utc_to_local _utc_to_local fV
 0B5E           ; local_datetime -> X-7
 0B5E           ;   utc_datetime -> X-5
 0B5E           _utc_to_local::
 0B5E                   .dbline -1
 0B5E 10                push X
 0B5F 4F                mov X,SP
 0B60                   .dbline 470
 0B60           ; }
 0B60           ; 
 0B60           ; void utc_to_local(struct datetime *utc_datetime, struct datetime *local_datetime)
 0B60           ; {
 0B60                   .dbline 471
 0B60           ;       local_datetime->valid = utc_datetime->valid;
 0B60 62D000            mov REG[0xd0],>__r0
 0B63 52FC              mov A,[X-4]
 0B65 0106              add A,6
 0B67 5300              mov [__r1],A
 0B69 52FB              mov A,[X-5]
 0B6B 0900              adc A,0
 0B6D 60D4              mov REG[0xd4],A
 0B6F 3E00              mvi A,[__r1]
 0B71 5300              mov [__r0],A
 0B73 3E00              mvi A,[__r1]
 0B75 5300              mov [__r1],A
 0B77 52FA              mov A,[X-6]
 0B79 0106              add A,6
 0B7B 5300              mov [__r3],A
 0B7D 52F9              mov A,[X-7]
 0B7F 0900              adc A,0
 0B81 60D5              mov REG[0xd5],A
 0B83 5100              mov A,[__r0]
 0B85 3F00              mvi [__r3],A
 0B87 5100              mov A,[__r1]
 0B89 3F00              mvi [__r3],A
 0B8B                   .dbline 472
 0B8B           ;       local_datetime->sec = utc_datetime->sec;
 0B8B 52FC              mov A,[X-4]
 0B8D 5300              mov [__r1],A
 0B8F 52FB              mov A,[X-5]
 0B91 60D4              mov REG[0xd4],A
 0B93 3E00              mvi A,[__r1]
 0B95 5300              mov [__r0],A
 0B97 52FA              mov A,[X-6]
 0B99 5300              mov [__r3],A
 0B9B 52F9              mov A,[X-7]
 0B9D 60D5              mov REG[0xd5],A
 0B9F 5100              mov A,[__r0]
 0BA1 3F00              mvi [__r3],A
 0BA3                   .dbline 473
 0BA3           ;       local_datetime->min = utc_datetime->min;
 0BA3 52FC              mov A,[X-4]
 0BA5 0101              add A,1
 0BA7 5300              mov [__r1],A
 0BA9 52FB              mov A,[X-5]
 0BAB 0900              adc A,0
 0BAD 60D4              mov REG[0xd4],A
 0BAF 3E00              mvi A,[__r1]
 0BB1 5300              mov [__r0],A
 0BB3 52FA              mov A,[X-6]
 0BB5 0101              add A,1
 0BB7 5300              mov [__r3],A
 0BB9 52F9              mov A,[X-7]
 0BBB 0900              adc A,0
 0BBD 60D5              mov REG[0xd5],A
 0BBF 5100              mov A,[__r0]
 0BC1 3F00              mvi [__r3],A
 0BC3                   .dbline 474
 0BC3           ;       local_datetime->hour = utc_datetime->hour + GMT_OFFSET;
 0BC3 52FC              mov A,[X-4]
 0BC5 0102              add A,2
 0BC7 5300              mov [__r1],A
 0BC9 52FB              mov A,[X-5]
 0BCB 0900              adc A,0
 0BCD 60D4              mov REG[0xd4],A
 0BCF 3E00              mvi A,[__r1]
 0BD1 5300              mov [__r0],A
 0BD3 060003            add [__r0],3
 0BD6 52FA              mov A,[X-6]
 0BD8 0102              add A,2
 0BDA 5300              mov [__r3],A
 0BDC 52F9              mov A,[X-7]
 0BDE 0900              adc A,0
 0BE0 60D5              mov REG[0xd5],A
 0BE2 5100              mov A,[__r0]
 0BE4 3F00              mvi [__r3],A
 0BE6                   .dbline 475
 0BE6           ;       if (local_datetime->hour > HOUR_MAX) local_datetime->hour -= (HOUR_MAX + 1);
 0BE6 52FA              mov A,[X-6]
 0BE8 0102              add A,2
 0BEA 5300              mov [__r1],A
 0BEC 52F9              mov A,[X-7]
 0BEE 0900              adc A,0
 0BF0 60D4              mov REG[0xd4],A
 0BF2 3E00              mvi A,[__r1]
 0BF4 5300              mov [__r0],A
 0BF6 5017              mov A,23
 0BF8 3A00              cmp A,[__r0]
 0BFA D023              jnc L161
 0BFC           X35:
 0BFC                   .dbline 475
 0BFC 62D000            mov REG[0xd0],>__r0
 0BFF 52FA              mov A,[X-6]
 0C01 0102              add A,2
 0C03 5300              mov [__r1],A
 0C05 52F9              mov A,[X-7]
 0C07 0900              adc A,0
 0C09 5300              mov [__r0],A
 0C0B 60D4              mov REG[0xd4],A
 0C0D 3E00              mvi A,[__r1]
 0C0F 7A00              dec [__r1]
 0C11 5300              mov [__r2],A
 0C13 160018            sub [__r2],24
 0C16 5100              mov A,[__r0]
 0C18 60D5              mov REG[0xd5],A
 0C1A 5100              mov A,[__r2]
 0C1C 3F00              mvi [__r1],A
 0C1E           L161:
 0C1E                   .dbline -2
 0C1E           L160:
 0C1E 20                pop X
 0C1F                   .dbline 0 ; func end
 0C1F 7F                ret
 0C20                   .dbsym l local_datetime -7 pS[datetime]
 0C20                   .dbsym l utc_datetime -5 pS[datetime]
 0C20                   .dbend
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _NMEA_pointer_rf::
 0000 00                .byte 0
 0001                   .dbsym e NMEA_pointer_rf _NMEA_pointer_rf c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _NMEA_pointer_gps::
 0000 00                .byte 0
 0001                   .dbsym e NMEA_pointer_gps _NMEA_pointer_gps c
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _override_counter::
 0000 00000000          .byte 0,0,0,0
 0004                   .dbsym e override_counter _override_counter l
                        .area data(ram, con, rel)
 0000                   .dbfile C:\Work\FitoLamp\FW\Slave\FITOLA~1\FITOLA~1\FITOLA~1\main.c
 0000           _fld_buf::
 0000 000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000  .word 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
 003C 00000000000000000000      .word 0,0,0,0,0
 0046 00000000000000000000      .word 0,0,0,0,0
 0050 0000              .byte 0,0
 0052                   .dbsym e fld_buf _fld_buf A[82:82]c
                        .area lit(rom, con, rel, lit)
 001A           L29:
 001A 3000              .byte 48,0
